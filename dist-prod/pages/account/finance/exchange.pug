extends ../../bootstrap_base
block title
  title 积分兑换
block content
  .hidden#data=objToStr({scores: data.scores, userScores: data.userScores})
  .container-fluid.max-width#app(v-cloak)
    .row
      .col-xs-12.col-md-8.col-md-offset-2.box-shadow-panel
        .account-exchange
          -const targetUserScores = data.userScores;
          include ./nav
          .row
            .col-xs-12.col-md-6
              label 兑出类型
              div
                .radio(v-for='s in scores' :title="s.score2other?'':'不可兑出'")
                  label
                    input(type='radio' :disabled="!s.score2other || s.type === toScoreType" :value='s.type' v-model='fromScoreType')
                    span {{s.name}}
                    span.text-danger {{!s.score2other?"（不可兑出）":""}}
            .col-xs-12.col-md-6
              label 兑入类型
              div
                .radio(v-for='s in scores' :title="s.other2score?'':'不可兑入'")
                  label
                    input(type='radio' :disabled="!s.other2score || s.type === fromScoreType" :value='s.type' v-model='toScoreType')
                    span {{s.name}}
                    span.text-danger {{!s.other2score?"（不可兑入）":""}}
            .col-xs-12.col-md-12.m-b-05(v-if='fromScore && toScore')
              span 汇率：
                strong 1{{fromScore.unit}}{{fromScore.name}} - {{exchangeRate}}{{toScore.unit}}{{toScore.name}}
            .col-xs-12.col-md-12(v-if='fromScore && toScore')
              .form-group
                span 兑换金额（{{toScore.name}}/{{toScore.unit}}）：
                .form-inline.m-t-05
                  input.form-control(type='text' v-model.number='toNum' @input='toNumChange' )
              .form-group
                span 所需：
                  strong(:class='!enough?"text-danger":""') {{fromScore.name}} {{fromNum/100}} {{fromScore.unit}}
                    span(v-if='!enough') ，当前{{fromScore.name}}不足
              .form-group
                span 登录密码：
                .form-inline.m-t-05
                  input.hidden(type='text' autocomplete='username')
                  input.form-control(type='password' v-model.trim='password')
              .form-group
                button.btn.btn-primary(v-if='submitting') 提交中...
                button.btn.btn-primary(v-else-if='enough && password && toNum > 0 && fromNum > 0' @click='submit') 提交
                button.btn.btn-primary(v-else disabled) 提交
block scripts
  script.
    var data = NKC.methods.getDataById('data');
    var app = new Vue({
      el: '#app',
      data: {
        userScores: data.userScores,
        scores: data.scores,
        fromScoreType: '',
        toScoreType: '',
        toNum: '',

        password: '',

        submitting: false,
      },
      computed: {
        enough: function() {
          return this.fromNum <= this.userFromNum;
        },
        userFromNum: function() {
          var userScores = this.userScores;
          var fromScoreType = this.fromScoreType;
          var targetScore = this.arrayFind(userScores, function(s) {
            return s.type === fromScoreType;
          });
          return targetScore? targetScore.number: 0;
        },
        fromScore: function() {
          var self = this;
          return this.arrayFind(this.scores, function(s) {
            return s.type === self.fromScoreType;
          });
        },
        toScore: function() {
          var self = this;
          return this.arrayFind(this.scores, function (s) {
            return s.type === self.toScoreType;
          });
        },
        fromNum: function() {
          var toNum = this.toNum;
          var fromScore = this.fromScore;
          var toScore = this.toScore;
          if (!fromScore || !toScore) return 0;
          var fromNum = toNum * 100 * fromScore.weight / toScore.weight;
          fromNum = Math.ceil(fromNum);
          return fromNum;
        },
        exchangeRate: function() {
          var fromScore = this.fromScore;
          var toScore = this.toScore;
          var rate = toScore.weight / fromScore.weight;
          return Number(rate.toFixed(5));
        }
      },
      methods: {
        arrayFind: function (arr, func) {
          for (var i = 0; i < arr.length; i++) {
            if (func(arr[i])) {
              return arr[i];
            }
          }
        },
        toNumChange: function() {
          var toNum = this.toNum;
          this.toNum = Number(this.toNum.toFixed(2));
          console.log(toNum);
        },
        submit: function () {
          var self = this;
          var toScore = this.toScore;
          var fromScore = this.fromScore;
          var password = this.password;
          var toNum = this.toNum;
          var fromNum = this.fromNum;
          return Promise.resolve()
            .then(function() {
              if(toNum === 0) throw new Error('兑换金额必须大于0');
              if(password === '') throw new Error('请输入登录密码');
              return sweetQuestion(
                '确定要将' +
                fromNum / 100 +
                fromScore.unit +
                fromScore.name +
                '兑换成' +
                toNum +
                toScore.unit +
                toScore.name +
                '？'
              );
            })
            .then(function() {
              self.submitting = true;
              return nkcAPI('/account/finance/exchange', 'POST', {
                fromScoreType: fromScore.type,
                toScoreType: toScore.type,
                toNum: toNum * 100,
                fromNum: fromNum,
                password: password
              });
            })
            .then(function() {
              sweetSuccess('兑换成功');
              self.submitting = false;
              setTimeout(function() {
                window.location.reload();
              }, 2000)
            })
            .catch(function(err) {
              self.submitting = false;
              sweetError(err);
            })
        },
      }
    });
