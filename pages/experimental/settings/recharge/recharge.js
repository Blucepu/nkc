(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById('data');
var app = new Vue({
  el: '#app',
  data: {
    submitting: false,
    recharge: null,
    withdraw: null
  },
  mounted: function mounted() {
    var _data$rechargeSetting = data.rechargeSettings,
        recharge = _data$rechargeSetting.recharge,
        withdraw = _data$rechargeSetting.withdraw; // 处理提现时间限制

    withdraw._startingTime = this.getHMS(withdraw.startingTime);
    withdraw._endTime = this.getHMS(withdraw.endTime); // 转换金额

    this.convertNumber(withdraw, 'toPage');
    this.convertNumber(recharge, 'toPage');
    this.recharge = recharge;
    this.withdraw = withdraw;
  },
  methods: {
    getHMS: getHMS,
    HMSToNumber: HMSToNumber,
    checkNumber: NKC.methods.checkData.checkNumber,
    checkString: NKC.methods.checkData.checkString,
    bigNumber: NKC.modules.math.bignumber,
    convertNumber: function convertNumber(withdraw, type) {
      // type: toPage, toServer
      if (type === 'toPage') {
        withdraw._min = withdraw.min / 100;
        withdraw._max = withdraw.max / 100;
        withdraw.aliPay._fee = NKC.modules.math.chain(this.bigNumber(withdraw.aliPay.fee)).multiply(100).done().toNumber();
        withdraw.weChat._fee = NKC.modules.math.chain(this.bigNumber(withdraw.weChat.fee)).multiply(100).done().toNumber();
      } else {
        withdraw.min = withdraw._min * 100;
        withdraw.max = withdraw._max * 100;
        withdraw.aliPay.fee = NKC.modules.math.chain(this.bigNumber(withdraw.aliPay._fee)).multiply(this.bigNumber(0.01)).done().toNumber();
        withdraw.weChat.fee = NKC.modules.math.chain(this.bigNumber(withdraw.weChat._fee)).multiply(this.bigNumber(0.01)).done().toNumber();
        delete withdraw.aliPay._fee;
        delete withdraw.weChat._fee;
        delete withdraw._min;
        delete withdraw._max;
      }
    },
    save: function save() {
      var _this = this;

      var recharge = JSON.parse(JSON.stringify(this.recharge));
      var withdraw = JSON.parse(JSON.stringify(this.withdraw));
      var checkNumber = this.checkNumber;
      var self = this;
      Promise.resolve().then(function () {
        checkNumber(recharge._min, {
          name: '单次最小充值金额',
          min: 0.01,
          fractionDigits: 2
        });
        checkNumber(recharge._max, {
          name: '单次最大充值金额',
          min: 0.01,
          fractionDigits: 2
        });
        if (recharge._min > recharge._max) throw "\u5355\u6B21\u5145\u503C\u91D1\u989D\u8BBE\u7F6E\u9519\u8BEF";
        checkNumber(recharge.aliPay._fee, {
          name: '支付宝充值手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(recharge.weChat._fee, {
          name: '微信支付充值手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(withdraw._min, {
          name: '单次最小提现金额',
          min: 0.01,
          fractionDigits: 2
        });
        checkNumber(withdraw._max, {
          name: '单次最大提现金额',
          min: 0.01,
          fractionDigits: 2
        });
        if (withdraw._min > withdraw._max) throw "\u5355\u6B21\u63D0\u73B0\u91D1\u989D\u8BBE\u7F6E\u9519\u8BEF";
        checkNumber(withdraw.countOneDay, {
          name: '每天最大提现次数',
          min: 0
        });
        checkNumber(withdraw.aliPay._fee, {
          name: '支付宝提现手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(withdraw.weChat._fee, {
          name: '微信支付提现手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        withdraw.startingTime = _this.HMSToNumber(withdraw._startingTime);
        withdraw.endTime = _this.HMSToNumber(withdraw._endTime);
        delete withdraw._startingTime;
        delete withdraw._endTime;

        _this.convertNumber(withdraw, 'toServer');

        _this.convertNumber(recharge, 'toServer');

        _this.submitting = true;
        return nkcAPI('/e/settings/recharge', 'PATCH', {
          recharge: recharge,
          withdraw: withdraw
        });
      }).then(function () {
        self.submitting = false;
        sweetSuccess('保存成功');
      })["catch"](function (err) {
        self.submitting = false;
        sweetError(err);
      });
    }
  }
});

function getHMS(t) {
  return {
    hour: Math.floor(t / 3600000),
    min: Math.floor(t / 60000) % 60,
    sec: Math.floor(t / 1000) % 60
  };
}

function HMSToNumber(t) {
  return t.hour * 60 * 60 * 1000 + t.min * 60 * 1000 + t.sec * 1000;
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
