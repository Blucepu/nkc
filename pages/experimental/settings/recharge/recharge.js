(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById('data');
var app = new Vue({
  el: '#app',
  data: {
    submitting: false,
    recharge: null,
    withdraw: null
  },
  mounted: function mounted() {
    var _data$rechargeSetting = data.rechargeSettings,
        recharge = _data$rechargeSetting.recharge,
        withdraw = _data$rechargeSetting.withdraw; // 处理提现时间限制

    withdraw._startingTime = this.getHMS(withdraw.startingTime);
    withdraw._endTime = this.getHMS(withdraw.endTime); // 转换金额

    this.convertNumber(withdraw, 'toPage');
    this.convertNumber(recharge, 'toPage');
    this.recharge = recharge;
    this.withdraw = withdraw;
  },
  methods: {
    getHMS: getHMS,
    HMSToNumber: HMSToNumber,
    checkNumber: NKC.methods.checkData.checkNumber,
    checkString: NKC.methods.checkData.checkString,
    bigNumber: NKC.modules.math.bignumber,
    convertNumber: function convertNumber(withdraw, type) {
      // type: toPage, toServer
      if (type === 'toPage') {
        withdraw._min = withdraw.min / 100;
        withdraw._max = withdraw.max / 100;
        withdraw.aliPay._fee = NKC.modules.math.chain(this.bigNumber(withdraw.aliPay.fee)).multiply(100).done().toNumber();
        withdraw.weChat._fee = NKC.modules.math.chain(this.bigNumber(withdraw.weChat.fee)).multiply(100).done().toNumber();
      } else {
        withdraw.min = withdraw._min * 100;
        withdraw.max = withdraw._max * 100;
        withdraw.aliPay.fee = NKC.modules.math.chain(this.bigNumber(withdraw.aliPay._fee)).multiply(this.bigNumber(0.01)).done().toNumber();
        withdraw.weChat.fee = NKC.modules.math.chain(this.bigNumber(withdraw.weChat._fee)).multiply(this.bigNumber(0.01)).done().toNumber();
        delete withdraw.aliPay._fee;
        delete withdraw.weChat._fee;
        delete withdraw._min;
        delete withdraw._max;
      }
    },
    save: function save() {
      var _this = this;

      var recharge = JSON.parse(JSON.stringify(this.recharge));
      var withdraw = JSON.parse(JSON.stringify(this.withdraw));
      var checkNumber = this.checkNumber;
      var self = this;
      Promise.resolve().then(function () {
        checkNumber(recharge._min, {
          name: '单次最小充值金额',
          min: 0.01,
          fractionDigits: 2
        });
        checkNumber(recharge._max, {
          name: '单次最大充值金额',
          min: 0.01,
          fractionDigits: 2
        });
        if (recharge._min > recharge._max) throw "\u5355\u6B21\u5145\u503C\u91D1\u989D\u8BBE\u7F6E\u9519\u8BEF";
        checkNumber(recharge.aliPay._fee, {
          name: '支付宝充值手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(recharge.weChat._fee, {
          name: '微信支付充值手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(withdraw._min, {
          name: '单次最小提现金额',
          min: 0.01,
          fractionDigits: 2
        });
        checkNumber(withdraw._max, {
          name: '单次最大提现金额',
          min: 0.01,
          fractionDigits: 2
        });
        if (withdraw._min > withdraw._max) throw "\u5355\u6B21\u63D0\u73B0\u91D1\u989D\u8BBE\u7F6E\u9519\u8BEF";
        checkNumber(withdraw.countOneDay, {
          name: '每天最大提现次数',
          min: 0
        });
        checkNumber(withdraw.aliPay._fee, {
          name: '支付宝提现手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        checkNumber(withdraw.weChat._fee, {
          name: '微信支付提现手续费',
          min: 0,
          max: 100,
          fractionDigits: 2
        });
        withdraw.startingTime = _this.HMSToNumber(withdraw._startingTime);
        withdraw.endTime = _this.HMSToNumber(withdraw._endTime);
        delete withdraw._startingTime;
        delete withdraw._endTime;

        _this.convertNumber(withdraw, 'toServer');

        _this.convertNumber(recharge, 'toServer');

        _this.submitting = true;
        return nkcAPI('/e/settings/recharge', 'PATCH', {
          recharge: recharge,
          withdraw: withdraw
        });
      }).then(function () {
        self.submitting = false;
        sweetSuccess('保存成功');
      })["catch"](function (err) {
        self.submitting = false;
        sweetError(err);
      });
    }
  }
});

function getHMS(t) {
  return {
    hour: Math.floor(t / 3600000),
    min: Math.floor(t / 60000) % 60,
    sec: Math.floor(t / 1000) % 60
  };
}

function HMSToNumber(t) {
  return t.hour * 60 * 60 * 1000 + t.min * 60 * 1000 + t.sec * 1000;
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwYWdlcy9leHBlcmltZW50YWwvc2V0dGluZ3MvcmVjaGFyZ2UvcmVjaGFyZ2UubWpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsT0FBSixDQUFZLFdBQVosQ0FBd0IsTUFBeEIsQ0FBYjtBQUNBLElBQU0sR0FBRyxHQUFHLElBQUksR0FBSixDQUFRO0FBQ2xCLEVBQUEsRUFBRSxFQUFFLE1BRGM7QUFFbEIsRUFBQSxJQUFJLEVBQUU7QUFDSixJQUFBLFVBQVUsRUFBRSxLQURSO0FBRUosSUFBQSxRQUFRLEVBQUUsSUFGTjtBQUdKLElBQUEsUUFBUSxFQUFFO0FBSE4sR0FGWTtBQU9sQixFQUFBLE9BUGtCLHFCQU9SO0FBQUEsZ0NBQ3FCLElBQUksQ0FBQyxnQkFEMUI7QUFBQSxRQUNELFFBREMseUJBQ0QsUUFEQztBQUFBLFFBQ1MsUUFEVCx5QkFDUyxRQURULEVBRVI7O0FBQ0EsSUFBQSxRQUFRLENBQUMsYUFBVCxHQUF5QixLQUFLLE1BQUwsQ0FBWSxRQUFRLENBQUMsWUFBckIsQ0FBekI7QUFDQSxJQUFBLFFBQVEsQ0FBQyxRQUFULEdBQW9CLEtBQUssTUFBTCxDQUFZLFFBQVEsQ0FBQyxPQUFyQixDQUFwQixDQUpRLENBS1I7O0FBQ0EsU0FBSyxhQUFMLENBQW1CLFFBQW5CLEVBQTZCLFFBQTdCO0FBQ0EsU0FBSyxhQUFMLENBQW1CLFFBQW5CLEVBQTZCLFFBQTdCO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0QsR0FqQmlCO0FBa0JsQixFQUFBLE9BQU8sRUFBRTtBQUNQLElBQUEsTUFBTSxFQUFOLE1BRE87QUFFUCxJQUFBLFdBQVcsRUFBWCxXQUZPO0FBR1AsSUFBQSxXQUFXLEVBQUUsR0FBRyxDQUFDLE9BQUosQ0FBWSxTQUFaLENBQXNCLFdBSDVC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QyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsUUFBQSxZQUFZLENBQUMsTUFBRCxDQUFaO0FBQ0QsT0FoRUgsV0FpRVMsVUFBQSxHQUFHLEVBQUk7QUFDWixRQUFBLElBQUksQ0FBQyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsUUFBQSxVQUFVLENBQUMsR0FBRCxDQUFWO0FBQ0QsT0FwRUg7QUFxRUQ7QUFqR007QUFsQlMsQ0FBUixDQUFaOztBQXVIQSxTQUFTLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUI7QUFDakIsU0FBTztBQUNMLElBQUEsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxHQUFDLE9BQWIsQ0FERDtBQUVMLElBQUEsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxHQUFDLEtBQWIsSUFBc0IsRUFGdEI7QUFHTCxJQUFBLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsR0FBQyxJQUFiLElBQXFCO0FBSHJCLEdBQVA7QUFLRDs7QUFFRCxTQUFTLFdBQVQsQ0FBcUIsQ0FBckIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDLENBQUMsSUFBRixHQUFTLEVBQVQsR0FBYyxFQUFkLEdBQW1CLElBQW5CLEdBQTBCLENBQUMsQ0FBQyxHQUFGLEdBQVEsRUFBUixHQUFhLElBQXZDLEdBQThDLENBQUMsQ0FBQyxHQUFGLEdBQVEsSUFBN0Q7QUFDRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IGRhdGEgPSBOS0MubWV0aG9kcy5nZXREYXRhQnlJZCgnZGF0YScpO1xyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuICBlbDogJyNhcHAnLFxyXG4gIGRhdGE6IHtcclxuICAgIHN1Ym1pdHRpbmc6IGZhbHNlLFxyXG4gICAgcmVjaGFyZ2U6IG51bGwsXHJcbiAgICB3aXRoZHJhdzogbnVsbFxyXG4gIH0sXHJcbiAgbW91bnRlZCgpIHtcclxuICAgIGNvbnN0IHtyZWNoYXJnZSwgd2l0aGRyYXd9ID0gZGF0YS5yZWNoYXJnZVNldHRpbmdzO1xyXG4gICAgLy8g5aSE55CG5o+Q546w5pe26Ze06ZmQ5Yi2XHJcbiAgICB3aXRoZHJhdy5fc3RhcnRpbmdUaW1lID0gdGhpcy5nZXRITVMod2l0aGRyYXcuc3RhcnRpbmdUaW1lKTtcclxuICAgIHdpdGhkcmF3Ll9lbmRUaW1lID0gdGhpcy5nZXRITVMod2l0aGRyYXcuZW5kVGltZSk7XHJcbiAgICAvLyDovazmjaLph5Hpop1cclxuICAgIHRoaXMuY29udmVydE51bWJlcih3aXRoZHJhdywgJ3RvUGFnZScpO1xyXG4gICAgdGhpcy5jb252ZXJ0TnVtYmVyKHJlY2hhcmdlLCAndG9QYWdlJyk7XHJcbiAgICB0aGlzLnJlY2hhcmdlID0gcmVjaGFyZ2U7XHJcbiAgICB0aGlzLndpdGhkcmF3ID0gd2l0aGRyYXc7XHJcbiAgfSxcclxuICBtZXRob2RzOiB7XHJcbiAgICBnZXRITVMsXHJcbiAgICBITVNUb051bWJlcixcclxuICAgIGNoZWNrTnVtYmVyOiBOS0MubWV0aG9kcy5jaGVja0RhdGEuY2hlY2tOdW1iZXIsXHJcbiAgICBjaGVja1N0cmluZzogTktDLm1ldGhvZHMuY2hlY2tEYXRhLmNoZWNrU3RyaW5nLFxyXG4gICAgYmlnTnVtYmVyOiBOS0MubW9kdWxlcy5tYXRoLmJpZ251bWJlcixcclxuICAgIGNvbnZlcnROdW1iZXIod2l0aGRyYXcsIHR5cGUpIHsgLy8gdHlwZTogdG9QYWdlLCB0b1NlcnZlclxyXG4gICAgICBpZih0eXBlID09PSAndG9QYWdlJykge1xyXG4gICAgICAgIHdpdGhkcmF3Ll9taW4gPSB3aXRoZHJhdy5taW4gLyAxMDA7XHJcbiAgICAgICAgd2l0aGRyYXcuX21heCA9IHdpdGhkcmF3Lm1heCAvIDEwMDtcclxuICAgICAgICB3aXRoZHJhdy5hbGlQYXkuX2ZlZSA9IE5LQy5tb2R1bGVzLm1hdGguY2hhaW4odGhpcy5iaWdOdW1iZXIod2l0aGRyYXcuYWxpUGF5LmZlZSkpLm11bHRpcGx5KDEwMCkuZG9uZSgpLnRvTnVtYmVyKCk7XHJcbiAgICAgICAgd2l0aGRyYXcud2VDaGF0Ll9mZWUgPSBOS0MubW9kdWxlcy5tYXRoLmNoYWluKHRoaXMuYmlnTnVtYmVyKHdpdGhkcmF3LndlQ2hhdC5mZWUpKS5tdWx0aXBseSgxMDApLmRvbmUoKS50b051bWJlcigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpdGhkcmF3Lm1pbiA9IHdpdGhkcmF3Ll9taW4gKiAxMDA7XHJcbiAgICAgICAgd2l0aGRyYXcubWF4ID0gd2l0aGRyYXcuX21heCAqIDEwMDtcclxuICAgICAgICB3aXRoZHJhdy5hbGlQYXkuZmVlID0gTktDLm1vZHVsZXMubWF0aC5jaGFpbih0aGlzLmJpZ051bWJlcih3aXRoZHJhdy5hbGlQYXkuX2ZlZSkpLm11bHRpcGx5KHRoaXMuYmlnTnVtYmVyKDAuMDEpKS5kb25lKCkudG9OdW1iZXIoKTtcclxuICAgICAgICB3aXRoZHJhdy53ZUNoYXQuZmVlID0gTktDLm1vZHVsZXMubWF0aC5jaGFpbih0aGlzLmJpZ051bWJlcih3aXRoZHJhdy53ZUNoYXQuX2ZlZSkpLm11bHRpcGx5KHRoaXMuYmlnTnVtYmVyKDAuMDEpKS5kb25lKCkudG9OdW1iZXIoKTtcclxuICAgICAgICBkZWxldGUgd2l0aGRyYXcuYWxpUGF5Ll9mZWU7XHJcbiAgICAgICAgZGVsZXRlIHdpdGhkcmF3LndlQ2hhdC5fZmVlO1xyXG4gICAgICAgIGRlbGV0ZSB3aXRoZHJhdy5fbWluO1xyXG4gICAgICAgIGRlbGV0ZSB3aXRoZHJhdy5fbWF4O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgY29uc3QgcmVjaGFyZ2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucmVjaGFyZ2UpKTtcclxuICAgICAgY29uc3Qgd2l0aGRyYXcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMud2l0aGRyYXcpKTtcclxuICAgICAgY29uc3Qge2NoZWNrTnVtYmVyfSA9IHRoaXM7XHJcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIGNoZWNrTnVtYmVyKHJlY2hhcmdlLl9taW4sIHtcclxuICAgICAgICAgICAgbmFtZTogJ+WNleasoeacgOWwj+WFheWAvOmHkeminScsXHJcbiAgICAgICAgICAgIG1pbjogMC4wMSxcclxuICAgICAgICAgICAgZnJhY3Rpb25EaWdpdHM6IDIsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNoZWNrTnVtYmVyKHJlY2hhcmdlLl9tYXgsIHtcclxuICAgICAgICAgICAgbmFtZTogJ+WNleasoeacgOWkp+WFheWAvOmHkeminScsXHJcbiAgICAgICAgICAgIG1pbjogMC4wMSxcclxuICAgICAgICAgICAgZnJhY3Rpb25EaWdpdHM6IDJcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgaWYocmVjaGFyZ2UuX21pbiA+IHJlY2hhcmdlLl9tYXgpIHRocm93IGDljZXmrKHlhYXlgLzph5Hpop3orr7nva7plJnor69gO1xyXG4gICAgICAgICAgY2hlY2tOdW1iZXIocmVjaGFyZ2UuYWxpUGF5Ll9mZWUsIHtcclxuICAgICAgICAgICAgbmFtZTogJ+aUr+S7mOWuneWFheWAvOaJi+e7rei0uScsXHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgbWF4OiAxMDAsXHJcbiAgICAgICAgICAgIGZyYWN0aW9uRGlnaXRzOiAyXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNoZWNrTnVtYmVyKHJlY2hhcmdlLndlQ2hhdC5fZmVlLCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICflvq7kv6HmlK/ku5jlhYXlgLzmiYvnu63otLknLFxyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICBmcmFjdGlvbkRpZ2l0czogMlxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjaGVja051bWJlcih3aXRoZHJhdy5fbWluLCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICfljZXmrKHmnIDlsI/mj5DnjrDph5Hpop0nLFxyXG4gICAgICAgICAgICBtaW46IDAuMDEsXHJcbiAgICAgICAgICAgIGZyYWN0aW9uRGlnaXRzOiAyLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjaGVja051bWJlcih3aXRoZHJhdy5fbWF4LCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICfljZXmrKHmnIDlpKfmj5DnjrDph5Hpop0nLFxyXG4gICAgICAgICAgICBtaW46IDAuMDEsXHJcbiAgICAgICAgICAgIGZyYWN0aW9uRGlnaXRzOiAyXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmKHdpdGhkcmF3Ll9taW4gPiB3aXRoZHJhdy5fbWF4KSB0aHJvdyBg5Y2V5qyh5o+Q546w6YeR6aKd6K6+572u6ZSZ6K+vYDtcclxuICAgICAgICAgIGNoZWNrTnVtYmVyKHdpdGhkcmF3LmNvdW50T25lRGF5LCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICfmr4/lpKnmnIDlpKfmj5DnjrDmrKHmlbAnLFxyXG4gICAgICAgICAgICBtaW46IDBcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgY2hlY2tOdW1iZXIod2l0aGRyYXcuYWxpUGF5Ll9mZWUsIHtcclxuICAgICAgICAgICAgbmFtZTogJ+aUr+S7mOWuneaPkOeOsOaJi+e7rei0uScsXHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgbWF4OiAxMDAsXHJcbiAgICAgICAgICAgIGZyYWN0aW9uRGlnaXRzOiAyXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNoZWNrTnVtYmVyKHdpdGhkcmF3LndlQ2hhdC5fZmVlLCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICflvq7kv6HmlK/ku5jmj5DnjrDmiYvnu63otLknLFxyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICBmcmFjdGlvbkRpZ2l0czogMlxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICB3aXRoZHJhdy5zdGFydGluZ1RpbWUgPSB0aGlzLkhNU1RvTnVtYmVyKHdpdGhkcmF3Ll9zdGFydGluZ1RpbWUpO1xyXG4gICAgICAgICAgd2l0aGRyYXcuZW5kVGltZSA9IHRoaXMuSE1TVG9OdW1iZXIod2l0aGRyYXcuX2VuZFRpbWUpO1xyXG4gICAgICAgICAgZGVsZXRlIHdpdGhkcmF3Ll9zdGFydGluZ1RpbWU7XHJcbiAgICAgICAgICBkZWxldGUgd2l0aGRyYXcuX2VuZFRpbWU7XHJcbiAgICAgICAgICB0aGlzLmNvbnZlcnROdW1iZXIod2l0aGRyYXcsICd0b1NlcnZlcicpO1xyXG4gICAgICAgICAgdGhpcy5jb252ZXJ0TnVtYmVyKHJlY2hhcmdlLCAndG9TZXJ2ZXInKTtcclxuICAgICAgICAgIHRoaXMuc3VibWl0dGluZyA9IHRydWU7XHJcbiAgICAgICAgICByZXR1cm4gbmtjQVBJKCcvZS9zZXR0aW5ncy9yZWNoYXJnZScsICdQQVRDSCcsIHtyZWNoYXJnZSwgd2l0aGRyYXd9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgc2VsZi5zdWJtaXR0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICBzd2VldFN1Y2Nlc3MoJ+S/neWtmOaIkOWKnycpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBzZWxmLnN1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgIHN3ZWV0RXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gZ2V0SE1TKHQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgaG91cjogTWF0aC5mbG9vcih0LzM2MDAwMDApLFxyXG4gICAgbWluOiBNYXRoLmZsb29yKHQvNjAwMDApICUgNjAsXHJcbiAgICBzZWM6IE1hdGguZmxvb3IodC8xMDAwKSAlIDYwXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBITVNUb051bWJlcih0KSB7XHJcbiAgcmV0dXJuIHQuaG91ciAqIDYwICogNjAgKiAxMDAwICsgdC5taW4gKiA2MCAqIDEwMDAgKyB0LnNlYyAqIDEwMDA7XHJcbn1cclxuIl19
