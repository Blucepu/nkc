(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById('data');
var usersObj = {};
data.users.map(function (u) {
  u.showDetail = false;
  usersObj[u.uid] = u;
});
var app = new Vue({
  el: '#app',
  data: {
    t: data.t,
    searchType: data.searchType || 'username',
    searchContent: data.searchContent || '',
    users: data.users,
    usersObj: usersObj,
    roles: data.roles,
    selectedUsersId: []
  },
  computed: {
    selectedUsers: function selectedUsers() {
      var usersObj = this.usersObj;
      return this.selectedUsersId.map(function (uid) {
        return usersObj[uid];
      });
    },
    isChecked: function isChecked() {
      return this.selectedUsersId.length === this.users.length;
    }
  },
  methods: {
    format: NKC.methods.format,
    getUrl: NKC.methods.tools.getUrl,
    getIpUrl: NKC.methods.tools.getIpUrl,
    search: function search() {
      var t = this.t,
          searchType = this.searchType,
          searchContent = this.searchContent;
      if (!searchContent) sweetError('请输入搜索内容');
      window.location.href = "/e/settings/user?t=".concat(t, "&c=").concat(searchType, ",").concat(searchContent);
    },
    switchDetail: function switchDetail(u) {
      u.showDetail = !u.showDetail;
    },
    editUser: function editUser(u) {
      if (!window.ModifyAccountInfo) {
        window.ModifyAccountInfo = new NKC.modules.ModifyAccountInfo();
      }

      window.ModifyAccountInfo.open({
        uid: u.uid
      });
    },
    toDisableUser: function toDisableUser(postType, type, disable, user) {
      var usersId;

      if (type === 'all') {
        usersId = [].concat(this.selectedUsersId);
      } else {
        usersId = [user.uid];
      }

      return Promise.resolve().then(function () {
        if (!usersId.length) throw '未选择用户';
        return nkcAPI("/e/settings/user", 'PUT', {
          type: postType,
          usersId: usersId,
          disable: !!disable
        });
      }).then(function () {
        sweetSuccess('执行成功');
      })["catch"](function (err) {
        console.log(err);
        sweetError(err);
      });
    },
    disableUsers: function disableUsers(type, disable, user) {
      this.toDisableUser('disable', type, disable, user);
    },
    hiddenUsersHome: function hiddenUsersHome(type, disable, user) {
      this.toDisableUser('hidden', type, disable, user);
    },
    selectAllUsers: function selectAllUsers() {
      var users = this.users,
          isChecked = this.isChecked;

      if (!isChecked) {
        this.selectedUsersId = users.map(function (u) {
          return u.uid;
        });
      } else {
        this.selectedUsersId = [];
      }
    }
  },
  mounted: function mounted() {
    setTimeout(function () {
      floatUserPanel.initPanel();
    }, 500);
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
