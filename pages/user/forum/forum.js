(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById("data");
var stepCheckerMap = new Map([["protocol", // 开办指南
function (_ref) {
  var protocol = _ref.protocol;
  return protocol.haveReadProtocol ? {
    passed: true
  } : {
    passed: false,
    message: "请先仔细阅读开办指南"
  };
}], ["enter_info", // 录入信息
function (_ref2) {
  var enterInfo = _ref2.enterInfo;
  return enterInfo.newForumName && enterInfo.reason && enterInfo.youWantToDo ? {
    passed: true
  } : {
    passed: false,
    message: "请先完整填写"
  };
}], ["send_invite", // 发送邀请
function (vm) {
  var sendInvite = vm.sendInvite;

  if (sendInvite.userId.length < 2) {
    return {
      passed: false,
      message: "至少选择2个人"
    };
  } else {
    vm.commitData();
    return {
      passed: true
    };
  }
}], ["sucess_section", // 提交成功提示
function (vm) {}]]);
var stepNames = Array.from(stepCheckerMap.keys());
new Vue({
  el: "#app",
  data: {
    step: 0,
    protocol: {
      haveReadProtocol: false
    },
    enterInfo: {
      newForumName: "",
      reason: "",
      youWantToDo: ""
    },
    sendInvite: {
      userId: [],
      users: []
    },
    process: true,
    myPForums: data.myPForums,
    reviewNewForumGuide: data.reviewNewForumGuide
  },
  computed: {
    stepName: function stepName() {
      return stepNames[this.step] || stepNames[0];
    }
  },
  methods: {
    toStep: function toStep(index) {
      var checker = this.checker,
          stepName = this.stepName;

      var _checker = checker(stepName),
          passed = _checker.passed,
          message = _checker.message;

      return passed ? this.step = index : sweetError(message);
    },
    checker: function checker(stepName) {
      var vm = this;

      if (stepCheckerMap.has(stepName)) {
        var stepChecker = stepCheckerMap.get(stepName);
        return typeof stepChecker === "function" ? stepChecker(vm) : {};
      }

      return {};
    },
    selectUsers: function selectUsers() {
      var self = this;
      selectUserModule.open(function (_ref3) {
        var usersId = _ref3.usersId;
        usersId.map(function (uid) {
          if (self.sendInvite.userId.indexOf(uid) >= 0) return;
          nkcAPI("/u/" + uid, "GET").then(function (data) {
            var user = data.targetUser;
            var uid = user.uid;
            var username = user.username || "未知";
            var avatarUrl;

            if (user.avatar) {
              avatarUrl = "/a/".concat(user.avatar, "?c=userAvatar&t=sm");
            } else {}

            avatarUrl = "/a/default?c=userAvatar&t=sm";
            self.sendInvite.users.push({
              username: username,
              avatarUrl: avatarUrl,
              uid: uid
            });
            self.sendInvite.userId.push(uid);
          })["catch"](sweetError);
        });
      }, {
        userCount: 99
      });
    },
    deleteFounder: function deleteFounder(index) {
      this.sendInvite.users.splice(index, 1);
      this.sendInvite.userId.splice(index, 1);
    },
    commitData: function commitData() {
      var enterInfo = this.enterInfo,
          sendInvite = this.sendInvite;
      var self = this;
      return nkcAPI("/u/".concat(NKC.configs.uid, "/forum"), "POST", {
        info: enterInfo,
        invites: sendInvite.userId
      }).then(function () {
        console.log("提交成功");
        self.process = false;
      })["catch"](function (data) {
        self.step = 1;
        sweetError(data);
      });
    }
  }
}); // 选择用户组件

var selectUserModule = new NKC.modules.SelectUser();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
