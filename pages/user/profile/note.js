(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById("subUsersId");
var noteApp = new Vue({
  el: "#note",
  data: {
    uid: NKC.configs.uid,
    threads: data.threads,
    timeout: null
  },
  mounted: function mounted() {
    if (window.floatUserPanel) {
      window.floatUserPanel.initPanel();
    }
  },
  methods: {
    getUrl: NKC.methods.tools.getUrl,
    visitUrl: NKC.methods.visitUrl,
    fromNow: NKC.methods.fromNow,
    modifyNote: function modifyNote(nc) {
      nc.edit = !nc.edit;

      if (nc.edit) {
        setTimeout(function () {
          noteApp.textareaAutoResize(nc);
        }, 50);
      }
    },
    saveNewNote: function saveNewNote(note) {
      var _id = note._id,
          newContent = note.newContent,
          targetId = note.targetId,
          type = note.type;
      Promise.resolve().then(function () {
        if (!newContent) throw "请输入笔记内容";
        return nkcAPI("/note", "POST", {
          _id: _id,
          type: type,
          targetId: targetId,
          content: newContent
        });
      }).then(function (data) {
        note.notes.push(data.noteContent);
        note.newContent = "";
        noteApp.addNote(note);
        noteApp.textareaAutoResize(note, "note");
      })["catch"](sweetError);
    },
    addNote: function addNote(note) {
      note.edit = !note.edit;
    },
    deleteNote: function deleteNote(note, nc) {
      sweetQuestion("确定要执行删除操作？").then(function () {
        var noteId = nc.noteId,
            _id = nc._id;
        return nkcAPI("/note/".concat(noteId, "/c/").concat(_id), "DELETE");
      }).then(function () {
        var index = note.notes.indexOf(nc);
        if (index !== -1) note.notes.splice(index, 1);
      })["catch"](sweetError);
    },
    saveContent: function saveContent(nc) {
      var content = nc.content,
          noteId = nc.noteId,
          _id = nc._id;
      nkcAPI("/note/".concat(noteId, "/c/").concat(_id), "PUT", {
        content: content
      }).then(function (data) {
        nc.html = data.noteContentHTML;
        noteApp.resetTextarea(nc);
      })["catch"](sweetError);
    },
    getTextarea: function getTextarea(nc) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      return this.$refs[t + nc._id][0];
    },
    resetTextarea: function resetTextarea(nc, t) {
      nc.edit = false;
      this.textareaAutoResize(nc, t);
    },
    textareaAutoResize: function textareaAutoResize(nc, t) {
      var textArea = this.getTextarea(nc, t);
      var num = 4 * 12;

      if (num < textArea.scrollHeight) {
        textArea.style.height = textArea.scrollHeight + 'px';
      } else {
        textArea.style.height = '4rem';
      }
      /*clearTimeout(this.timeout);
      this.timeout = setTimeout(() => {
        const textArea = this.getTextarea(nc, t);
        const num = 4 * 12;
        if(num < textArea.scrollHeight) {
          textArea.style.height = textArea.scrollHeight + 'px';
        } else {
          textArea.style.height = '4rem';
        }
      }, 100);*/

    }
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
