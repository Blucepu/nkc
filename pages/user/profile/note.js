(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById("subUsersId");
var noteApp = new Vue({
  el: "#note",
  data: {
    threads: data.threads
  },
  methods: {
    getUrl: NKC.methods.tools.getUrl,
    fromNow: NKC.methods.fromNow,
    modifyNote: function modifyNote(nc) {
      nc.edit = !nc.edit;

      if (nc.edit) {
        setTimeout(function () {
          noteApp.textareaAutoResize(nc);
        }, 50);
      }
    },
    saveNewNote: function saveNewNote(note) {
      var _id = note._id,
          newContent = note.newContent,
          targetId = note.targetId,
          type = note.type;
      Promise.resolve().then(function () {
        if (!newContent) throw "请输入笔记内容";
        return nkcAPI("/note", "POST", {
          _id: _id,
          type: type,
          targetId: targetId,
          content: newContent
        });
      }).then(function (data) {
        note.notes.push(data.noteContent);
        note.newContent = "";
        noteApp.addNote(note);
        noteApp.textareaAutoResize(note, "note");
      })["catch"](sweetError);
    },
    addNote: function addNote(note) {
      note.edit = !note.edit;
    },
    deleteNote: function deleteNote(note, nc) {
      sweetQuestion("确定要执行删除操作？").then(function () {
        var noteId = nc.noteId,
            _id = nc._id;
        return nkcAPI("/note/".concat(noteId, "/c/").concat(_id), "DELETE");
      }).then(function () {
        var index = note.notes.indexOf(nc);
        if (index !== -1) note.notes.splice(index, 1);
      })["catch"](sweetError);
    },
    saveContent: function saveContent(nc) {
      var content = nc.content,
          noteId = nc.noteId,
          _id = nc._id;
      nkcAPI("/note/".concat(noteId, "/c/").concat(_id), "PATCH", {
        content: content
      }).then(function (data) {
        nc.html = data.noteContentHTML;
        noteApp.resetTextarea(nc);
      })["catch"](sweetError);
    },
    getTextarea: function getTextarea(nc) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      return this.$refs[t + nc._id][0];
    },
    resetTextarea: function resetTextarea(nc, t) {
      nc.edit = false;
      this.textareaAutoResize(nc, t);
    },
    textareaAutoResize: function textareaAutoResize(nc, t) {
      var textArea = this.getTextarea(nc, t);
      var num = 4 * 12;
      textArea.style.height = '4rem';

      if (num < textArea.scrollHeight) {
        textArea.style.height = textArea.scrollHeight + 'px';
      }
    }
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9fYnJvd3Nlci1wYWNrQDYuMS4wQGJyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInBhZ2VzL3VzZXIvcHJvZmlsZS9ub3RlLm1qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQUosQ0FBWSxXQUFaLENBQXdCLFlBQXhCLENBQWI7QUFDQSxJQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUosQ0FBUTtBQUN0QixFQUFBLEVBQUUsRUFBRSxPQURrQjtBQUV0QixFQUFBLElBQUksRUFBRTtBQUNKLElBQUEsT0FBTyxFQUFFLElBQUksQ0FBQztBQURWLEdBRmdCO0FBS3RCLEVBQUEsT0FBTyxFQUFFO0FBQ1AsSUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQUosQ0FBWSxLQUFaLENBQWtCLE1BRG5CO0FBRVAsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQUosQ0FBWSxPQUZkO0FBR1AsSUFBQSxVQUhPLHNCQUdJLEVBSEosRUFHUTtBQUNiLE1BQUEsRUFBRSxDQUFDLElBQUgsR0FBVSxDQUFDLEVBQUUsQ0FBQyxJQUFkOztBQUNBLFVBQUcsRUFBRSxDQUFDLElBQU4sRUFBWTtBQUNWLFFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZixVQUFBLE9BQU8sQ0FBQyxrQkFBUixDQUEyQixFQUEzQjtBQUNELFNBRlMsRUFFUCxFQUZPLENBQVY7QUFHRDtBQUNGLEtBVk07QUFXUCxJQUFBLFdBWE8sdUJBV0ssSUFYTCxFQVdXO0FBQUEsVUFDVCxHQURTLEdBQzBCLElBRDFCLENBQ1QsR0FEUztBQUFBLFVBQ0osVUFESSxHQUMwQixJQUQxQixDQUNKLFVBREk7QUFBQSxVQUNRLFFBRFIsR0FDMEIsSUFEMUIsQ0FDUSxRQURSO0FBQUEsVUFDa0IsSUFEbEIsR0FDMEIsSUFEMUIsQ0FDa0IsSUFEbEI7QUFFaEIsTUFBQSxPQUFPLENBQUMsT0FBUixHQUNHLElBREgsQ0FDUSxZQUFNO0FB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QUFRLENBQUMsS0FBVCxDQUFlLE1BQWYsR0FBd0IsTUFBeEI7O0FBQ0EsVUFBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLFlBQWxCLEVBQWdDO0FBQzlCLFFBQUEsUUFBUSxDQUFDLEtBQVQsQ0FBZSxNQUFmLEdBQXdCLFFBQVEsQ0FBQyxZQUFULEdBQXdCLElBQWhEO0FBQ0Q7QUFDRjtBQXZFTTtBQUxhLENBQVIsQ0FBaEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJjb25zdCBkYXRhID0gTktDLm1ldGhvZHMuZ2V0RGF0YUJ5SWQoXCJzdWJVc2Vyc0lkXCIpO1xyXG5jb25zdCBub3RlQXBwID0gbmV3IFZ1ZSh7XHJcbiAgZWw6IFwiI25vdGVcIixcclxuICBkYXRhOiB7XHJcbiAgICB0aHJlYWRzOiBkYXRhLnRocmVhZHNcclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGdldFVybDogTktDLm1ldGhvZHMudG9vbHMuZ2V0VXJsLFxyXG4gICAgZnJvbU5vdzogTktDLm1ldGhvZHMuZnJvbU5vdyxcclxuICAgIG1vZGlmeU5vdGUobmMpIHtcclxuICAgICAgbmMuZWRpdCA9ICFuYy5lZGl0O1xyXG4gICAgICBpZihuYy5lZGl0KSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBub3RlQXBwLnRleHRhcmVhQXV0b1Jlc2l6ZShuYyk7XHJcbiAgICAgICAgfSwgNTApXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzYXZlTmV3Tm90ZShub3RlKSB7XHJcbiAgICAgIGNvbnN0IHtfaWQsIG5ld0NvbnRlbnQsIHRhcmdldElkLCB0eXBlfSA9IG5vdGU7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgaWYoIW5ld0NvbnRlbnQpIHRocm93IFwi6K+36L6T5YWl56yU6K6w5YaF5a65XCI7XHJcbiAgICAgICAgICByZXR1cm4gbmtjQVBJKFwiL25vdGVcIiwgXCJQT1NUXCIsIHtcclxuICAgICAgICAgICAgX2lkLFxyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICB0YXJnZXRJZCxcclxuICAgICAgICAgICAgY29udGVudDogbmV3Q29udGVudFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgIG5vdGUubm90ZXMucHVzaChkYXRhLm5vdGVDb250ZW50KTtcclxuICAgICAgICAgIG5vdGUubmV3Q29udGVudCA9IFwiXCI7XHJcbiAgICAgICAgICBub3RlQXBwLmFkZE5vdGUobm90ZSk7XHJcbiAgICAgICAgICBub3RlQXBwLnRleHRhcmVhQXV0b1Jlc2l6ZShub3RlLCBcIm5vdGVcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goc3dlZXRFcnJvcik7XHJcbiAgICB9LFxyXG4gICAgYWRkTm90ZShub3RlKSB7XHJcbiAgICAgIG5vdGUuZWRpdCA9ICFub3RlLmVkaXQ7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlTm90ZShub3RlLCBuYykge1xyXG4gICAgICBzd2VldFF1ZXN0aW9uKFwi56Gu5a6a6KaB5omn6KGM5Yig6Zmk5pON5L2c77yfXCIpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qge25vdGVJZCwgX2lkfSA9IG5jO1xyXG4gICAgICAgICAgcmV0dXJuIG5rY0FQSShgL25vdGUvJHtub3RlSWR9L2MvJHtfaWR9YCwgXCJERUxFVEVcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpbmRleCA9IG5vdGUubm90ZXMuaW5kZXhPZihuYyk7XHJcbiAgICAgICAgICBpZihpbmRleCAhPT0gLTEpIG5vdGUubm90ZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChzd2VldEVycm9yKTtcclxuICAgIH0sXHJcbiAgICBzYXZlQ29udGVudChuYykge1xyXG4gICAgICBjb25zdCB7Y29udGVudCwgbm90ZUlkLCBfaWR9ID0gbmM7XHJcbiAgICAgIG5rY0FQSShgL25vdGUvJHtub3RlSWR9L2MvJHtfaWR9YCwgXCJQQVRDSFwiLCB7XHJcbiAgICAgICAgY29udGVudFxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgbmMuaHRtbCA9IGRhdGEubm90ZUNvbnRlbnRIVE1MO1xyXG4gICAgICAgICAgbm90ZUFwcC5yZXNldFRleHRhcmVhKG5jKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChzd2VldEVycm9yKTtcclxuICAgIH0sXHJcbiAgICBnZXRUZXh0YXJlYShuYywgdCA9IFwiXCIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbdCtuYy5faWRdWzBdO1xyXG4gICAgfSxcclxuICAgIHJlc2V0VGV4dGFyZWEobmMsIHQpIHtcclxuICAgICAgbmMuZWRpdCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnRleHRhcmVhQXV0b1Jlc2l6ZShuYywgdCk7XHJcbiAgICB9LFxyXG4gICAgdGV4dGFyZWFBdXRvUmVzaXplKG5jLCB0KSB7XHJcbiAgICAgIGNvbnN0IHRleHRBcmVhID0gdGhpcy5nZXRUZXh0YXJlYShuYywgdCk7XHJcbiAgICAgIGNvbnN0IG51bSA9IDQgKiAxMjtcclxuICAgICAgdGV4dEFyZWEuc3R5bGUuaGVpZ2h0ID0gJzRyZW0nO1xyXG4gICAgICBpZihudW0gPCB0ZXh0QXJlYS5zY3JvbGxIZWlnaHQpIHtcclxuICAgICAgICB0ZXh0QXJlYS5zdHlsZS5oZWlnaHQgPSB0ZXh0QXJlYS5zY3JvbGxIZWlnaHQgKyAncHgnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59KTsiXX0=
