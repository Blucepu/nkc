(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById('data');
var usersObj = {};
data.users.map(function (ug) {
  ug.data.map(function (u) {
    return usersObj[u.uid] = u;
  });
});
var app = new Vue({
  el: '#app',
  data: {
    edit: !data.category,
    category: data.category || {
      name: '',
      description: '',
      friendsId: []
    },
    users: data.users,
    usersObj: usersObj
  },
  computed: {
    selectedUsers: function selectedUsers() {
      var arr = [];
      var self = this;
      this.category.friendsId.map(function (uid) {
        var u = self.usersObj[uid];
        if (u) arr.push(u);
      });
      return arr;
    },
    selectedUsersId: function selectedUsersId() {
      var selectedUsers = this.selectedUsers;
      return selectedUsers.map(function (u) {
        return u.uid;
      });
    }
  },
  methods: {
    getUrl: NKC.methods.tools.getUrl,
    selectUser: function selectUser(u) {
      var friendsId = this.category.friendsId;
      var index = friendsId.indexOf(u.uid);

      if (index === -1) {
        friendsId.push(u.uid); // Vue.set(friendsId, friendsId.length, u.uid)
      } else {
        this.unSelectUser(u);
      }
    },
    unSelectUser: function unSelectUser(u) {
      var friendsId = this.category.friendsId;
      var index = friendsId.indexOf(u.uid);

      if (index !== -1) {
        friendsId.splice(index, 1);
      }
    },
    save: function save() {
      var self = this;
      var _self$category = self.category,
          _id = _self$category._id,
          name = _self$category.name,
          description = _self$category.description;
      var method, url;

      if (_id) {
        method = 'PATCH';
        url = "/friend_category/".concat(_id);
      } else {
        method = 'POST';
        url = "/friend_category";
      }

      return nkcAPI(url, method, {
        name: name,
        description: description,
        friendsId: self.selectedUsersId
      }).then(function (data) {
        self.edit = false;
        NKC.methods.appToast('保存成功');

        if (!_id) {
          NKC.methods.visitUrl("/message/category?cid=".concat(data.category._id));
        }
      })["catch"](NKC.methods.appToast);
    },
    visitUserHome: function visitUserHome(u) {
      NKC.methods.visitUrl(NKC.methods.tools.getUrl('messageUserDetail', u.uid), true);
    },
    toEdit: function toEdit() {
      this.edit = true;
    },
    remove: function remove() {
      var self = this;
      sweetQuestion("\u5220\u9664\u5206\u7EC4\u300C".concat(this.category.name, "\u300D\uFF1F")).then(function () {
        return nkcAPI("/friend_category/".concat(self.category._id), 'DELETE').then(function () {
          NKC.methods.appToast('删除成功');
          NKC.methods.appClosePage();
        })["catch"](NKC.methods.appToast);
      });
    }
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
