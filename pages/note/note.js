(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var data = NKC.methods.getDataById("data");
data.note.notes.map(function (note) {
  note.edit = false;
  note.options = false;
});
var app = new Vue({
  el: "#note",
  data: {
    uid: NKC.configs.uid,
    note: data.note,
    submitting: false,
    content: ""
  },
  mounted: function mounted() {
    document.body.addEventListener("click", function (e) {
      if (e.target.classList.contains("note-options-icon")) return;
      app.note.notes.map(function (note) {
        return note.options = false;
      });
    });
  },
  methods: {
    visitUrl: NKC.methods.visitUrl,
    getUrl: NKC.methods.tools.getUrl,
    fromNow: NKC.methods.fromNow,
    openOptions: function openOptions(nc) {
      app.note.notes.map(function (note) {
        return note.options = false;
      });
      nc.options = !nc.options;
    },
    resetTextarea: function resetTextarea(nc) {
      var textArea;

      if (!nc) {
        textArea = this.$refs.newNote;
      } else {
        textArea = this.$refs[nc._id][0];
      }

      if (!textArea) return;
      var rem = 5;
      var num = rem * 12;
      textArea.style.height = rem + 'rem';

      if (num < textArea.scrollHeight) {
        textArea.style.height = textArea.scrollHeight + 'px';
      }
    },
    saveNewNote: function saveNewNote() {
      // 创建新的
      var content = this.content,
          note = this.note;
      Promise.resolve().then(function () {
        if (!content) throw "请输入笔记内容";
        var type = note.type,
            targetId = note.targetId,
            _id = note._id,
            node = note.node;
        app.submitting = true;
        return nkcAPI("/note", "POST", {
          _id: _id,
          type: type,
          targetId: targetId,
          node: node,
          content: content
        });
      }).then(function (data) {
        app.content = "";
        /*if(!app.note._id) {
          window.location.href = `/note/${data.note._id}`;
        }*/

        data.note.notes.map(function (note) {
          note.options = false;
          note.edit = false;
        });
        app.note = data.note;
        app.submitting = false;
        setTimeout(function () {
          app.resetTextarea();
        }, 50);
      })["catch"](function (err) {
        app.submitting = false;
        sweetError(err);
      });
    },
    saveNote: function saveNote(n) {
      // 保存编辑
      var note = this.note,
          uid = this.uid;
      var url,
          method,
          data = {};

      if (n.uid === uid) {
        url = "/note/".concat(note._id, "/c/").concat(n._id);
        method = "PUT";
        data.content = n.content;
      } else {
        url = "/nkc/note";
        method = "POST";
        data.type = "modify";
        data.noteId = note._id;
        data.noteContentId = n._id;
        data.content = n.content;
      }

      nkcAPI(url, method, data).then(function (data) {
        n.html = data.noteContentHTML;
        app.modifyNoteContent(n);
        Vue.set(note.notes, note.notes.indexOf(n), n);
      })["catch"](sweetError);
    },
    modifyNoteContent: function modifyNoteContent(nc) {
      nc.edit = !nc.edit;

      if (nc.edit) {
        setTimeout(function () {
          app.resetTextarea(nc);
        }, 50);
      }
    },
    deleteNoteContent: function deleteNoteContent(n, type) {
      var note = this.note;
      var url,
          method,
          data = {};

      if (type === "delete") {
        url = "/note/".concat(note._id, "/c/").concat(n._id);
        method = "DELETE";
      } else {
        method = "POST";
        url = "/nkc/note";

        if (n.disabled) {
          data.type = "cancelDisable";
        } else {
          data.type = "disable";
        }

        data.noteId = note._id;
        data.noteContentId = n._id;
      }

      sweetQuestion("确定要执行此操作？").then(function () {
        return nkcAPI(url, method, data);
      }).then(function () {
        if (type === "delete") {
          n.deleted = true;
        } else {
          n.disabled = !n.disabled;
        }

        sweetSuccess("操作成功");
      })["catch"](sweetError);
    }
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
