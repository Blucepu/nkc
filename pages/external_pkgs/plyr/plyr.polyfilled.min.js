(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

"object" == (typeof navigator === "undefined" ? "undefined" : _typeof2(navigator)) && function () {
  if ("undefined" != typeof window) try {
    var e = new window.CustomEvent("test", {
      cancelable: !0
    });
    if (e.preventDefault(), !0 !== e.defaultPrevented) throw new Error("Could not prevent default");
  } catch (e) {
    var t = function t(e, _t) {
      var n, r;
      return (_t = _t || {}).bubbles = !!_t.bubbles, _t.cancelable = !!_t.cancelable, (n = document.createEvent("CustomEvent")).initCustomEvent(e, _t.bubbles, _t.cancelable, _t.detail), r = n.preventDefault, n.preventDefault = function () {
        r.call(this);

        try {
          Object.defineProperty(this, "defaultPrevented", {
            get: function get() {
              return !0;
            }
          });
        } catch (e) {
          this.defaultPrevented = !0;
        }
      }, n;
    };

    t.prototype = window.Event.prototype, window.CustomEvent = t;
  }
}();
var commonjsGlobal = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

function createCommonjsModule(e, t) {
  return e(t = {
    exports: {}
  }, t.exports), t.exports;
}

var set,
    get,
    has$1,
    O = "object",
    check = function check(e) {
  return e && e.Math == Math && e;
},
    global_1 = check((typeof globalThis === "undefined" ? "undefined" : _typeof2(globalThis)) == O && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof2(window)) == O && window) || check((typeof self === "undefined" ? "undefined" : _typeof2(self)) == O && self) || check(_typeof2(commonjsGlobal) == O && commonjsGlobal) || Function("return this")(),
    fails = function fails(e) {
  try {
    return !!e();
  } catch (e) {
    return !0;
  }
},
    descriptors = !fails(function () {
  return 7 != Object.defineProperty({}, "a", {
    get: function get() {
      return 7;
    }
  }).a;
}),
    nativePropertyIsEnumerable = {}.propertyIsEnumerable,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
  1: 2
}, 1),
    f = NASHORN_BUG ? function (e) {
  var t = getOwnPropertyDescriptor(this, e);
  return !!t && t.enumerable;
} : nativePropertyIsEnumerable,
    objectPropertyIsEnumerable = {
  f: f
},
    createPropertyDescriptor = function createPropertyDescriptor(e, t) {
  return {
    enumerable: !(1 & e),
    configurable: !(2 & e),
    writable: !(4 & e),
    value: t
  };
},
    toString = {}.toString,
    classofRaw = function classofRaw(e) {
  return toString.call(e).slice(8, -1);
},
    split = "".split,
    indexedObject = fails(function () {
  return !Object("z").propertyIsEnumerable(0);
}) ? function (e) {
  return "String" == classofRaw(e) ? split.call(e, "") : Object(e);
} : Object,
    requireObjectCoercible = function requireObjectCoercible(e) {
  if (null == e) throw TypeError("Can't call method on " + e);
  return e;
},
    toIndexedObject = function toIndexedObject(e) {
  return indexedObject(requireObjectCoercible(e));
},
    isObject = function isObject(e) {
  return "object" == _typeof2(e) ? null !== e : "function" == typeof e;
},
    toPrimitive = function toPrimitive(e, t) {
  if (!isObject(e)) return e;
  var n, r;
  if (t && "function" == typeof (n = e.toString) && !isObject(r = n.call(e))) return r;
  if ("function" == typeof (n = e.valueOf) && !isObject(r = n.call(e))) return r;
  if (!t && "function" == typeof (n = e.toString) && !isObject(r = n.call(e))) return r;
  throw TypeError("Can't convert object to primitive value");
},
    hasOwnProperty = {}.hasOwnProperty,
    _has = function has(e, t) {
  return hasOwnProperty.call(e, t);
},
    document$1 = global_1.document,
    EXISTS = isObject(document$1) && isObject(document$1.createElement),
    documentCreateElement = function documentCreateElement(e) {
  return EXISTS ? document$1.createElement(e) : {};
},
    ie8DomDefine = !descriptors && !fails(function () {
  return 7 != Object.defineProperty(documentCreateElement("div"), "a", {
    get: function get() {
      return 7;
    }
  }).a;
}),
    nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function (e, t) {
  if (e = toIndexedObject(e), t = toPrimitive(t, !0), ie8DomDefine) try {
    return nativeGetOwnPropertyDescriptor(e, t);
  } catch (e) {}
  if (_has(e, t)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(e, t), e[t]);
},
    objectGetOwnPropertyDescriptor = {
  f: f$1
},
    anObject = function anObject(e) {
  if (!isObject(e)) throw TypeError(String(e) + " is not an object");
  return e;
},
    nativeDefineProperty = Object.defineProperty,
    f$2 = descriptors ? nativeDefineProperty : function (e, t, n) {
  if (anObject(e), t = toPrimitive(t, !0), anObject(n), ie8DomDefine) try {
    return nativeDefineProperty(e, t, n);
  } catch (e) {}
  if ("get" in n || "set" in n) throw TypeError("Accessors not supported");
  return "value" in n && (e[t] = n.value), e;
},
    objectDefineProperty = {
  f: f$2
},
    hide = descriptors ? function (e, t, n) {
  return objectDefineProperty.f(e, t, createPropertyDescriptor(1, n));
} : function (e, t, n) {
  return e[t] = n, e;
},
    setGlobal = function setGlobal(e, t) {
  try {
    hide(global_1, e, t);
  } catch (n) {
    global_1[e] = t;
  }

  return t;
},
    isPure = !1,
    shared = createCommonjsModule(function (e) {
  var t = global_1["__core-js_shared__"] || setGlobal("__core-js_shared__", {});
  (e.exports = function (e, n) {
    return t[e] || (t[e] = void 0 !== n ? n : {});
  })("versions", []).push({
    version: "3.1.3",
    mode: "global",
    copyright: "Â© 2019 Denis Pushkarev (zloirock.ru)"
  });
}),
    functionToString = shared("native-function-to-string", Function.toString),
    WeakMap$1 = global_1.WeakMap,
    nativeWeakMap = "function" == typeof WeakMap$1 && /native code/.test(functionToString.call(WeakMap$1)),
    id = 0,
    postfix = Math.random(),
    uid = function uid(e) {
  return "Symbol(" + String(void 0 === e ? "" : e) + ")_" + (++id + postfix).toString(36);
},
    keys = shared("keys"),
    sharedKey = function sharedKey(e) {
  return keys[e] || (keys[e] = uid(e));
},
    hiddenKeys = {},
    WeakMap$2 = global_1.WeakMap,
    enforce = function enforce(e) {
  return has$1(e) ? get(e) : set(e, {});
},
    getterFor = function getterFor(e) {
  return function (t) {
    var n;
    if (!isObject(t) || (n = get(t)).type !== e) throw TypeError("Incompatible receiver, " + e + " required");
    return n;
  };
};

if (nativeWeakMap) {
  var store = new WeakMap$2(),
      wmget = store.get,
      wmhas = store.has,
      wmset = store.set;
  set = function set(e, t) {
    return wmset.call(store, e, t), t;
  }, get = function get(e) {
    return wmget.call(store, e) || {};
  }, has$1 = function has$1(e) {
    return wmhas.call(store, e);
  };
} else {
  var STATE = sharedKey("state");
  hiddenKeys[STATE] = !0, set = function set(e, t) {
    return hide(e, STATE, t), t;
  }, get = function get(e) {
    return _has(e, STATE) ? e[STATE] : {};
  }, has$1 = function has$1(e) {
    return _has(e, STATE);
  };
}

var internalState = {
  set: set,
  get: get,
  has: has$1,
  enforce: enforce,
  getterFor: getterFor
},
    redefine = createCommonjsModule(function (e) {
  var t = internalState.get,
      n = internalState.enforce,
      r = String(functionToString).split("toString");
  shared("inspectSource", function (e) {
    return functionToString.call(e);
  }), (e.exports = function (e, t, i, o) {
    var a = !!o && !!o.unsafe,
        s = !!o && !!o.enumerable,
        l = !!o && !!o.noTargetGet;
    "function" == typeof i && ("string" != typeof t || _has(i, "name") || hide(i, "name", t), n(i).source = r.join("string" == typeof t ? t : "")), e !== global_1 ? (a ? !l && e[t] && (s = !0) : delete e[t], s ? e[t] = i : hide(e, t, i)) : s ? e[t] = i : setGlobal(t, i);
  })(Function.prototype, "toString", function () {
    return "function" == typeof this && t(this).source || functionToString.call(this);
  });
}),
    path = global_1,
    aFunction = function aFunction(e) {
  return "function" == typeof e ? e : void 0;
},
    getBuiltIn = function getBuiltIn(e, t) {
  return arguments.length < 2 ? aFunction(path[e]) || aFunction(global_1[e]) : path[e] && path[e][t] || global_1[e] && global_1[e][t];
},
    ceil = Math.ceil,
    floor = Math.floor,
    toInteger = function toInteger(e) {
  return isNaN(e = +e) ? 0 : (e > 0 ? floor : ceil)(e);
},
    min = Math.min,
    toLength = function toLength(e) {
  return e > 0 ? min(toInteger(e), 9007199254740991) : 0;
},
    max = Math.max,
    min$1 = Math.min,
    toAbsoluteIndex = function toAbsoluteIndex(e, t) {
  var n = toInteger(e);
  return n < 0 ? max(n + t, 0) : min$1(n, t);
},
    createMethod = function createMethod(e) {
  return function (t, n, r) {
    var i,
        o = toIndexedObject(t),
        a = toLength(o.length),
        s = toAbsoluteIndex(r, a);

    if (e && n != n) {
      for (; a > s;) {
        if ((i = o[s++]) != i) return !0;
      }
    } else for (; a > s; s++) {
      if ((e || s in o) && o[s] === n) return e || s || 0;
    }

    return !e && -1;
  };
},
    arrayIncludes = {
  includes: createMethod(!0),
  indexOf: createMethod(!1)
},
    indexOf = arrayIncludes.indexOf,
    objectKeysInternal = function objectKeysInternal(e, t) {
  var n,
      r = toIndexedObject(e),
      i = 0,
      o = [];

  for (n in r) {
    !_has(hiddenKeys, n) && _has(r, n) && o.push(n);
  }

  for (; t.length > i;) {
    _has(r, n = t[i++]) && (~indexOf(o, n) || o.push(n));
  }

  return o;
},
    enumBugKeys = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"],
    hiddenKeys$1 = enumBugKeys.concat("length", "prototype"),
    f$3 = Object.getOwnPropertyNames || function (e) {
  return objectKeysInternal(e, hiddenKeys$1);
},
    objectGetOwnPropertyNames = {
  f: f$3
},
    f$4 = Object.getOwnPropertySymbols,
    objectGetOwnPropertySymbols = {
  f: f$4
},
    ownKeys = getBuiltIn("Reflect", "ownKeys") || function (e) {
  var t = objectGetOwnPropertyNames.f(anObject(e)),
      n = objectGetOwnPropertySymbols.f;
  return n ? t.concat(n(e)) : t;
},
    copyConstructorProperties = function copyConstructorProperties(e, t) {
  for (var n = ownKeys(t), r = objectDefineProperty.f, i = objectGetOwnPropertyDescriptor.f, o = 0; o < n.length; o++) {
    var a = n[o];
    _has(e, a) || r(e, a, i(t, a));
  }
},
    replacement = /#|\.prototype\./,
    isForced = function isForced(e, t) {
  var n = data[normalize(e)];
  return n == POLYFILL || n != NATIVE && ("function" == typeof t ? fails(t) : !!t);
},
    normalize = isForced.normalize = function (e) {
  return String(e).replace(replacement, ".").toLowerCase();
},
    data = isForced.data = {},
    NATIVE = isForced.NATIVE = "N",
    POLYFILL = isForced.POLYFILL = "P",
    isForced_1 = isForced,
    getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f,
    _export = function _export(e, t) {
  var n,
      r,
      i,
      o,
      a,
      s = e.target,
      l = e.global,
      c = e.stat;
  if (n = l ? global_1 : c ? global_1[s] || setGlobal(s, {}) : (global_1[s] || {}).prototype) for (r in t) {
    if (o = t[r], i = e.noTargetGet ? (a = getOwnPropertyDescriptor$1(n, r)) && a.value : n[r], !isForced_1(l ? r : s + (c ? "." : "#") + r, e.forced) && void 0 !== i) {
      if (_typeof2(o) == _typeof2(i)) continue;
      copyConstructorProperties(o, i);
    }

    (e.sham || i && i.sham) && hide(o, "sham", !0), redefine(n, r, o, e);
  }
},
    nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
  return !String(Symbol());
}),
    isArray = Array.isArray || function (e) {
  return "Array" == classofRaw(e);
},
    toObject = function toObject(e) {
  return Object(requireObjectCoercible(e));
},
    objectKeys = Object.keys || function (e) {
  return objectKeysInternal(e, enumBugKeys);
},
    objectDefineProperties = descriptors ? Object.defineProperties : function (e, t) {
  anObject(e);

  for (var n, r = objectKeys(t), i = r.length, o = 0; i > o;) {
    objectDefineProperty.f(e, n = r[o++], t[n]);
  }

  return e;
},
    html = getBuiltIn("document", "documentElement"),
    IE_PROTO = sharedKey("IE_PROTO"),
    PROTOTYPE = "prototype",
    Empty = function Empty() {},
    _createDict = function createDict() {
  var e,
      t = documentCreateElement("iframe"),
      n = enumBugKeys.length;

  for (t.style.display = "none", html.appendChild(t), t.src = String("javascript:"), (e = t.contentWindow.document).open(), e.write("<script>document.F=Object<\/script>"), e.close(), _createDict = e.F; n--;) {
    delete _createDict[PROTOTYPE][enumBugKeys[n]];
  }

  return _createDict();
},
    objectCreate = Object.create || function (e, t) {
  var n;
  return null !== e ? (Empty[PROTOTYPE] = anObject(e), n = new Empty(), Empty[PROTOTYPE] = null, n[IE_PROTO] = e) : n = _createDict(), void 0 === t ? n : objectDefineProperties(n, t);
};

hiddenKeys[IE_PROTO] = !0;

var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f,
    toString$1 = {}.toString,
    windowNames = "object" == (typeof window === "undefined" ? "undefined" : _typeof2(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
    getWindowNames = function getWindowNames(e) {
  try {
    return nativeGetOwnPropertyNames(e);
  } catch (e) {
    return windowNames.slice();
  }
},
    f$5 = function f$5(e) {
  return windowNames && "[object Window]" == toString$1.call(e) ? getWindowNames(e) : nativeGetOwnPropertyNames(toIndexedObject(e));
},
    objectGetOwnPropertyNamesExternal = {
  f: f$5
},
    Symbol$1 = global_1.Symbol,
    store$1 = shared("wks"),
    wellKnownSymbol = function wellKnownSymbol(e) {
  return store$1[e] || (store$1[e] = nativeSymbol && Symbol$1[e] || (nativeSymbol ? Symbol$1 : uid)("Symbol." + e));
},
    f$6 = wellKnownSymbol,
    wrappedWellKnownSymbol = {
  f: f$6
},
    defineProperty = objectDefineProperty.f,
    defineWellKnownSymbol = function defineWellKnownSymbol(e) {
  var t = path.Symbol || (path.Symbol = {});
  _has(t, e) || defineProperty(t, e, {
    value: wrappedWellKnownSymbol.f(e)
  });
},
    defineProperty$1 = objectDefineProperty.f,
    TO_STRING_TAG = wellKnownSymbol("toStringTag"),
    setToStringTag = function setToStringTag(e, t, n) {
  e && !_has(e = n ? e : e.prototype, TO_STRING_TAG) && defineProperty$1(e, TO_STRING_TAG, {
    configurable: !0,
    value: t
  });
},
    aFunction$1 = function aFunction$1(e) {
  if ("function" != typeof e) throw TypeError(String(e) + " is not a function");
  return e;
},
    bindContext = function bindContext(e, t, n) {
  if (aFunction$1(e), void 0 === t) return e;

  switch (n) {
    case 0:
      return function () {
        return e.call(t);
      };

    case 1:
      return function (n) {
        return e.call(t, n);
      };

    case 2:
      return function (n, r) {
        return e.call(t, n, r);
      };

    case 3:
      return function (n, r, i) {
        return e.call(t, n, r, i);
      };
  }

  return function () {
    return e.apply(t, arguments);
  };
},
    SPECIES = wellKnownSymbol("species"),
    arraySpeciesCreate = function arraySpeciesCreate(e, t) {
  var n;
  return isArray(e) && ("function" != typeof (n = e.constructor) || n !== Array && !isArray(n.prototype) ? isObject(n) && null === (n = n[SPECIES]) && (n = void 0) : n = void 0), new (void 0 === n ? Array : n)(0 === t ? 0 : t);
},
    push = [].push,
    createMethod$1 = function createMethod$1(e) {
  var t = 1 == e,
      n = 2 == e,
      r = 3 == e,
      i = 4 == e,
      o = 6 == e,
      a = 5 == e || o;
  return function (s, l, c, u) {
    for (var d, h, p = toObject(s), f = indexedObject(p), m = bindContext(l, c, 3), g = toLength(f.length), y = 0, b = u || arraySpeciesCreate, v = t ? b(s, g) : n ? b(s, 0) : void 0; g > y; y++) {
      if ((a || y in f) && (h = m(d = f[y], y, p), e)) if (t) v[y] = h;else if (h) switch (e) {
        case 3:
          return !0;

        case 5:
          return d;

        case 6:
          return y;

        case 2:
          push.call(v, d);
      } else if (i) return !1;
    }

    return o ? -1 : r || i ? i : v;
  };
},
    arrayIteration = {
  forEach: createMethod$1(0),
  map: createMethod$1(1),
  filter: createMethod$1(2),
  some: createMethod$1(3),
  every: createMethod$1(4),
  find: createMethod$1(5),
  findIndex: createMethod$1(6)
},
    $forEach = arrayIteration.forEach,
    HIDDEN = sharedKey("hidden"),
    SYMBOL = "Symbol",
    PROTOTYPE$1 = "prototype",
    TO_PRIMITIVE = wellKnownSymbol("toPrimitive"),
    setInternalState = internalState.set,
    getInternalState = internalState.getterFor(SYMBOL),
    ObjectPrototype = Object[PROTOTYPE$1],
    _$Symbol = global_1.Symbol,
    JSON$1 = global_1.JSON,
    nativeJSONStringify = JSON$1 && JSON$1.stringify,
    nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f,
    nativeDefineProperty$1 = objectDefineProperty.f,
    nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f,
    nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f,
    AllSymbols = shared("symbols"),
    ObjectPrototypeSymbols = shared("op-symbols"),
    StringToSymbolRegistry = shared("string-to-symbol-registry"),
    SymbolToStringRegistry = shared("symbol-to-string-registry"),
    WellKnownSymbolsStore = shared("wks"),
    QObject = global_1.QObject,
    USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild,
    setSymbolDescriptor = descriptors && fails(function () {
  return 7 != objectCreate(nativeDefineProperty$1({}, "a", {
    get: function get() {
      return nativeDefineProperty$1(this, "a", {
        value: 7
      }).a;
    }
  })).a;
}) ? function (e, t, n) {
  var r = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, t);
  r && delete ObjectPrototype[t], nativeDefineProperty$1(e, t, n), r && e !== ObjectPrototype && nativeDefineProperty$1(ObjectPrototype, t, r);
} : nativeDefineProperty$1,
    wrap = function wrap(e, t) {
  var n = AllSymbols[e] = objectCreate(_$Symbol[PROTOTYPE$1]);
  return setInternalState(n, {
    type: SYMBOL,
    tag: e,
    description: t
  }), descriptors || (n.description = t), n;
},
    isSymbol = nativeSymbol && "symbol" == _typeof2(_$Symbol.iterator) ? function (e) {
  return "symbol" == _typeof2(e);
} : function (e) {
  return Object(e) instanceof _$Symbol;
},
    $defineProperty = function $defineProperty(e, t, n) {
  e === ObjectPrototype && $defineProperty(ObjectPrototypeSymbols, t, n), anObject(e);
  var r = toPrimitive(t, !0);
  return anObject(n), _has(AllSymbols, r) ? (n.enumerable ? (_has(e, HIDDEN) && e[HIDDEN][r] && (e[HIDDEN][r] = !1), n = objectCreate(n, {
    enumerable: createPropertyDescriptor(0, !1)
  })) : (_has(e, HIDDEN) || nativeDefineProperty$1(e, HIDDEN, createPropertyDescriptor(1, {})), e[HIDDEN][r] = !0), setSymbolDescriptor(e, r, n)) : nativeDefineProperty$1(e, r, n);
},
    $defineProperties = function $defineProperties(e, t) {
  anObject(e);
  var n = toIndexedObject(t),
      r = objectKeys(n).concat($getOwnPropertySymbols(n));
  return $forEach(r, function (t) {
    descriptors && !$propertyIsEnumerable.call(n, t) || $defineProperty(e, t, n[t]);
  }), e;
},
    $create = function $create(e, t) {
  return void 0 === t ? objectCreate(e) : $defineProperties(objectCreate(e), t);
},
    $propertyIsEnumerable = function $propertyIsEnumerable(e) {
  var t = toPrimitive(e, !0),
      n = nativePropertyIsEnumerable$1.call(this, t);
  return !(this === ObjectPrototype && _has(AllSymbols, t) && !_has(ObjectPrototypeSymbols, t)) && (!(n || !_has(this, t) || !_has(AllSymbols, t) || _has(this, HIDDEN) && this[HIDDEN][t]) || n);
},
    $getOwnPropertyDescriptor = function $getOwnPropertyDescriptor(e, t) {
  var n = toIndexedObject(e),
      r = toPrimitive(t, !0);

  if (n !== ObjectPrototype || !_has(AllSymbols, r) || _has(ObjectPrototypeSymbols, r)) {
    var i = nativeGetOwnPropertyDescriptor$1(n, r);
    return !i || !_has(AllSymbols, r) || _has(n, HIDDEN) && n[HIDDEN][r] || (i.enumerable = !0), i;
  }
},
    $getOwnPropertyNames = function $getOwnPropertyNames(e) {
  var t = nativeGetOwnPropertyNames$1(toIndexedObject(e)),
      n = [];
  return $forEach(t, function (e) {
    _has(AllSymbols, e) || _has(hiddenKeys, e) || n.push(e);
  }), n;
},
    $getOwnPropertySymbols = function $getOwnPropertySymbols(e) {
  var t = e === ObjectPrototype,
      n = nativeGetOwnPropertyNames$1(t ? ObjectPrototypeSymbols : toIndexedObject(e)),
      r = [];
  return $forEach(n, function (e) {
    !_has(AllSymbols, e) || t && !_has(ObjectPrototype, e) || r.push(AllSymbols[e]);
  }), r;
};

nativeSymbol || (redefine((_$Symbol = function $Symbol() {
  if (this instanceof _$Symbol) throw TypeError("Symbol is not a constructor");

  var e = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0,
      t = uid(e),
      n = function n(e) {
    this === ObjectPrototype && n.call(ObjectPrototypeSymbols, e), _has(this, HIDDEN) && _has(this[HIDDEN], t) && (this[HIDDEN][t] = !1), setSymbolDescriptor(this, t, createPropertyDescriptor(1, e));
  };

  return descriptors && USE_SETTER && setSymbolDescriptor(ObjectPrototype, t, {
    configurable: !0,
    set: n
  }), wrap(t, e);
})[PROTOTYPE$1], "toString", function () {
  return getInternalState(this).tag;
}), objectPropertyIsEnumerable.f = $propertyIsEnumerable, objectDefineProperty.f = $defineProperty, objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor, objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames, objectGetOwnPropertySymbols.f = $getOwnPropertySymbols, descriptors && (nativeDefineProperty$1(_$Symbol[PROTOTYPE$1], "description", {
  configurable: !0,
  get: function get() {
    return getInternalState(this).description;
  }
}), redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, {
  unsafe: !0
})), wrappedWellKnownSymbol.f = function (e) {
  return wrap(wellKnownSymbol(e), e);
}), _export({
  global: !0,
  wrap: !0,
  forced: !nativeSymbol,
  sham: !nativeSymbol
}, {
  Symbol: _$Symbol
}), $forEach(objectKeys(WellKnownSymbolsStore), function (e) {
  defineWellKnownSymbol(e);
}), _export({
  target: SYMBOL,
  stat: !0,
  forced: !nativeSymbol
}, {
  "for": function _for(e) {
    var t = String(e);
    if (_has(StringToSymbolRegistry, t)) return StringToSymbolRegistry[t];

    var n = _$Symbol(t);

    return StringToSymbolRegistry[t] = n, SymbolToStringRegistry[n] = t, n;
  },
  keyFor: function keyFor(e) {
    if (!isSymbol(e)) throw TypeError(e + " is not a symbol");
    if (_has(SymbolToStringRegistry, e)) return SymbolToStringRegistry[e];
  },
  useSetter: function useSetter() {
    USE_SETTER = !0;
  },
  useSimple: function useSimple() {
    USE_SETTER = !1;
  }
}), _export({
  target: "Object",
  stat: !0,
  forced: !nativeSymbol,
  sham: !descriptors
}, {
  create: $create,
  defineProperty: $defineProperty,
  defineProperties: $defineProperties,
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
}), _export({
  target: "Object",
  stat: !0,
  forced: !nativeSymbol
}, {
  getOwnPropertyNames: $getOwnPropertyNames,
  getOwnPropertySymbols: $getOwnPropertySymbols
}), _export({
  target: "Object",
  stat: !0,
  forced: fails(function () {
    objectGetOwnPropertySymbols.f(1);
  })
}, {
  getOwnPropertySymbols: function getOwnPropertySymbols(e) {
    return objectGetOwnPropertySymbols.f(toObject(e));
  }
}), JSON$1 && _export({
  target: "JSON",
  stat: !0,
  forced: !nativeSymbol || fails(function () {
    var e = _$Symbol();

    return "[null]" != nativeJSONStringify([e]) || "{}" != nativeJSONStringify({
      a: e
    }) || "{}" != nativeJSONStringify(Object(e));
  })
}, {
  stringify: function stringify(e) {
    for (var t, n, r = [e], i = 1; arguments.length > i;) {
      r.push(arguments[i++]);
    }

    if (n = t = r[1], (isObject(t) || void 0 !== e) && !isSymbol(e)) return isArray(t) || (t = function t(e, _t2) {
      if ("function" == typeof n && (_t2 = n.call(this, e, _t2)), !isSymbol(_t2)) return _t2;
    }), r[1] = t, nativeJSONStringify.apply(JSON$1, r);
  }
}), _$Symbol[PROTOTYPE$1][TO_PRIMITIVE] || hide(_$Symbol[PROTOTYPE$1], TO_PRIMITIVE, _$Symbol[PROTOTYPE$1].valueOf), setToStringTag(_$Symbol, SYMBOL), hiddenKeys[HIDDEN] = !0;
var defineProperty$2 = objectDefineProperty.f,
    NativeSymbol = global_1.Symbol;

if (descriptors && "function" == typeof NativeSymbol && (!("description" in NativeSymbol.prototype) || void 0 !== NativeSymbol().description)) {
  var EmptyStringDescriptionStore = {},
      SymbolWrapper = function SymbolWrapper() {
    var e = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),
        t = this instanceof SymbolWrapper ? new NativeSymbol(e) : void 0 === e ? NativeSymbol() : NativeSymbol(e);
    return "" === e && (EmptyStringDescriptionStore[t] = !0), t;
  };

  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString,
      _native = "Symbol(test)" == String(NativeSymbol("test")),
      regexp = /^Symbol\((.*)\)[^)]+$/;

  defineProperty$2(symbolPrototype, "description", {
    configurable: !0,
    get: function get() {
      var e = isObject(this) ? this.valueOf() : this,
          t = symbolToString.call(e);
      if (_has(EmptyStringDescriptionStore, e)) return "";
      var n = _native ? t.slice(7, -1) : t.replace(regexp, "$1");
      return "" === n ? void 0 : n;
    }
  }), _export({
    global: !0,
    forced: !0
  }, {
    Symbol: SymbolWrapper
  });
}

defineWellKnownSymbol("iterator");
var UNSCOPABLES = wellKnownSymbol("unscopables"),
    ArrayPrototype = Array.prototype;
null == ArrayPrototype[UNSCOPABLES] && hide(ArrayPrototype, UNSCOPABLES, objectCreate(null));

var IteratorPrototype,
    PrototypeOfArrayIteratorPrototype,
    arrayIterator,
    addToUnscopables = function addToUnscopables(e) {
  ArrayPrototype[UNSCOPABLES][e] = !0;
},
    iterators = {},
    correctPrototypeGetter = !fails(function () {
  function e() {}

  return e.prototype.constructor = null, Object.getPrototypeOf(new e()) !== e.prototype;
}),
    IE_PROTO$1 = sharedKey("IE_PROTO"),
    ObjectPrototype$1 = Object.prototype,
    objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (e) {
  return e = toObject(e), _has(e, IE_PROTO$1) ? e[IE_PROTO$1] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? ObjectPrototype$1 : null;
},
    ITERATOR = wellKnownSymbol("iterator"),
    BUGGY_SAFARI_ITERATORS = !1,
    returnThis = function returnThis() {
  return this;
};

[].keys && ("next" in (arrayIterator = [].keys()) ? (PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator))) !== Object.prototype && (IteratorPrototype = PrototypeOfArrayIteratorPrototype) : BUGGY_SAFARI_ITERATORS = !0), null == IteratorPrototype && (IteratorPrototype = {}), _has(IteratorPrototype, ITERATOR) || hide(IteratorPrototype, ITERATOR, returnThis);

var iteratorsCore = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
},
    IteratorPrototype$1 = iteratorsCore.IteratorPrototype,
    returnThis$1 = function returnThis$1() {
  return this;
},
    createIteratorConstructor = function createIteratorConstructor(e, t, n) {
  var r = t + " Iterator";
  return e.prototype = objectCreate(IteratorPrototype$1, {
    next: createPropertyDescriptor(1, n)
  }), setToStringTag(e, r, !1), iterators[r] = returnThis$1, e;
},
    aPossiblePrototype = function aPossiblePrototype(e) {
  if (!isObject(e) && null !== e) throw TypeError("Can't set " + String(e) + " as a prototype");
  return e;
},
    objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function () {
  var e,
      t = !1,
      n = {};

  try {
    (e = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(n, []), t = n instanceof Array;
  } catch (e) {}

  return function (n, r) {
    return anObject(n), aPossiblePrototype(r), t ? e.call(n, r) : n.__proto__ = r, n;
  };
}() : void 0),
    IteratorPrototype$2 = iteratorsCore.IteratorPrototype,
    BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS,
    ITERATOR$1 = wellKnownSymbol("iterator"),
    KEYS = "keys",
    VALUES = "values",
    ENTRIES = "entries",
    returnThis$2 = function returnThis$2() {
  return this;
},
    defineIterator = function defineIterator(e, t, n, r, i, o, a) {
  createIteratorConstructor(n, t, r);

  var s,
      l,
      c,
      u = function u(e) {
    if (e === i && m) return m;
    if (!BUGGY_SAFARI_ITERATORS$1 && e in p) return p[e];

    switch (e) {
      case KEYS:
      case VALUES:
      case ENTRIES:
        return function () {
          return new n(this, e);
        };
    }

    return function () {
      return new n(this);
    };
  },
      d = t + " Iterator",
      h = !1,
      p = e.prototype,
      f = p[ITERATOR$1] || p["@@iterator"] || i && p[i],
      m = !BUGGY_SAFARI_ITERATORS$1 && f || u(i),
      g = "Array" == t && p.entries || f;

  if (g && (s = objectGetPrototypeOf(g.call(new e())), IteratorPrototype$2 !== Object.prototype && s.next && (objectGetPrototypeOf(s) !== IteratorPrototype$2 && (objectSetPrototypeOf ? objectSetPrototypeOf(s, IteratorPrototype$2) : "function" != typeof s[ITERATOR$1] && hide(s, ITERATOR$1, returnThis$2)), setToStringTag(s, d, !0))), i == VALUES && f && f.name !== VALUES && (h = !0, m = function m() {
    return f.call(this);
  }), p[ITERATOR$1] !== m && hide(p, ITERATOR$1, m), iterators[t] = m, i) if (l = {
    values: u(VALUES),
    keys: o ? m : u(KEYS),
    entries: u(ENTRIES)
  }, a) for (c in l) {
    !BUGGY_SAFARI_ITERATORS$1 && !h && c in p || redefine(p, c, l[c]);
  } else _export({
    target: t,
    proto: !0,
    forced: BUGGY_SAFARI_ITERATORS$1 || h
  }, l);
  return l;
},
    ARRAY_ITERATOR = "Array Iterator",
    setInternalState$1 = internalState.set,
    getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR),
    es_array_iterator = defineIterator(Array, "Array", function (e, t) {
  setInternalState$1(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(e),
    index: 0,
    kind: t
  });
}, function () {
  var e = getInternalState$1(this),
      t = e.target,
      n = e.kind,
      r = e.index++;
  return !t || r >= t.length ? (e.target = void 0, {
    value: void 0,
    done: !0
  }) : "keys" == n ? {
    value: r,
    done: !1
  } : "values" == n ? {
    value: t[r],
    done: !1
  } : {
    value: [r, t[r]],
    done: !1
  };
}, "values");

iterators.Arguments = iterators.Array, addToUnscopables("keys"), addToUnscopables("values"), addToUnscopables("entries");

var sloppyArrayMethod = function sloppyArrayMethod(e, t) {
  var n = [][e];
  return !n || !fails(function () {
    n.call(null, t || function () {
      throw 1;
    }, 1);
  });
},
    nativeJoin = [].join,
    ES3_STRINGS = indexedObject != Object,
    SLOPPY_METHOD = sloppyArrayMethod("join", ",");

_export({
  target: "Array",
  proto: !0,
  forced: ES3_STRINGS || SLOPPY_METHOD
}, {
  join: function join(e) {
    return nativeJoin.call(toIndexedObject(this), void 0 === e ? "," : e);
  }
});

var createProperty = function createProperty(e, t, n) {
  var r = toPrimitive(t);
  r in e ? objectDefineProperty.f(e, r, createPropertyDescriptor(0, n)) : e[r] = n;
},
    SPECIES$1 = wellKnownSymbol("species"),
    arrayMethodHasSpeciesSupport = function arrayMethodHasSpeciesSupport(e) {
  return !fails(function () {
    var t = [];
    return (t.constructor = {})[SPECIES$1] = function () {
      return {
        foo: 1
      };
    }, 1 !== t[e](Boolean).foo;
  });
},
    SPECIES$2 = wellKnownSymbol("species"),
    nativeSlice = [].slice,
    max$1 = Math.max;

_export({
  target: "Array",
  proto: !0,
  forced: !arrayMethodHasSpeciesSupport("slice")
}, {
  slice: function slice(e, t) {
    var n,
        r,
        i,
        o = toIndexedObject(this),
        a = toLength(o.length),
        s = toAbsoluteIndex(e, a),
        l = toAbsoluteIndex(void 0 === t ? a : t, a);
    if (isArray(o) && ("function" != typeof (n = o.constructor) || n !== Array && !isArray(n.prototype) ? isObject(n) && null === (n = n[SPECIES$2]) && (n = void 0) : n = void 0, n === Array || void 0 === n)) return nativeSlice.call(o, s, l);

    for (r = new (void 0 === n ? Array : n)(max$1(l - s, 0)), i = 0; s < l; s++, i++) {
      s in o && createProperty(r, i, o[s]);
    }

    return r.length = i, r;
  }
});

var TO_STRING_TAG$1 = wellKnownSymbol("toStringTag"),
    CORRECT_ARGUMENTS = "Arguments" == classofRaw(function () {
  return arguments;
}()),
    tryGet = function tryGet(e, t) {
  try {
    return e[t];
  } catch (e) {}
},
    classof = function classof(e) {
  var t, n, r;
  return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (n = tryGet(t = Object(e), TO_STRING_TAG$1)) ? n : CORRECT_ARGUMENTS ? classofRaw(t) : "Object" == (r = classofRaw(t)) && "function" == typeof t.callee ? "Arguments" : r;
},
    TO_STRING_TAG$2 = wellKnownSymbol("toStringTag"),
    test = {};

test[TO_STRING_TAG$2] = "z";
var objectToString = "[object z]" !== String(test) ? function () {
  return "[object " + classof(this) + "]";
} : test.toString,
    ObjectPrototype$2 = Object.prototype;
objectToString !== ObjectPrototype$2.toString && redefine(ObjectPrototype$2, "toString", objectToString, {
  unsafe: !0
});

var regexpFlags = function regexpFlags() {
  var e = anObject(this),
      t = "";
  return e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), e.dotAll && (t += "s"), e.unicode && (t += "u"), e.sticky && (t += "y"), t;
},
    TO_STRING = "toString",
    RegExpPrototype = RegExp.prototype,
    nativeToString = RegExpPrototype[TO_STRING],
    NOT_GENERIC = fails(function () {
  return "/a/b" != nativeToString.call({
    source: "a",
    flags: "b"
  });
}),
    INCORRECT_NAME = nativeToString.name != TO_STRING;

(NOT_GENERIC || INCORRECT_NAME) && redefine(RegExp.prototype, TO_STRING, function () {
  var e = anObject(this),
      t = String(e.source),
      n = e.flags;
  return "/" + t + "/" + String(void 0 === n && e instanceof RegExp && !("flags" in RegExpPrototype) ? regexpFlags.call(e) : n);
}, {
  unsafe: !0
});

var createMethod$2 = function createMethod$2(e) {
  return function (t, n) {
    var r,
        i,
        o = String(requireObjectCoercible(t)),
        a = toInteger(n),
        s = o.length;
    return a < 0 || a >= s ? e ? "" : void 0 : (r = o.charCodeAt(a)) < 55296 || r > 56319 || a + 1 === s || (i = o.charCodeAt(a + 1)) < 56320 || i > 57343 ? e ? o.charAt(a) : r : e ? o.slice(a, a + 2) : i - 56320 + (r - 55296 << 10) + 65536;
  };
},
    stringMultibyte = {
  codeAt: createMethod$2(!1),
  charAt: createMethod$2(!0)
},
    charAt = stringMultibyte.charAt,
    STRING_ITERATOR = "String Iterator",
    setInternalState$2 = internalState.set,
    getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

defineIterator(String, "String", function (e) {
  setInternalState$2(this, {
    type: STRING_ITERATOR,
    string: String(e),
    index: 0
  });
}, function () {
  var e,
      t = getInternalState$2(this),
      n = t.string,
      r = t.index;
  return r >= n.length ? {
    value: void 0,
    done: !0
  } : (e = charAt(n, r), t.index += e.length, {
    value: e,
    done: !1
  });
});

var nativeExec = RegExp.prototype.exec,
    nativeReplace = String.prototype.replace,
    patchedExec = nativeExec,
    UPDATES_LAST_INDEX_WRONG = function () {
  var e = /a/,
      t = /b*/g;
  return nativeExec.call(e, "a"), nativeExec.call(t, "a"), 0 !== e.lastIndex || 0 !== t.lastIndex;
}(),
    NPCG_INCLUDED = void 0 !== /()??/.exec("")[1],
    PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

PATCH && (patchedExec = function patchedExec(e) {
  var t,
      n,
      r,
      i,
      o = this;
  return NPCG_INCLUDED && (n = new RegExp("^" + o.source + "$(?!\\s)", regexpFlags.call(o))), UPDATES_LAST_INDEX_WRONG && (t = o.lastIndex), r = nativeExec.call(o, e), UPDATES_LAST_INDEX_WRONG && r && (o.lastIndex = o.global ? r.index + r[0].length : t), NPCG_INCLUDED && r && r.length > 1 && nativeReplace.call(r[0], n, function () {
    for (i = 1; i < arguments.length - 2; i++) {
      void 0 === arguments[i] && (r[i] = void 0);
    }
  }), r;
});

var regexpExec = patchedExec,
    SPECIES$3 = wellKnownSymbol("species"),
    REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var e = /./;
  return e.exec = function () {
    var e = [];
    return e.groups = {
      a: "7"
    }, e;
  }, "7" !== "".replace(e, "$<a>");
}),
    SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var e = /(?:)/,
      t = e.exec;

  e.exec = function () {
    return t.apply(this, arguments);
  };

  var n = "ab".split(e);
  return 2 !== n.length || "a" !== n[0] || "b" !== n[1];
}),
    fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(e, t, n, r) {
  var i = wellKnownSymbol(e),
      o = !fails(function () {
    var t = {};
    return t[i] = function () {
      return 7;
    }, 7 != ""[e](t);
  }),
      a = o && !fails(function () {
    var t = !1,
        n = /a/;
    return n.exec = function () {
      return t = !0, null;
    }, "split" === e && (n.constructor = {}, n.constructor[SPECIES$3] = function () {
      return n;
    }), n[i](""), !t;
  });

  if (!o || !a || "replace" === e && !REPLACE_SUPPORTS_NAMED_GROUPS || "split" === e && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
    var s = /./[i],
        l = n(i, ""[e], function (e, t, n, r, i) {
      return t.exec === regexpExec ? o && !i ? {
        done: !0,
        value: s.call(t, n, r)
      } : {
        done: !0,
        value: e.call(n, t, r)
      } : {
        done: !1
      };
    }),
        c = l[0],
        u = l[1];
    redefine(String.prototype, e, c), redefine(RegExp.prototype, i, 2 == t ? function (e, t) {
      return u.call(e, this, t);
    } : function (e) {
      return u.call(e, this);
    }), r && hide(RegExp.prototype[i], "sham", !0);
  }
},
    charAt$1 = stringMultibyte.charAt,
    advanceStringIndex = function advanceStringIndex(e, t, n) {
  return t + (n ? charAt$1(e, t).length : 1);
},
    regexpExecAbstract = function regexpExecAbstract(e, t) {
  var n = e.exec;

  if ("function" == typeof n) {
    var r = n.call(e, t);
    if ("object" != _typeof2(r)) throw TypeError("RegExp exec method returned something other than an Object or null");
    return r;
  }

  if ("RegExp" !== classofRaw(e)) throw TypeError("RegExp#exec called on incompatible receiver");
  return regexpExec.call(e, t);
},
    max$2 = Math.max,
    min$2 = Math.min,
    floor$1 = Math.floor,
    SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g,
    SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g,
    maybeToString = function maybeToString(e) {
  return void 0 === e ? e : String(e);
};

fixRegexpWellKnownSymbolLogic("replace", 2, function (e, t, n) {
  return [function (n, r) {
    var i = requireObjectCoercible(this),
        o = null == n ? void 0 : n[e];
    return void 0 !== o ? o.call(n, i, r) : t.call(String(i), n, r);
  }, function (e, i) {
    var o = n(t, e, this, i);
    if (o.done) return o.value;
    var a = anObject(e),
        s = String(this),
        l = "function" == typeof i;
    l || (i = String(i));
    var c = a.global;

    if (c) {
      var u = a.unicode;
      a.lastIndex = 0;
    }

    for (var d = [];;) {
      var h = regexpExecAbstract(a, s);
      if (null === h) break;
      if (d.push(h), !c) break;
      "" === String(h[0]) && (a.lastIndex = advanceStringIndex(s, toLength(a.lastIndex), u));
    }

    for (var p = "", f = 0, m = 0; m < d.length; m++) {
      h = d[m];

      for (var g = String(h[0]), y = max$2(min$2(toInteger(h.index), s.length), 0), b = [], v = 1; v < h.length; v++) {
        b.push(maybeToString(h[v]));
      }

      var E = h.groups;

      if (l) {
        var S = [g].concat(b, y, s);
        void 0 !== E && S.push(E);
        var T = String(i.apply(void 0, S));
      } else T = r(g, s, y, b, E, i);

      y >= f && (p += s.slice(f, y) + T, f = y + g.length);
    }

    return p + s.slice(f);
  }];

  function r(e, n, r, i, o, a) {
    var s = r + e.length,
        l = i.length,
        c = SUBSTITUTION_SYMBOLS_NO_NAMED;
    return void 0 !== o && (o = toObject(o), c = SUBSTITUTION_SYMBOLS), t.call(a, c, function (t, a) {
      var c;

      switch (a.charAt(0)) {
        case "$":
          return "$";

        case "&":
          return e;

        case "`":
          return n.slice(0, r);

        case "'":
          return n.slice(s);

        case "<":
          c = o[a.slice(1, -1)];
          break;

        default:
          var u = +a;
          if (0 === u) return t;

          if (u > l) {
            var d = floor$1(u / 10);
            return 0 === d ? t : d <= l ? void 0 === i[d - 1] ? a.charAt(1) : i[d - 1] + a.charAt(1) : t;
          }

          c = i[u - 1];
      }

      return void 0 === c ? "" : c;
    });
  }
});

var sameValue = Object.is || function (e, t) {
  return e === t ? 0 !== e || 1 / e == 1 / t : e != e && t != t;
};

fixRegexpWellKnownSymbolLogic("search", 1, function (e, t, n) {
  return [function (t) {
    var n = requireObjectCoercible(this),
        r = null == t ? void 0 : t[e];
    return void 0 !== r ? r.call(t, n) : new RegExp(t)[e](String(n));
  }, function (e) {
    var r = n(t, e, this);
    if (r.done) return r.value;
    var i = anObject(e),
        o = String(this),
        a = i.lastIndex;
    sameValue(a, 0) || (i.lastIndex = 0);
    var s = regexpExecAbstract(i, o);
    return sameValue(i.lastIndex, a) || (i.lastIndex = a), null === s ? -1 : s.index;
  }];
});

var MATCH = wellKnownSymbol("match"),
    isRegexp = function isRegexp(e) {
  var t;
  return isObject(e) && (void 0 !== (t = e[MATCH]) ? !!t : "RegExp" == classofRaw(e));
},
    SPECIES$4 = wellKnownSymbol("species"),
    speciesConstructor = function speciesConstructor(e, t) {
  var n,
      r = anObject(e).constructor;
  return void 0 === r || null == (n = anObject(r)[SPECIES$4]) ? t : aFunction$1(n);
},
    arrayPush = [].push,
    min$3 = Math.min,
    MAX_UINT32 = 4294967295,
    SUPPORTS_Y = !fails(function () {
  return !RegExp(MAX_UINT32, "y");
});

fixRegexpWellKnownSymbolLogic("split", 2, function (e, t, n) {
  var r;
  return r = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function (e, n) {
    var r = String(requireObjectCoercible(this)),
        i = void 0 === n ? MAX_UINT32 : n >>> 0;
    if (0 === i) return [];
    if (void 0 === e) return [r];
    if (!isRegexp(e)) return t.call(r, e, i);

    for (var o, a, s, l = [], c = (e.ignoreCase ? "i" : "") + (e.multiline ? "m" : "") + (e.unicode ? "u" : "") + (e.sticky ? "y" : ""), u = 0, d = new RegExp(e.source, c + "g"); (o = regexpExec.call(d, r)) && !((a = d.lastIndex) > u && (l.push(r.slice(u, o.index)), o.length > 1 && o.index < r.length && arrayPush.apply(l, o.slice(1)), s = o[0].length, u = a, l.length >= i));) {
      d.lastIndex === o.index && d.lastIndex++;
    }

    return u === r.length ? !s && d.test("") || l.push("") : l.push(r.slice(u)), l.length > i ? l.slice(0, i) : l;
  } : "0".split(void 0, 0).length ? function (e, n) {
    return void 0 === e && 0 === n ? [] : t.call(this, e, n);
  } : t, [function (t, n) {
    var i = requireObjectCoercible(this),
        o = null == t ? void 0 : t[e];
    return void 0 !== o ? o.call(t, i, n) : r.call(String(i), t, n);
  }, function (e, i) {
    var o = n(r, e, this, i, r !== t);
    if (o.done) return o.value;
    var a = anObject(e),
        s = String(this),
        l = speciesConstructor(a, RegExp),
        c = a.unicode,
        u = (a.ignoreCase ? "i" : "") + (a.multiline ? "m" : "") + (a.unicode ? "u" : "") + (SUPPORTS_Y ? "y" : "g"),
        d = new l(SUPPORTS_Y ? a : "^(?:" + a.source + ")", u),
        h = void 0 === i ? MAX_UINT32 : i >>> 0;
    if (0 === h) return [];
    if (0 === s.length) return null === regexpExecAbstract(d, s) ? [s] : [];

    for (var p = 0, f = 0, m = []; f < s.length;) {
      d.lastIndex = SUPPORTS_Y ? f : 0;
      var g,
          y = regexpExecAbstract(d, SUPPORTS_Y ? s : s.slice(f));
      if (null === y || (g = min$3(toLength(d.lastIndex + (SUPPORTS_Y ? 0 : f)), s.length)) === p) f = advanceStringIndex(s, f, c);else {
        if (m.push(s.slice(p, f)), m.length === h) return m;

        for (var b = 1; b <= y.length - 1; b++) {
          if (m.push(y[b]), m.length === h) return m;
        }

        f = p = g;
      }
    }

    return m.push(s.slice(p)), m;
  }];
}, !SUPPORTS_Y);
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
},
    $forEach$1 = arrayIteration.forEach,
    arrayForEach = sloppyArrayMethod("forEach") ? function (e) {
  return $forEach$1(this, e, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;

for (var COLLECTION_NAME in domIterables) {
  var Collection = global_1[COLLECTION_NAME],
      CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
    hide(CollectionPrototype, "forEach", arrayForEach);
  } catch (e) {
    CollectionPrototype.forEach = arrayForEach;
  }
}

var ITERATOR$2 = wellKnownSymbol("iterator"),
    TO_STRING_TAG$3 = wellKnownSymbol("toStringTag"),
    ArrayValues = es_array_iterator.values;

for (var COLLECTION_NAME$1 in domIterables) {
  var Collection$1 = global_1[COLLECTION_NAME$1],
      CollectionPrototype$1 = Collection$1 && Collection$1.prototype;

  if (CollectionPrototype$1) {
    if (CollectionPrototype$1[ITERATOR$2] !== ArrayValues) try {
      hide(CollectionPrototype$1, ITERATOR$2, ArrayValues);
    } catch (e) {
      CollectionPrototype$1[ITERATOR$2] = ArrayValues;
    }
    if (CollectionPrototype$1[TO_STRING_TAG$3] || hide(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1), domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
      if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
        hide(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
      } catch (e) {
        CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
      }
    }
  }
}

var ITERATOR$3 = wellKnownSymbol("iterator"),
    nativeUrl = !fails(function () {
  var e = new URL("b?e=1", "http://a"),
      t = e.searchParams;
  return e.pathname = "c%20d", isPure && !e.toJSON || !t.sort || "http://a/c%20d?e=1" !== e.href || "1" !== t.get("e") || "a=1" !== String(new URLSearchParams("?a=1")) || !t[ITERATOR$3] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://ÑÐµÑÑ").host || "#%D0%B1" !== new URL("http://a#Ð±").hash;
}),
    anInstance = function anInstance(e, t, n) {
  if (!(e instanceof t)) throw TypeError("Incorrect " + (n ? n + " " : "") + "invocation");
  return e;
},
    nativeAssign = Object.assign,
    objectAssign = !nativeAssign || fails(function () {
  var e = {},
      t = {},
      n = Symbol();
  return e[n] = 7, "abcdefghijklmnopqrst".split("").forEach(function (e) {
    t[e] = e;
  }), 7 != nativeAssign({}, e)[n] || "abcdefghijklmnopqrst" != objectKeys(nativeAssign({}, t)).join("");
}) ? function (e, t) {
  for (var n = toObject(e), r = arguments.length, i = 1, o = objectGetOwnPropertySymbols.f, a = objectPropertyIsEnumerable.f; r > i;) {
    for (var s, l = indexedObject(arguments[i++]), c = o ? objectKeys(l).concat(o(l)) : objectKeys(l), u = c.length, d = 0; u > d;) {
      s = c[d++], descriptors && !a.call(l, s) || (n[s] = l[s]);
    }
  }

  return n;
} : nativeAssign,
    callWithSafeIterationClosing = function callWithSafeIterationClosing(e, t, n, r) {
  try {
    return r ? t(anObject(n)[0], n[1]) : t(n);
  } catch (t) {
    var i = e["return"];
    throw void 0 !== i && anObject(i.call(e)), t;
  }
},
    ITERATOR$4 = wellKnownSymbol("iterator"),
    ArrayPrototype$1 = Array.prototype,
    isArrayIteratorMethod = function isArrayIteratorMethod(e) {
  return void 0 !== e && (iterators.Array === e || ArrayPrototype$1[ITERATOR$4] === e);
},
    ITERATOR$5 = wellKnownSymbol("iterator"),
    getIteratorMethod = function getIteratorMethod(e) {
  if (null != e) return e[ITERATOR$5] || e["@@iterator"] || iterators[classof(e)];
},
    arrayFrom = function arrayFrom(e) {
  var t,
      n,
      r,
      i,
      o = toObject(e),
      a = "function" == typeof this ? this : Array,
      s = arguments.length,
      l = s > 1 ? arguments[1] : void 0,
      c = void 0 !== l,
      u = 0,
      d = getIteratorMethod(o);
  if (c && (l = bindContext(l, s > 2 ? arguments[2] : void 0, 2)), null == d || a == Array && isArrayIteratorMethod(d)) for (n = new a(t = toLength(o.length)); t > u; u++) {
    createProperty(n, u, c ? l(o[u], u) : o[u]);
  } else for (i = d.call(o), n = new a(); !(r = i.next()).done; u++) {
    createProperty(n, u, c ? callWithSafeIterationClosing(i, l, [r.value, u], !0) : r.value);
  }
  return n.length = u, n;
},
    maxInt = 2147483647,
    base = 36,
    tMin = 1,
    tMax = 26,
    skew = 38,
    damp = 700,
    initialBias = 72,
    initialN = 128,
    delimiter = "-",
    regexNonASCII = /[^\0-\u007E]/,
    regexSeparators = /[.\u3002\uFF0E\uFF61]/g,
    OVERFLOW_ERROR = "Overflow: input needs wider integers to process",
    baseMinusTMin = base - tMin,
    floor$2 = Math.floor,
    stringFromCharCode = String.fromCharCode,
    ucs2decode = function ucs2decode(e) {
  for (var t = [], n = 0, r = e.length; n < r;) {
    var i = e.charCodeAt(n++);

    if (i >= 55296 && i <= 56319 && n < r) {
      var o = e.charCodeAt(n++);
      56320 == (64512 & o) ? t.push(((1023 & i) << 10) + (1023 & o) + 65536) : (t.push(i), n--);
    } else t.push(i);
  }

  return t;
},
    digitToBasic = function digitToBasic(e) {
  return e + 22 + 75 * (e < 26);
},
    adapt = function adapt(e, t, n) {
  var r = 0;

  for (e = n ? floor$2(e / damp) : e >> 1, e += floor$2(e / t); e > baseMinusTMin * tMax >> 1; r += base) {
    e = floor$2(e / baseMinusTMin);
  }

  return floor$2(r + (baseMinusTMin + 1) * e / (e + skew));
},
    encode = function encode(e) {
  var t,
      n,
      r = [],
      i = (e = ucs2decode(e)).length,
      o = initialN,
      a = 0,
      s = initialBias;

  for (t = 0; t < e.length; t++) {
    (n = e[t]) < 128 && r.push(stringFromCharCode(n));
  }

  var l = r.length,
      c = l;

  for (l && r.push(delimiter); c < i;) {
    var u = maxInt;

    for (t = 0; t < e.length; t++) {
      (n = e[t]) >= o && n < u && (u = n);
    }

    var d = c + 1;
    if (u - o > floor$2((maxInt - a) / d)) throw RangeError(OVERFLOW_ERROR);

    for (a += (u - o) * d, o = u, t = 0; t < e.length; t++) {
      if ((n = e[t]) < o && ++a > maxInt) throw RangeError(OVERFLOW_ERROR);

      if (n == o) {
        for (var h = a, p = base;; p += base) {
          var f = p <= s ? tMin : p >= s + tMax ? tMax : p - s;
          if (h < f) break;
          var m = h - f,
              g = base - f;
          r.push(stringFromCharCode(digitToBasic(f + m % g))), h = floor$2(m / g);
        }

        r.push(stringFromCharCode(digitToBasic(h))), s = adapt(a, d, c == l), a = 0, ++c;
      }
    }

    ++a, ++o;
  }

  return r.join("");
},
    punycodeToAscii = function punycodeToAscii(e) {
  var t,
      n,
      r = [],
      i = e.toLowerCase().replace(regexSeparators, ".").split(".");

  for (t = 0; t < i.length; t++) {
    n = i[t], r.push(regexNonASCII.test(n) ? "xn--" + encode(n) : n);
  }

  return r.join(".");
},
    redefineAll = function redefineAll(e, t, n) {
  for (var r in t) {
    redefine(e, r, t[r], n);
  }

  return e;
},
    getIterator = function getIterator(e) {
  var t = getIteratorMethod(e);
  if ("function" != typeof t) throw TypeError(String(e) + " is not iterable");
  return anObject(t.call(e));
},
    ITERATOR$6 = wellKnownSymbol("iterator"),
    URL_SEARCH_PARAMS = "URLSearchParams",
    URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator",
    setInternalState$3 = internalState.set,
    getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS),
    getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR),
    plus = /\+/g,
    sequences = Array(4),
    percentSequence = function percentSequence(e) {
  return sequences[e - 1] || (sequences[e - 1] = RegExp("((?:%[\\da-f]{2}){" + e + "})", "gi"));
},
    percentDecode = function percentDecode(e) {
  try {
    return decodeURIComponent(e);
  } catch (t) {
    return e;
  }
},
    deserialize = function deserialize(e) {
  var t = e.replace(plus, " "),
      n = 4;

  try {
    return decodeURIComponent(t);
  } catch (e) {
    for (; n;) {
      t = t.replace(percentSequence(n--), percentDecode);
    }

    return t;
  }
},
    find = /[!'()~]|%20/g,
    replace = {
  "!": "%21",
  "'": "%27",
  "(": "%28",
  ")": "%29",
  "~": "%7E",
  "%20": "+"
},
    replacer = function replacer(e) {
  return replace[e];
},
    serialize = function serialize(e) {
  return encodeURIComponent(e).replace(find, replacer);
},
    parseSearchParams = function parseSearchParams(e, t) {
  if (t) for (var n, r, i = t.split("&"), o = 0; o < i.length;) {
    (n = i[o++]).length && (r = n.split("="), e.push({
      key: deserialize(r.shift()),
      value: deserialize(r.join("="))
    }));
  }
},
    updateSearchParams = function updateSearchParams(e) {
  this.entries.length = 0, parseSearchParams(this.entries, e);
},
    validateArgumentsLength = function validateArgumentsLength(e, t) {
  if (e < t) throw TypeError("Not enough arguments");
},
    URLSearchParamsIterator = createIteratorConstructor(function (e, t) {
  setInternalState$3(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(e).entries),
    kind: t
  });
}, "Iterator", function () {
  var e = getInternalIteratorState(this),
      t = e.kind,
      n = e.iterator.next(),
      r = n.value;
  return n.done || (n.value = "keys" === t ? r.key : "values" === t ? r.value : [r.key, r.value]), n;
}),
    URLSearchParamsConstructor = function URLSearchParamsConstructor() {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var e,
      t,
      n,
      r,
      i,
      o,
      a,
      s = arguments.length > 0 ? arguments[0] : void 0,
      l = [];
  if (setInternalState$3(this, {
    type: URL_SEARCH_PARAMS,
    entries: l,
    updateURL: function updateURL() {},
    updateSearchParams: updateSearchParams
  }), void 0 !== s) if (isObject(s)) {
    if ("function" == typeof (e = getIteratorMethod(s))) for (t = e.call(s); !(n = t.next()).done;) {
      if ((i = (r = getIterator(anObject(n.value))).next()).done || (o = r.next()).done || !r.next().done) throw TypeError("Expected sequence with length 2");
      l.push({
        key: i.value + "",
        value: o.value + ""
      });
    } else for (a in s) {
      _has(s, a) && l.push({
        key: a,
        value: s[a] + ""
      });
    }
  } else parseSearchParams(l, "string" == typeof s ? "?" === s.charAt(0) ? s.slice(1) : s : s + "");
},
    URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  append: function append(e, t) {
    validateArgumentsLength(arguments.length, 2);
    var n = getInternalParamsState(this);
    n.entries.push({
      key: e + "",
      value: t + ""
    }), n.updateURL();
  },
  "delete": function _delete(e) {
    validateArgumentsLength(arguments.length, 1);

    for (var t = getInternalParamsState(this), n = t.entries, r = e + "", i = 0; i < n.length;) {
      n[i].key === r ? n.splice(i, 1) : i++;
    }

    t.updateURL();
  },
  get: function get(e) {
    validateArgumentsLength(arguments.length, 1);

    for (var t = getInternalParamsState(this).entries, n = e + "", r = 0; r < t.length; r++) {
      if (t[r].key === n) return t[r].value;
    }

    return null;
  },
  getAll: function getAll(e) {
    validateArgumentsLength(arguments.length, 1);

    for (var t = getInternalParamsState(this).entries, n = e + "", r = [], i = 0; i < t.length; i++) {
      t[i].key === n && r.push(t[i].value);
    }

    return r;
  },
  has: function has(e) {
    validateArgumentsLength(arguments.length, 1);

    for (var t = getInternalParamsState(this).entries, n = e + "", r = 0; r < t.length;) {
      if (t[r++].key === n) return !0;
    }

    return !1;
  },
  set: function set(e, t) {
    validateArgumentsLength(arguments.length, 1);

    for (var n, r = getInternalParamsState(this), i = r.entries, o = !1, a = e + "", s = t + "", l = 0; l < i.length; l++) {
      (n = i[l]).key === a && (o ? i.splice(l--, 1) : (o = !0, n.value = s));
    }

    o || i.push({
      key: a,
      value: s
    }), r.updateURL();
  },
  sort: function sort() {
    var e,
        t,
        n,
        r = getInternalParamsState(this),
        i = r.entries,
        o = i.slice();

    for (i.length = 0, n = 0; n < o.length; n++) {
      for (e = o[n], t = 0; t < n; t++) {
        if (i[t].key > e.key) {
          i.splice(t, 0, e);
          break;
        }
      }

      t === n && i.push(e);
    }

    r.updateURL();
  },
  forEach: function forEach(e) {
    for (var t, n = getInternalParamsState(this).entries, r = bindContext(e, arguments.length > 1 ? arguments[1] : void 0, 3), i = 0; i < n.length;) {
      r((t = n[i++]).value, t.key, this);
    }
  },
  keys: function keys() {
    return new URLSearchParamsIterator(this, "keys");
  },
  values: function values() {
    return new URLSearchParamsIterator(this, "values");
  },
  entries: function entries() {
    return new URLSearchParamsIterator(this, "entries");
  }
}, {
  enumerable: !0
}), redefine(URLSearchParamsPrototype, ITERATOR$6, URLSearchParamsPrototype.entries), redefine(URLSearchParamsPrototype, "toString", function () {
  for (var e, t = getInternalParamsState(this).entries, n = [], r = 0; r < t.length;) {
    e = t[r++], n.push(serialize(e.key) + "=" + serialize(e.value));
  }

  return n.join("&");
}, {
  enumerable: !0
}), setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS), _export({
  global: !0,
  forced: !nativeUrl
}, {
  URLSearchParams: URLSearchParamsConstructor
});

var EOF,
    web_urlSearchParams = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
},
    codeAt = stringMultibyte.codeAt,
    NativeURL = global_1.URL,
    URLSearchParams$1 = web_urlSearchParams.URLSearchParams,
    getInternalSearchParamsState = web_urlSearchParams.getState,
    setInternalState$4 = internalState.set,
    getInternalURLState = internalState.getterFor("URL"),
    floor$3 = Math.floor,
    pow = Math.pow,
    INVALID_AUTHORITY = "Invalid authority",
    INVALID_SCHEME = "Invalid scheme",
    INVALID_HOST = "Invalid host",
    INVALID_PORT = "Invalid port",
    ALPHA = /[A-Za-z]/,
    ALPHANUMERIC = /[\d+\-.A-Za-z]/,
    DIGIT = /\d/,
    HEX_START = /^(0x|0X)/,
    OCT = /^[0-7]+$/,
    DEC = /^\d+$/,
    HEX = /^[\dA-Fa-f]+$/,
    FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%\/:?@[\\]]/,
    FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #\/:?@[\\]]/,
    LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,
    TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g,
    parseHost = function parseHost(e, t) {
  var n, r, i;

  if ("[" == t.charAt(0)) {
    if ("]" != t.charAt(t.length - 1)) return INVALID_HOST;
    if (!(n = parseIPv6(t.slice(1, -1)))) return INVALID_HOST;
    e.host = n;
  } else if (isSpecial(e)) {
    if (t = punycodeToAscii(t), FORBIDDEN_HOST_CODE_POINT.test(t)) return INVALID_HOST;
    if (null === (n = parseIPv4(t))) return INVALID_HOST;
    e.host = n;
  } else {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(t)) return INVALID_HOST;

    for (n = "", r = arrayFrom(t), i = 0; i < r.length; i++) {
      n += percentEncode(r[i], C0ControlPercentEncodeSet);
    }

    e.host = n;
  }
},
    parseIPv4 = function parseIPv4(e) {
  var t,
      n,
      r,
      i,
      o,
      a,
      s,
      l = e.split(".");
  if (l.length && "" == l[l.length - 1] && l.pop(), (t = l.length) > 4) return e;

  for (n = [], r = 0; r < t; r++) {
    if ("" == (i = l[r])) return e;
    if (o = 10, i.length > 1 && "0" == i.charAt(0) && (o = HEX_START.test(i) ? 16 : 8, i = i.slice(8 == o ? 1 : 2)), "" === i) a = 0;else {
      if (!(10 == o ? DEC : 8 == o ? OCT : HEX).test(i)) return e;
      a = parseInt(i, o);
    }
    n.push(a);
  }

  for (r = 0; r < t; r++) {
    if (a = n[r], r == t - 1) {
      if (a >= pow(256, 5 - t)) return null;
    } else if (a > 255) return null;
  }

  for (s = n.pop(), r = 0; r < n.length; r++) {
    s += n[r] * pow(256, 3 - r);
  }

  return s;
},
    parseIPv6 = function parseIPv6(e) {
  var t,
      n,
      r,
      i,
      o,
      a,
      s,
      l = [0, 0, 0, 0, 0, 0, 0, 0],
      c = 0,
      u = null,
      d = 0,
      h = function h() {
    return e.charAt(d);
  };

  if (":" == h()) {
    if (":" != e.charAt(1)) return;
    d += 2, u = ++c;
  }

  for (; h();) {
    if (8 == c) return;

    if (":" != h()) {
      for (t = n = 0; n < 4 && HEX.test(h());) {
        t = 16 * t + parseInt(h(), 16), d++, n++;
      }

      if ("." == h()) {
        if (0 == n) return;
        if (d -= n, c > 6) return;

        for (r = 0; h();) {
          if (i = null, r > 0) {
            if (!("." == h() && r < 4)) return;
            d++;
          }

          if (!DIGIT.test(h())) return;

          for (; DIGIT.test(h());) {
            if (o = parseInt(h(), 10), null === i) i = o;else {
              if (0 == i) return;
              i = 10 * i + o;
            }
            if (i > 255) return;
            d++;
          }

          l[c] = 256 * l[c] + i, 2 != ++r && 4 != r || c++;
        }

        if (4 != r) return;
        break;
      }

      if (":" == h()) {
        if (d++, !h()) return;
      } else if (h()) return;

      l[c++] = t;
    } else {
      if (null !== u) return;
      d++, u = ++c;
    }
  }

  if (null !== u) for (a = c - u, c = 7; 0 != c && a > 0;) {
    s = l[c], l[c--] = l[u + a - 1], l[u + --a] = s;
  } else if (8 != c) return;
  return l;
},
    findLongestZeroSequence = function findLongestZeroSequence(e) {
  for (var t = null, n = 1, r = null, i = 0, o = 0; o < 8; o++) {
    0 !== e[o] ? (i > n && (t = r, n = i), r = null, i = 0) : (null === r && (r = o), ++i);
  }

  return i > n && (t = r, n = i), t;
},
    serializeHost = function serializeHost(e) {
  var t, n, r, i;

  if ("number" == typeof e) {
    for (t = [], n = 0; n < 4; n++) {
      t.unshift(e % 256), e = floor$3(e / 256);
    }

    return t.join(".");
  }

  if ("object" == _typeof2(e)) {
    for (t = "", r = findLongestZeroSequence(e), n = 0; n < 8; n++) {
      i && 0 === e[n] || (i && (i = !1), r === n ? (t += n ? ":" : "::", i = !0) : (t += e[n].toString(16), n < 7 && (t += ":")));
    }

    return "[" + t + "]";
  }

  return e;
},
    C0ControlPercentEncodeSet = {},
    fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
  " ": 1,
  '"': 1,
  "<": 1,
  ">": 1,
  "`": 1
}),
    pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
  "#": 1,
  "?": 1,
  "{": 1,
  "}": 1
}),
    userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
  "/": 1,
  ":": 1,
  ";": 1,
  "=": 1,
  "@": 1,
  "[": 1,
  "\\": 1,
  "]": 1,
  "^": 1,
  "|": 1
}),
    percentEncode = function percentEncode(e, t) {
  var n = codeAt(e, 0);
  return n > 32 && n < 127 && !_has(t, e) ? e : encodeURIComponent(e);
},
    specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
},
    isSpecial = function isSpecial(e) {
  return _has(specialSchemes, e.scheme);
},
    includesCredentials = function includesCredentials(e) {
  return "" != e.username || "" != e.password;
},
    cannotHaveUsernamePasswordPort = function cannotHaveUsernamePasswordPort(e) {
  return !e.host || e.cannotBeABaseURL || "file" == e.scheme;
},
    isWindowsDriveLetter = function isWindowsDriveLetter(e, t) {
  var n;
  return 2 == e.length && ALPHA.test(e.charAt(0)) && (":" == (n = e.charAt(1)) || !t && "|" == n);
},
    startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(e) {
  var t;
  return e.length > 1 && isWindowsDriveLetter(e.slice(0, 2)) && (2 == e.length || "/" === (t = e.charAt(2)) || "\\" === t || "?" === t || "#" === t);
},
    shortenURLsPath = function shortenURLsPath(e) {
  var t = e.path,
      n = t.length;
  !n || "file" == e.scheme && 1 == n && isWindowsDriveLetter(t[0], !0) || t.pop();
},
    isSingleDot = function isSingleDot(e) {
  return "." === e || "%2e" === e.toLowerCase();
},
    isDoubleDot = function isDoubleDot(e) {
  return ".." === (e = e.toLowerCase()) || "%2e." === e || ".%2e" === e || "%2e%2e" === e;
},
    SCHEME_START = {},
    SCHEME = {},
    NO_SCHEME = {},
    SPECIAL_RELATIVE_OR_AUTHORITY = {},
    PATH_OR_AUTHORITY = {},
    RELATIVE = {},
    RELATIVE_SLASH = {},
    SPECIAL_AUTHORITY_SLASHES = {},
    SPECIAL_AUTHORITY_IGNORE_SLASHES = {},
    AUTHORITY = {},
    HOST = {},
    HOSTNAME = {},
    PORT = {},
    FILE = {},
    FILE_SLASH = {},
    FILE_HOST = {},
    PATH_START = {},
    PATH = {},
    CANNOT_BE_A_BASE_URL_PATH = {},
    QUERY = {},
    FRAGMENT = {},
    parseURL = function parseURL(e, t, n, r) {
  var i,
      o,
      a,
      s,
      l = n || SCHEME_START,
      c = 0,
      u = "",
      d = !1,
      h = !1,
      p = !1;

  for (n || (e.scheme = "", e.username = "", e.password = "", e.host = null, e.port = null, e.path = [], e.query = null, e.fragment = null, e.cannotBeABaseURL = !1, t = t.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "")), t = t.replace(TAB_AND_NEW_LINE, ""), i = arrayFrom(t); c <= i.length;) {
    switch (o = i[c], l) {
      case SCHEME_START:
        if (!o || !ALPHA.test(o)) {
          if (n) return INVALID_SCHEME;
          l = NO_SCHEME;
          continue;
        }

        u += o.toLowerCase(), l = SCHEME;
        break;

      case SCHEME:
        if (o && (ALPHANUMERIC.test(o) || "+" == o || "-" == o || "." == o)) u += o.toLowerCase();else {
          if (":" != o) {
            if (n) return INVALID_SCHEME;
            u = "", l = NO_SCHEME, c = 0;
            continue;
          }

          if (n && (isSpecial(e) != _has(specialSchemes, u) || "file" == u && (includesCredentials(e) || null !== e.port) || "file" == e.scheme && !e.host)) return;
          if (e.scheme = u, n) return void (isSpecial(e) && specialSchemes[e.scheme] == e.port && (e.port = null));
          u = "", "file" == e.scheme ? l = FILE : isSpecial(e) && r && r.scheme == e.scheme ? l = SPECIAL_RELATIVE_OR_AUTHORITY : isSpecial(e) ? l = SPECIAL_AUTHORITY_SLASHES : "/" == i[c + 1] ? (l = PATH_OR_AUTHORITY, c++) : (e.cannotBeABaseURL = !0, e.path.push(""), l = CANNOT_BE_A_BASE_URL_PATH);
        }
        break;

      case NO_SCHEME:
        if (!r || r.cannotBeABaseURL && "#" != o) return INVALID_SCHEME;

        if (r.cannotBeABaseURL && "#" == o) {
          e.scheme = r.scheme, e.path = r.path.slice(), e.query = r.query, e.fragment = "", e.cannotBeABaseURL = !0, l = FRAGMENT;
          break;
        }

        l = "file" == r.scheme ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if ("/" != o || "/" != i[c + 1]) {
          l = RELATIVE;
          continue;
        }

        l = SPECIAL_AUTHORITY_IGNORE_SLASHES, c++;
        break;

      case PATH_OR_AUTHORITY:
        if ("/" == o) {
          l = AUTHORITY;
          break;
        }

        l = PATH;
        continue;

      case RELATIVE:
        if (e.scheme = r.scheme, o == EOF) e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = r.query;else if ("/" == o || "\\" == o && isSpecial(e)) l = RELATIVE_SLASH;else if ("?" == o) e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = "", l = QUERY;else {
          if ("#" != o) {
            e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.path.pop(), l = PATH;
            continue;
          }

          e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = r.query, e.fragment = "", l = FRAGMENT;
        }
        break;

      case RELATIVE_SLASH:
        if (!isSpecial(e) || "/" != o && "\\" != o) {
          if ("/" != o) {
            e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, l = PATH;
            continue;
          }

          l = AUTHORITY;
        } else l = SPECIAL_AUTHORITY_IGNORE_SLASHES;

        break;

      case SPECIAL_AUTHORITY_SLASHES:
        if (l = SPECIAL_AUTHORITY_IGNORE_SLASHES, "/" != o || "/" != u.charAt(c + 1)) continue;
        c++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if ("/" != o && "\\" != o) {
          l = AUTHORITY;
          continue;
        }

        break;

      case AUTHORITY:
        if ("@" == o) {
          d && (u = "%40" + u), d = !0, a = arrayFrom(u);

          for (var f = 0; f < a.length; f++) {
            var m = a[f];

            if (":" != m || p) {
              var g = percentEncode(m, userinfoPercentEncodeSet);
              p ? e.password += g : e.username += g;
            } else p = !0;
          }

          u = "";
        } else if (o == EOF || "/" == o || "?" == o || "#" == o || "\\" == o && isSpecial(e)) {
          if (d && "" == u) return INVALID_AUTHORITY;
          c -= arrayFrom(u).length + 1, u = "", l = HOST;
        } else u += o;

        break;

      case HOST:
      case HOSTNAME:
        if (n && "file" == e.scheme) {
          l = FILE_HOST;
          continue;
        }

        if (":" != o || h) {
          if (o == EOF || "/" == o || "?" == o || "#" == o || "\\" == o && isSpecial(e)) {
            if (isSpecial(e) && "" == u) return INVALID_HOST;
            if (n && "" == u && (includesCredentials(e) || null !== e.port)) return;
            if (s = parseHost(e, u)) return s;
            if (u = "", l = PATH_START, n) return;
            continue;
          }

          "[" == o ? h = !0 : "]" == o && (h = !1), u += o;
        } else {
          if ("" == u) return INVALID_HOST;
          if (s = parseHost(e, u)) return s;
          if (u = "", l = PORT, n == HOSTNAME) return;
        }

        break;

      case PORT:
        if (!DIGIT.test(o)) {
          if (o == EOF || "/" == o || "?" == o || "#" == o || "\\" == o && isSpecial(e) || n) {
            if ("" != u) {
              var y = parseInt(u, 10);
              if (y > 65535) return INVALID_PORT;
              e.port = isSpecial(e) && y === specialSchemes[e.scheme] ? null : y, u = "";
            }

            if (n) return;
            l = PATH_START;
            continue;
          }

          return INVALID_PORT;
        }

        u += o;
        break;

      case FILE:
        if (e.scheme = "file", "/" == o || "\\" == o) l = FILE_SLASH;else {
          if (!r || "file" != r.scheme) {
            l = PATH;
            continue;
          }

          if (o == EOF) e.host = r.host, e.path = r.path.slice(), e.query = r.query;else if ("?" == o) e.host = r.host, e.path = r.path.slice(), e.query = "", l = QUERY;else {
            if ("#" != o) {
              startsWithWindowsDriveLetter(i.slice(c).join("")) || (e.host = r.host, e.path = r.path.slice(), shortenURLsPath(e)), l = PATH;
              continue;
            }

            e.host = r.host, e.path = r.path.slice(), e.query = r.query, e.fragment = "", l = FRAGMENT;
          }
        }
        break;

      case FILE_SLASH:
        if ("/" == o || "\\" == o) {
          l = FILE_HOST;
          break;
        }

        r && "file" == r.scheme && !startsWithWindowsDriveLetter(i.slice(c).join("")) && (isWindowsDriveLetter(r.path[0], !0) ? e.path.push(r.path[0]) : e.host = r.host), l = PATH;
        continue;

      case FILE_HOST:
        if (o == EOF || "/" == o || "\\" == o || "?" == o || "#" == o) {
          if (!n && isWindowsDriveLetter(u)) l = PATH;else if ("" == u) {
            if (e.host = "", n) return;
            l = PATH_START;
          } else {
            if (s = parseHost(e, u)) return s;
            if ("localhost" == e.host && (e.host = ""), n) return;
            u = "", l = PATH_START;
          }
          continue;
        }

        u += o;
        break;

      case PATH_START:
        if (isSpecial(e)) {
          if (l = PATH, "/" != o && "\\" != o) continue;
        } else if (n || "?" != o) {
          if (n || "#" != o) {
            if (o != EOF && (l = PATH, "/" != o)) continue;
          } else e.fragment = "", l = FRAGMENT;
        } else e.query = "", l = QUERY;

        break;

      case PATH:
        if (o == EOF || "/" == o || "\\" == o && isSpecial(e) || !n && ("?" == o || "#" == o)) {
          if (isDoubleDot(u) ? (shortenURLsPath(e), "/" == o || "\\" == o && isSpecial(e) || e.path.push("")) : isSingleDot(u) ? "/" == o || "\\" == o && isSpecial(e) || e.path.push("") : ("file" == e.scheme && !e.path.length && isWindowsDriveLetter(u) && (e.host && (e.host = ""), u = u.charAt(0) + ":"), e.path.push(u)), u = "", "file" == e.scheme && (o == EOF || "?" == o || "#" == o)) for (; e.path.length > 1 && "" === e.path[0];) {
            e.path.shift();
          }
          "?" == o ? (e.query = "", l = QUERY) : "#" == o && (e.fragment = "", l = FRAGMENT);
        } else u += percentEncode(o, pathPercentEncodeSet);

        break;

      case CANNOT_BE_A_BASE_URL_PATH:
        "?" == o ? (e.query = "", l = QUERY) : "#" == o ? (e.fragment = "", l = FRAGMENT) : o != EOF && (e.path[0] += percentEncode(o, C0ControlPercentEncodeSet));
        break;

      case QUERY:
        n || "#" != o ? o != EOF && ("'" == o && isSpecial(e) ? e.query += "%27" : e.query += "#" == o ? "%23" : percentEncode(o, C0ControlPercentEncodeSet)) : (e.fragment = "", l = FRAGMENT);
        break;

      case FRAGMENT:
        o != EOF && (e.fragment += percentEncode(o, fragmentPercentEncodeSet));
    }

    c++;
  }
},
    URLConstructor = function URLConstructor(e) {
  var t,
      n,
      r = anInstance(this, URLConstructor, "URL"),
      i = arguments.length > 1 ? arguments[1] : void 0,
      o = String(e),
      a = setInternalState$4(r, {
    type: "URL"
  });
  if (void 0 !== i) if (i instanceof URLConstructor) t = getInternalURLState(i);else if (n = parseURL(t = {}, String(i))) throw TypeError(n);
  if (n = parseURL(a, o, null, t)) throw TypeError(n);
  var s = a.searchParams = new URLSearchParams$1(),
      l = getInternalSearchParamsState(s);
  l.updateSearchParams(a.query), l.updateURL = function () {
    a.query = String(s) || null;
  }, descriptors || (r.href = serializeURL.call(r), r.origin = getOrigin.call(r), r.protocol = getProtocol.call(r), r.username = getUsername.call(r), r.password = getPassword.call(r), r.host = getHost.call(r), r.hostname = getHostname.call(r), r.port = getPort.call(r), r.pathname = getPathname.call(r), r.search = getSearch.call(r), r.searchParams = getSearchParams.call(r), r.hash = getHash.call(r));
},
    URLPrototype = URLConstructor.prototype,
    serializeURL = function serializeURL() {
  var e = getInternalURLState(this),
      t = e.scheme,
      n = e.username,
      r = e.password,
      i = e.host,
      o = e.port,
      a = e.path,
      s = e.query,
      l = e.fragment,
      c = t + ":";
  return null !== i ? (c += "//", includesCredentials(e) && (c += n + (r ? ":" + r : "") + "@"), c += serializeHost(i), null !== o && (c += ":" + o)) : "file" == t && (c += "//"), c += e.cannotBeABaseURL ? a[0] : a.length ? "/" + a.join("/") : "", null !== s && (c += "?" + s), null !== l && (c += "#" + l), c;
},
    getOrigin = function getOrigin() {
  var e = getInternalURLState(this),
      t = e.scheme,
      n = e.port;
  if ("blob" == t) try {
    return new URL(t.path[0]).origin;
  } catch (e) {
    return "null";
  }
  return "file" != t && isSpecial(e) ? t + "://" + serializeHost(e.host) + (null !== n ? ":" + n : "") : "null";
},
    getProtocol = function getProtocol() {
  return getInternalURLState(this).scheme + ":";
},
    getUsername = function getUsername() {
  return getInternalURLState(this).username;
},
    getPassword = function getPassword() {
  return getInternalURLState(this).password;
},
    getHost = function getHost() {
  var e = getInternalURLState(this),
      t = e.host,
      n = e.port;
  return null === t ? "" : null === n ? serializeHost(t) : serializeHost(t) + ":" + n;
},
    getHostname = function getHostname() {
  var e = getInternalURLState(this).host;
  return null === e ? "" : serializeHost(e);
},
    getPort = function getPort() {
  var e = getInternalURLState(this).port;
  return null === e ? "" : String(e);
},
    getPathname = function getPathname() {
  var e = getInternalURLState(this),
      t = e.path;
  return e.cannotBeABaseURL ? t[0] : t.length ? "/" + t.join("/") : "";
},
    getSearch = function getSearch() {
  var e = getInternalURLState(this).query;
  return e ? "?" + e : "";
},
    getSearchParams = function getSearchParams() {
  return getInternalURLState(this).searchParams;
},
    getHash = function getHash() {
  var e = getInternalURLState(this).fragment;
  return e ? "#" + e : "";
},
    accessorDescriptor = function accessorDescriptor(e, t) {
  return {
    get: e,
    set: t,
    configurable: !0,
    enumerable: !0
  };
};

if (descriptors && objectDefineProperties(URLPrototype, {
  href: accessorDescriptor(serializeURL, function (e) {
    var t = getInternalURLState(this),
        n = String(e),
        r = parseURL(t, n);
    if (r) throw TypeError(r);
    getInternalSearchParamsState(t.searchParams).updateSearchParams(t.query);
  }),
  origin: accessorDescriptor(getOrigin),
  protocol: accessorDescriptor(getProtocol, function (e) {
    var t = getInternalURLState(this);
    parseURL(t, String(e) + ":", SCHEME_START);
  }),
  username: accessorDescriptor(getUsername, function (e) {
    var t = getInternalURLState(this),
        n = arrayFrom(String(e));

    if (!cannotHaveUsernamePasswordPort(t)) {
      t.username = "";

      for (var r = 0; r < n.length; r++) {
        t.username += percentEncode(n[r], userinfoPercentEncodeSet);
      }
    }
  }),
  password: accessorDescriptor(getPassword, function (e) {
    var t = getInternalURLState(this),
        n = arrayFrom(String(e));

    if (!cannotHaveUsernamePasswordPort(t)) {
      t.password = "";

      for (var r = 0; r < n.length; r++) {
        t.password += percentEncode(n[r], userinfoPercentEncodeSet);
      }
    }
  }),
  host: accessorDescriptor(getHost, function (e) {
    var t = getInternalURLState(this);
    t.cannotBeABaseURL || parseURL(t, String(e), HOST);
  }),
  hostname: accessorDescriptor(getHostname, function (e) {
    var t = getInternalURLState(this);
    t.cannotBeABaseURL || parseURL(t, String(e), HOSTNAME);
  }),
  port: accessorDescriptor(getPort, function (e) {
    var t = getInternalURLState(this);
    cannotHaveUsernamePasswordPort(t) || ("" == (e = String(e)) ? t.port = null : parseURL(t, e, PORT));
  }),
  pathname: accessorDescriptor(getPathname, function (e) {
    var t = getInternalURLState(this);
    t.cannotBeABaseURL || (t.path = [], parseURL(t, e + "", PATH_START));
  }),
  search: accessorDescriptor(getSearch, function (e) {
    var t = getInternalURLState(this);
    "" == (e = String(e)) ? t.query = null : ("?" == e.charAt(0) && (e = e.slice(1)), t.query = "", parseURL(t, e, QUERY)), getInternalSearchParamsState(t.searchParams).updateSearchParams(t.query);
  }),
  searchParams: accessorDescriptor(getSearchParams),
  hash: accessorDescriptor(getHash, function (e) {
    var t = getInternalURLState(this);
    "" != (e = String(e)) ? ("#" == e.charAt(0) && (e = e.slice(1)), t.fragment = "", parseURL(t, e, FRAGMENT)) : t.fragment = null;
  })
}), redefine(URLPrototype, "toJSON", function () {
  return serializeURL.call(this);
}, {
  enumerable: !0
}), redefine(URLPrototype, "toString", function () {
  return serializeURL.call(this);
}, {
  enumerable: !0
}), NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL,
      nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  nativeCreateObjectURL && redefine(URLConstructor, "createObjectURL", function (e) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  }), nativeRevokeObjectURL && redefine(URLConstructor, "revokeObjectURL", function (e) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

function _typeof(e) {
  return (_typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
    return _typeof2(e);
  } : function (e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof2(e);
  })(e);
}

function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}

function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var r = t[n];
    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
  }
}

function _createClass(e, t, n) {
  return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e;
}

function _defineProperty(e, t, n) {
  return t in e ? Object.defineProperty(e, t, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = n, e;
}

function _slicedToArray(e, t) {
  return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _nonIterableRest();
}

function _toConsumableArray(e) {
  return _arrayWithoutHoles(e) || _iterableToArray(e) || _nonIterableSpread();
}

function _arrayWithoutHoles(e) {
  if (Array.isArray(e)) {
    for (var t = 0, n = new Array(e.length); t < e.length; t++) {
      n[t] = e[t];
    }

    return n;
  }
}

function _arrayWithHoles(e) {
  if (Array.isArray(e)) return e;
}

function _iterableToArray(e) {
  if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
}

function _iterableToArrayLimit(e, t) {
  var n = [],
      r = !0,
      i = !1,
      o = void 0;

  try {
    for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {
      ;
    }
  } catch (e) {
    i = !0, o = e;
  } finally {
    try {
      r || null == s["return"] || s["return"]();
    } finally {
      if (i) throw o;
    }
  }

  return n;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

setToStringTag(URLConstructor, "URL"), _export({
  global: !0,
  forced: !nativeUrl,
  sham: !descriptors
}, {
  URL: URLConstructor
}), function (e) {
  var t = function () {
    try {
      return !!Symbol.iterator;
    } catch (e) {
      return !1;
    }
  }(),
      n = function n(e) {
    var n = {
      next: function next() {
        var t = e.shift();
        return {
          done: void 0 === t,
          value: t
        };
      }
    };
    return t && (n[Symbol.iterator] = function () {
      return n;
    }), n;
  },
      r = function r(e) {
    return encodeURIComponent(e).replace(/%20/g, "+");
  },
      i = function i(e) {
    return decodeURIComponent(String(e).replace(/\+/g, " "));
  };

  "URLSearchParams" in e && "a=1" === new e.URLSearchParams("?a=1").toString() || function () {
    var i = function e(t) {
      Object.defineProperty(this, "_entries", {
        writable: !0,
        value: {}
      });

      var n = _typeof(t);

      if ("undefined" === n) ;else if ("string" === n) "" !== t && this._fromString(t);else if (t instanceof e) {
        var r = this;
        t.forEach(function (e, t) {
          r.append(t, e);
        });
      } else {
        if (null === t || "object" !== n) throw new TypeError("Unsupported input's type for URLSearchParams");
        if ("[object Array]" === Object.prototype.toString.call(t)) for (var i = 0; i < t.length; i++) {
          var o = t[i];
          if ("[object Array]" !== Object.prototype.toString.call(o) && 2 === o.length) throw new TypeError("Expected [string, any] as entry at index " + i + " of URLSearchParams's input");
          this.append(o[0], o[1]);
        } else for (var a in t) {
          t.hasOwnProperty(a) && this.append(a, t[a]);
        }
      }
    },
        o = i.prototype;

    o.append = function (e, t) {
      e in this._entries ? this._entries[e].push(String(t)) : this._entries[e] = [String(t)];
    }, o["delete"] = function (e) {
      delete this._entries[e];
    }, o.get = function (e) {
      return e in this._entries ? this._entries[e][0] : null;
    }, o.getAll = function (e) {
      return e in this._entries ? this._entries[e].slice(0) : [];
    }, o.has = function (e) {
      return e in this._entries;
    }, o.set = function (e, t) {
      this._entries[e] = [String(t)];
    }, o.forEach = function (e, t) {
      var n;

      for (var r in this._entries) {
        if (this._entries.hasOwnProperty(r)) {
          n = this._entries[r];

          for (var i = 0; i < n.length; i++) {
            e.call(t, n[i], r, this);
          }
        }
      }
    }, o.keys = function () {
      var e = [];
      return this.forEach(function (t, n) {
        e.push(n);
      }), n(e);
    }, o.values = function () {
      var e = [];
      return this.forEach(function (t) {
        e.push(t);
      }), n(e);
    }, o.entries = function () {
      var e = [];
      return this.forEach(function (t, n) {
        e.push([n, t]);
      }), n(e);
    }, t && (o[Symbol.iterator] = o.entries), o.toString = function () {
      var e = [];
      return this.forEach(function (t, n) {
        e.push(r(n) + "=" + r(t));
      }), e.join("&");
    }, e.URLSearchParams = i;
  }();
  var o = e.URLSearchParams.prototype;
  "function" != typeof o.sort && (o.sort = function () {
    var e = this,
        t = [];
    this.forEach(function (n, r) {
      t.push([r, n]), e._entries || e["delete"](r);
    }), t.sort(function (e, t) {
      return e[0] < t[0] ? -1 : e[0] > t[0] ? 1 : 0;
    }), e._entries && (e._entries = {});

    for (var n = 0; n < t.length; n++) {
      this.append(t[n][0], t[n][1]);
    }
  }), "function" != typeof o._fromString && Object.defineProperty(o, "_fromString", {
    enumerable: !1,
    configurable: !1,
    writable: !1,
    value: function value(e) {
      if (this._entries) this._entries = {};else {
        var t = [];
        this.forEach(function (e, n) {
          t.push(n);
        });

        for (var n = 0; n < t.length; n++) {
          this["delete"](t[n]);
        }
      }
      var r,
          o = (e = e.replace(/^\?/, "")).split("&");

      for (n = 0; n < o.length; n++) {
        r = o[n].split("="), this.append(i(r[0]), r.length > 1 ? i(r[1]) : "");
      }
    }
  });
}(void 0 !== commonjsGlobal ? commonjsGlobal : "undefined" != typeof window ? window : "undefined" != typeof self ? self : commonjsGlobal), function (e) {
  if (function () {
    try {
      var t = new e.URL("b", "http://a");
      return t.pathname = "c%20d", "http://a/c%20d" === t.href && t.searchParams;
    } catch (e) {
      return !1;
    }
  }() || function () {
    var t = e.URL,
        n = function n(t, _n) {
      "string" != typeof t && (t = String(t));
      var r,
          i = document;

      if (_n && (void 0 === e.location || _n !== e.location.href)) {
        (r = (i = document.implementation.createHTMLDocument("")).createElement("base")).href = _n, i.head.appendChild(r);

        try {
          if (0 !== r.href.indexOf(_n)) throw new Error(r.href);
        } catch (e) {
          throw new Error("URL unable to set base " + _n + " due to " + e);
        }
      }

      var o = i.createElement("a");
      if (o.href = t, r && (i.body.appendChild(o), o.href = o.href), ":" === o.protocol || !/:/.test(o.href)) throw new TypeError("Invalid URL");
      Object.defineProperty(this, "_anchorElement", {
        value: o
      });
      var a = new e.URLSearchParams(this.search),
          s = !0,
          l = !0,
          c = this;
      ["append", "delete", "set"].forEach(function (e) {
        var t = a[e];

        a[e] = function () {
          t.apply(a, arguments), s && (l = !1, c.search = a.toString(), l = !0);
        };
      }), Object.defineProperty(this, "searchParams", {
        value: a,
        enumerable: !0
      });
      var u = void 0;
      Object.defineProperty(this, "_updateSearchParams", {
        enumerable: !1,
        configurable: !1,
        writable: !1,
        value: function value() {
          this.search !== u && (u = this.search, l && (s = !1, this.searchParams._fromString(this.search), s = !0));
        }
      });
    },
        r = n.prototype;

    ["hash", "host", "hostname", "port", "protocol"].forEach(function (e) {
      !function (e) {
        Object.defineProperty(r, e, {
          get: function get() {
            return this._anchorElement[e];
          },
          set: function set(t) {
            this._anchorElement[e] = t;
          },
          enumerable: !0
        });
      }(e);
    }), Object.defineProperty(r, "search", {
      get: function get() {
        return this._anchorElement.search;
      },
      set: function set(e) {
        this._anchorElement.search = e, this._updateSearchParams();
      },
      enumerable: !0
    }), Object.defineProperties(r, {
      toString: {
        get: function get() {
          var e = this;
          return function () {
            return e.href;
          };
        }
      },
      href: {
        get: function get() {
          return this._anchorElement.href.replace(/\?$/, "");
        },
        set: function set(e) {
          this._anchorElement.href = e, this._updateSearchParams();
        },
        enumerable: !0
      },
      pathname: {
        get: function get() {
          return this._anchorElement.pathname.replace(/(^\/?)/, "/");
        },
        set: function set(e) {
          this._anchorElement.pathname = e;
        },
        enumerable: !0
      },
      origin: {
        get: function get() {
          var e = {
            "http:": 80,
            "https:": 443,
            "ftp:": 21
          }[this._anchorElement.protocol],
              t = this._anchorElement.port != e && "" !== this._anchorElement.port;
          return this._anchorElement.protocol + "//" + this._anchorElement.hostname + (t ? ":" + this._anchorElement.port : "");
        },
        enumerable: !0
      },
      password: {
        get: function get() {
          return "";
        },
        set: function set(e) {},
        enumerable: !0
      },
      username: {
        get: function get() {
          return "";
        },
        set: function set(e) {},
        enumerable: !0
      }
    }), n.createObjectURL = function (e) {
      return t.createObjectURL.apply(t, arguments);
    }, n.revokeObjectURL = function (e) {
      return t.revokeObjectURL.apply(t, arguments);
    }, e.URL = n;
  }(), void 0 !== e.location && !("origin" in e.location)) {
    var t = function t() {
      return e.location.protocol + "//" + e.location.hostname + (e.location.port ? ":" + e.location.port : "");
    };

    try {
      Object.defineProperty(e.location, "origin", {
        get: t,
        enumerable: !0
      });
    } catch (n) {
      setInterval(function () {
        e.location.origin = t();
      }, 100);
    }
  }
}(void 0 !== commonjsGlobal ? commonjsGlobal : "undefined" != typeof window ? window : "undefined" != typeof self ? self : commonjsGlobal);

var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable"),
    MAX_SAFE_INTEGER = 9007199254740991,
    MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded",
    IS_CONCAT_SPREADABLE_SUPPORT = !fails(function () {
  var e = [];
  return e[IS_CONCAT_SPREADABLE] = !1, e.concat()[0] !== e;
}),
    SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat"),
    isConcatSpreadable = function isConcatSpreadable(e) {
  if (!isObject(e)) return !1;
  var t = e[IS_CONCAT_SPREADABLE];
  return void 0 !== t ? !!t : isArray(e);
},
    FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

_export({
  target: "Array",
  proto: !0,
  forced: FORCED
}, {
  concat: function concat(e) {
    var t,
        n,
        r,
        i,
        o,
        a = toObject(this),
        s = arraySpeciesCreate(a, 0),
        l = 0;

    for (t = -1, r = arguments.length; t < r; t++) {
      if (o = -1 === t ? a : arguments[t], isConcatSpreadable(o)) {
        if (l + (i = toLength(o.length)) > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

        for (n = 0; n < i; n++, l++) {
          n in o && createProperty(s, l, o[n]);
        }
      } else {
        if (l >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(s, l++, o);
      }
    }

    return s.length = l, s;
  }
});

var $filter = arrayIteration.filter;

_export({
  target: "Array",
  proto: !0,
  forced: !arrayMethodHasSpeciesSupport("filter")
}, {
  filter: function filter(e) {
    return $filter(this, e, arguments.length > 1 ? arguments[1] : void 0);
  }
});

var $find = arrayIteration.find,
    FIND = "find",
    SKIPS_HOLES = !0;
FIND in [] && Array(1)[FIND](function () {
  SKIPS_HOLES = !1;
}), _export({
  target: "Array",
  proto: !0,
  forced: SKIPS_HOLES
}, {
  find: function find(e) {
    return $find(this, e, arguments.length > 1 ? arguments[1] : void 0);
  }
}), addToUnscopables(FIND);
var ITERATOR$7 = wellKnownSymbol("iterator"),
    SAFE_CLOSING = !1;

try {
  var called = 0,
      iteratorWithReturn = {
    next: function next() {
      return {
        done: !!called++
      };
    },
    "return": function _return() {
      SAFE_CLOSING = !0;
    }
  };
  iteratorWithReturn[ITERATOR$7] = function () {
    return this;
  }, Array.from(iteratorWithReturn, function () {
    throw 2;
  });
} catch (e) {}

var checkCorrectnessOfIteration = function checkCorrectnessOfIteration(e, t) {
  if (!t && !SAFE_CLOSING) return !1;
  var n = !1;

  try {
    var r = {};
    r[ITERATOR$7] = function () {
      return {
        next: function next() {
          return {
            done: n = !0
          };
        }
      };
    }, e(r);
  } catch (e) {}

  return n;
},
    INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (e) {
  Array.from(e);
});

_export({
  target: "Array",
  stat: !0,
  forced: INCORRECT_ITERATION
}, {
  from: arrayFrom
});

var $includes = arrayIncludes.includes;
_export({
  target: "Array",
  proto: !0
}, {
  includes: function includes(e) {
    return $includes(this, e, arguments.length > 1 ? arguments[1] : void 0);
  }
}), addToUnscopables("includes");
var $map = arrayIteration.map;

_export({
  target: "Array",
  proto: !0,
  forced: !arrayMethodHasSpeciesSupport("map")
}, {
  map: function map(e) {
    return $map(this, e, arguments.length > 1 ? arguments[1] : void 0);
  }
});

var inheritIfRequired = function inheritIfRequired(e, t, n) {
  var r, i;
  return objectSetPrototypeOf && "function" == typeof (r = t.constructor) && r !== n && isObject(i = r.prototype) && i !== n.prototype && objectSetPrototypeOf(e, i), e;
},
    whitespaces = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF",
    whitespace = "[" + whitespaces + "]",
    ltrim = RegExp("^" + whitespace + whitespace + "*"),
    rtrim = RegExp(whitespace + whitespace + "*$"),
    createMethod$3 = function createMethod$3(e) {
  return function (t) {
    var n = String(requireObjectCoercible(t));
    return 1 & e && (n = n.replace(ltrim, "")), 2 & e && (n = n.replace(rtrim, "")), n;
  };
},
    stringTrim = {
  start: createMethod$3(1),
  end: createMethod$3(2),
  trim: createMethod$3(3)
},
    getOwnPropertyNames = objectGetOwnPropertyNames.f,
    getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f,
    defineProperty$3 = objectDefineProperty.f,
    trim = stringTrim.trim,
    NUMBER = "Number",
    NativeNumber = global_1[NUMBER],
    NumberPrototype = NativeNumber.prototype,
    BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER,
    toNumber = function toNumber(e) {
  var t,
      n,
      r,
      i,
      o,
      a,
      s,
      l,
      c = toPrimitive(e, !1);
  if ("string" == typeof c && c.length > 2) if (43 === (t = (c = trim(c)).charCodeAt(0)) || 45 === t) {
    if (88 === (n = c.charCodeAt(2)) || 120 === n) return NaN;
  } else if (48 === t) {
    switch (c.charCodeAt(1)) {
      case 66:
      case 98:
        r = 2, i = 49;
        break;

      case 79:
      case 111:
        r = 8, i = 55;
        break;

      default:
        return +c;
    }

    for (a = (o = c.slice(2)).length, s = 0; s < a; s++) {
      if ((l = o.charCodeAt(s)) < 48 || l > i) return NaN;
    }

    return parseInt(o, r);
  }
  return +c;
};

if (isForced_1(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
  for (var key, NumberWrapper = function NumberWrapper(e) {
    var t = arguments.length < 1 ? 0 : e,
        n = this;
    return n instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function () {
      NumberPrototype.valueOf.call(n);
    }) : classofRaw(n) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(t)), n, NumberWrapper) : toNumber(t);
  }, keys$1 = descriptors ? getOwnPropertyNames(NativeNumber) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), j = 0; keys$1.length > j; j++) {
    _has(NativeNumber, key = keys$1[j]) && !_has(NumberWrapper, key) && defineProperty$3(NumberWrapper, key, getOwnPropertyDescriptor$2(NativeNumber, key));
  }

  NumberWrapper.prototype = NumberPrototype, NumberPrototype.constructor = NumberWrapper, redefine(global_1, NUMBER, NumberWrapper);
}

var FAILS_ON_PRIMITIVES = fails(function () {
  objectKeys(1);
});

_export({
  target: "Object",
  stat: !0,
  forced: FAILS_ON_PRIMITIVES
}, {
  keys: function keys(e) {
    return objectKeys(toObject(e));
  }
});

var notARegexp = function notARegexp(e) {
  if (isRegexp(e)) throw TypeError("The method doesn't accept regular expressions");
  return e;
},
    MATCH$1 = wellKnownSymbol("match"),
    correctIsRegexpLogic = function correctIsRegexpLogic(e) {
  var t = /./;

  try {
    "/./"[e](t);
  } catch (n) {
    try {
      return t[MATCH$1] = !1, "/./"[e](t);
    } catch (e) {}
  }

  return !1;
};

_export({
  target: "String",
  proto: !0,
  forced: !correctIsRegexpLogic("includes")
}, {
  includes: function includes(e) {
    return !!~String(requireObjectCoercible(this)).indexOf(notARegexp(e), arguments.length > 1 ? arguments[1] : void 0);
  }
});

var freezing = !fails(function () {
  return Object.isExtensible(Object.preventExtensions({}));
}),
    internalMetadata = createCommonjsModule(function (e) {
  var t = objectDefineProperty.f,
      n = uid("meta"),
      r = 0,
      i = Object.isExtensible || function () {
    return !0;
  },
      o = function o(e) {
    t(e, n, {
      value: {
        objectID: "O" + ++r,
        weakData: {}
      }
    });
  },
      a = e.exports = {
    REQUIRED: !1,
    fastKey: function fastKey(e, t) {
      if (!isObject(e)) return "symbol" == _typeof2(e) ? e : ("string" == typeof e ? "S" : "P") + e;

      if (!_has(e, n)) {
        if (!i(e)) return "F";
        if (!t) return "E";
        o(e);
      }

      return e[n].objectID;
    },
    getWeakData: function getWeakData(e, t) {
      if (!_has(e, n)) {
        if (!i(e)) return !0;
        if (!t) return !1;
        o(e);
      }

      return e[n].weakData;
    },
    onFreeze: function onFreeze(e) {
      return freezing && a.REQUIRED && i(e) && !_has(e, n) && o(e), e;
    }
  };

  hiddenKeys[n] = !0;
}),
    internalMetadata_1 = internalMetadata.REQUIRED,
    internalMetadata_2 = internalMetadata.fastKey,
    internalMetadata_3 = internalMetadata.getWeakData,
    internalMetadata_4 = internalMetadata.onFreeze,
    iterate_1 = createCommonjsModule(function (e) {
  var t = function t(e, _t3) {
    this.stopped = e, this.result = _t3;
  };

  (e.exports = function (e, n, r, i, o) {
    var a,
        s,
        l,
        c,
        u,
        d,
        h = bindContext(n, r, i ? 2 : 1);
    if (o) a = e;else {
      if ("function" != typeof (s = getIteratorMethod(e))) throw TypeError("Target is not iterable");

      if (isArrayIteratorMethod(s)) {
        for (l = 0, c = toLength(e.length); c > l; l++) {
          if ((u = i ? h(anObject(d = e[l])[0], d[1]) : h(e[l])) && u instanceof t) return u;
        }

        return new t(!1);
      }

      a = s.call(e);
    }

    for (; !(d = a.next()).done;) {
      if ((u = callWithSafeIterationClosing(a, h, d.value, i)) && u instanceof t) return u;
    }

    return new t(!1);
  }).stop = function (e) {
    return new t(!0, e);
  };
}),
    collection = function collection(e, t, n, r, i) {
  var o = global_1[e],
      a = o && o.prototype,
      s = o,
      l = r ? "set" : "add",
      c = {},
      u = function u(e) {
    var t = a[e];
    redefine(a, e, "add" == e ? function (e) {
      return t.call(this, 0 === e ? 0 : e), this;
    } : "delete" == e ? function (e) {
      return !(i && !isObject(e)) && t.call(this, 0 === e ? 0 : e);
    } : "get" == e ? function (e) {
      return i && !isObject(e) ? void 0 : t.call(this, 0 === e ? 0 : e);
    } : "has" == e ? function (e) {
      return !(i && !isObject(e)) && t.call(this, 0 === e ? 0 : e);
    } : function (e, n) {
      return t.call(this, 0 === e ? 0 : e, n), this;
    });
  };

  if (isForced_1(e, "function" != typeof o || !(i || a.forEach && !fails(function () {
    new o().entries().next();
  })))) s = n.getConstructor(t, e, r, l), internalMetadata.REQUIRED = !0;else if (isForced_1(e, !0)) {
    var d = new s(),
        h = d[l](i ? {} : -0, 1) != d,
        p = fails(function () {
      d.has(1);
    }),
        f = checkCorrectnessOfIteration(function (e) {
      new o(e);
    }),
        m = !i && fails(function () {
      for (var e = new o(), t = 5; t--;) {
        e[l](t, t);
      }

      return !e.has(-0);
    });
    f || ((s = t(function (t, n) {
      anInstance(t, s, e);
      var i = inheritIfRequired(new o(), t, s);
      return null != n && iterate_1(n, i[l], i, r), i;
    })).prototype = a, a.constructor = s), (p || m) && (u("delete"), u("has"), r && u("get")), (m || h) && u(l), i && a.clear && delete a.clear;
  }
  return c[e] = s, _export({
    global: !0,
    forced: s != o
  }, c), setToStringTag(s, e), i || n.setStrong(s, e, r), s;
},
    getWeakData = internalMetadata.getWeakData,
    setInternalState$5 = internalState.set,
    internalStateGetterFor = internalState.getterFor,
    find$1 = arrayIteration.find,
    findIndex = arrayIteration.findIndex,
    id$1 = 0,
    uncaughtFrozenStore = function uncaughtFrozenStore(e) {
  return e.frozen || (e.frozen = new UncaughtFrozenStore());
},
    UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.entries = [];
},
    findUncaughtFrozen = function findUncaughtFrozen(e, t) {
  return find$1(e.entries, function (e) {
    return e[0] === t;
  });
};

UncaughtFrozenStore.prototype = {
  get: function get(e) {
    var t = findUncaughtFrozen(this, e);
    if (t) return t[1];
  },
  has: function has(e) {
    return !!findUncaughtFrozen(this, e);
  },
  set: function set(e, t) {
    var n = findUncaughtFrozen(this, e);
    n ? n[1] = t : this.entries.push([e, t]);
  },
  "delete": function _delete(e) {
    var t = findIndex(this.entries, function (t) {
      return t[0] === e;
    });
    return ~t && this.entries.splice(t, 1), !!~t;
  }
};
var collectionWeak = {
  getConstructor: function getConstructor(e, t, n, r) {
    var i = e(function (e, o) {
      anInstance(e, i, t), setInternalState$5(e, {
        type: t,
        id: id$1++,
        frozen: void 0
      }), null != o && iterate_1(o, e[r], e, n);
    }),
        o = internalStateGetterFor(t),
        a = function a(e, t, n) {
      var r = o(e),
          i = getWeakData(anObject(t), !0);
      return !0 === i ? uncaughtFrozenStore(r).set(t, n) : i[r.id] = n, e;
    };

    return redefineAll(i.prototype, {
      "delete": function _delete(e) {
        var t = o(this);
        if (!isObject(e)) return !1;
        var n = getWeakData(e);
        return !0 === n ? uncaughtFrozenStore(t)["delete"](e) : n && _has(n, t.id) && delete n[t.id];
      },
      has: function has(e) {
        var t = o(this);
        if (!isObject(e)) return !1;
        var n = getWeakData(e);
        return !0 === n ? uncaughtFrozenStore(t).has(e) : n && _has(n, t.id);
      }
    }), redefineAll(i.prototype, n ? {
      get: function get(e) {
        var t = o(this);

        if (isObject(e)) {
          var n = getWeakData(e);
          return !0 === n ? uncaughtFrozenStore(t).get(e) : n ? n[t.id] : void 0;
        }
      },
      set: function set(e, t) {
        return a(this, e, t);
      }
    } : {
      add: function add(e) {
        return a(this, e, !0);
      }
    }), i;
  }
},
    es_weakMap = createCommonjsModule(function (e) {
  var t,
      n = internalState.enforce,
      r = !global_1.ActiveXObject && "ActiveXObject" in global_1,
      i = Object.isExtensible,
      o = function o(e) {
    return function () {
      return e(this, arguments.length ? arguments[0] : void 0);
    };
  },
      a = e.exports = collection("WeakMap", o, collectionWeak, !0, !0);

  if (nativeWeakMap && r) {
    t = collectionWeak.getConstructor(o, "WeakMap", !0), internalMetadata.REQUIRED = !0;
    var s = a.prototype,
        l = s["delete"],
        c = s.has,
        u = s.get,
        d = s.set;
    redefineAll(s, {
      "delete": function _delete(e) {
        if (isObject(e) && !i(e)) {
          var r = n(this);
          return r.frozen || (r.frozen = new t()), l.call(this, e) || r.frozen["delete"](e);
        }

        return l.call(this, e);
      },
      has: function has(e) {
        if (isObject(e) && !i(e)) {
          var r = n(this);
          return r.frozen || (r.frozen = new t()), c.call(this, e) || r.frozen.has(e);
        }

        return c.call(this, e);
      },
      get: function get(e) {
        if (isObject(e) && !i(e)) {
          var r = n(this);
          return r.frozen || (r.frozen = new t()), c.call(this, e) ? u.call(this, e) : r.frozen.get(e);
        }

        return u.call(this, e);
      },
      set: function set(e, r) {
        if (isObject(e) && !i(e)) {
          var o = n(this);
          o.frozen || (o.frozen = new t()), c.call(this, e) ? d.call(this, e, r) : o.frozen.set(e, r);
        } else d.call(this, e, r);

        return this;
      }
    });
  }
});

_export({
  target: "Object",
  stat: !0,
  forced: Object.assign !== objectAssign
}, {
  assign: objectAssign
});

var non = "âÂá ",
    forcedStringTrimMethod = function forcedStringTrimMethod(e) {
  return fails(function () {
    return !!whitespaces[e]() || non[e]() != non || whitespaces[e].name !== e;
  });
},
    $trim = stringTrim.trim;

_export({
  target: "String",
  proto: !0,
  forced: forcedStringTrimMethod("trim")
}, {
  trim: function trim() {
    return $trim(this);
  }
});

var thisNumberValue = function thisNumberValue(e) {
  if ("number" != typeof e && "Number" != classofRaw(e)) throw TypeError("Incorrect invocation");
  return +e;
},
    stringRepeat = "".repeat || function (e) {
  var t = String(requireObjectCoercible(this)),
      n = "",
      r = toInteger(e);
  if (r < 0 || r == 1 / 0) throw RangeError("Wrong number of repetitions");

  for (; r > 0; (r >>>= 1) && (t += t)) {
    1 & r && (n += t);
  }

  return n;
},
    nativeToFixed = 1..toFixed,
    floor$4 = Math.floor,
    pow$1 = function pow$1(e, t, n) {
  return 0 === t ? n : t % 2 == 1 ? pow$1(e, t - 1, n * e) : pow$1(e * e, t / 2, n);
},
    log = function log(e) {
  for (var t = 0, n = e; n >= 4096;) {
    t += 12, n /= 4096;
  }

  for (; n >= 2;) {
    t += 1, n /= 2;
  }

  return t;
},
    FORCED$1 = nativeToFixed && ("0.000" !== 8e-5.toFixed(3) || "1" !== .9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 0xde0b6b3a7640080.toFixed(0)) || !fails(function () {
  nativeToFixed.call({});
});

_export({
  target: "Number",
  proto: !0,
  forced: FORCED$1
}, {
  toFixed: function toFixed(e) {
    var t,
        n,
        r,
        i,
        o = thisNumberValue(this),
        a = toInteger(e),
        s = [0, 0, 0, 0, 0, 0],
        l = "",
        c = "0",
        u = function u(e, t) {
      for (var n = -1, r = t; ++n < 6;) {
        r += e * s[n], s[n] = r % 1e7, r = floor$4(r / 1e7);
      }
    },
        d = function d(e) {
      for (var t = 6, n = 0; --t >= 0;) {
        n += s[t], s[t] = floor$4(n / e), n = n % e * 1e7;
      }
    },
        h = function h() {
      for (var e = 6, t = ""; --e >= 0;) {
        if ("" !== t || 0 === e || 0 !== s[e]) {
          var n = String(s[e]);
          t = "" === t ? n : t + stringRepeat.call("0", 7 - n.length) + n;
        }
      }

      return t;
    };

    if (a < 0 || a > 20) throw RangeError("Incorrect fraction digits");
    if (o != o) return "NaN";
    if (o <= -1e21 || o >= 1e21) return String(o);
    if (o < 0 && (l = "-", o = -o), o > 1e-21) if (n = (t = log(o * pow$1(2, 69, 1)) - 69) < 0 ? o * pow$1(2, -t, 1) : o / pow$1(2, t, 1), n *= 4503599627370496, (t = 52 - t) > 0) {
      for (u(0, n), r = a; r >= 7;) {
        u(1e7, 0), r -= 7;
      }

      for (u(pow$1(10, r, 1), 0), r = t - 1; r >= 23;) {
        d(1 << 23), r -= 23;
      }

      d(1 << r), u(1, 1), d(2), c = h();
    } else u(0, n), u(1 << -t, 0), c = h() + stringRepeat.call("0", a);
    return c = a > 0 ? l + ((i = c.length) <= a ? "0." + stringRepeat.call("0", a - i) + c : c.slice(0, i - a) + "." + c.slice(i - a)) : l + c;
  }
});

var propertyIsEnumerable = objectPropertyIsEnumerable.f,
    createMethod$4 = function createMethod$4(e) {
  return function (t) {
    for (var n, r = toIndexedObject(t), i = objectKeys(r), o = i.length, a = 0, s = []; o > a;) {
      n = i[a++], descriptors && !propertyIsEnumerable.call(r, n) || s.push(e ? [n, r[n]] : r[n]);
    }

    return s;
  };
},
    objectToArray = {
  entries: createMethod$4(!0),
  values: createMethod$4(!1)
},
    $entries = objectToArray.entries;

_export({
  target: "Object",
  stat: !0
}, {
  entries: function entries(e) {
    return $entries(e);
  }
});

var $values = objectToArray.values;

_export({
  target: "Object",
  stat: !0
}, {
  values: function values(e) {
    return $values(e);
  }
});

var defaults = {
  addCSS: !0,
  thumbWidth: 15,
  watch: !0
};

function matches(e, t) {
  return function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }.call(e, t);
}

function trigger(e, t) {
  if (e && t) {
    var n = new Event(t);
    e.dispatchEvent(n);
  }
}

_export({
  target: "Number",
  stat: !0
}, {
  isNaN: function isNaN(e) {
    return e != e;
  }
});

var getConstructor = function getConstructor(e) {
  return null != e ? e.constructor : null;
},
    instanceOf = function instanceOf(e, t) {
  return Boolean(e && t && e instanceof t);
},
    isNullOrUndefined = function isNullOrUndefined(e) {
  return null == e;
},
    isObject$1 = function isObject$1(e) {
  return getConstructor(e) === Object;
},
    isNumber = function isNumber(e) {
  return getConstructor(e) === Number && !Number.isNaN(e);
},
    isString = function isString(e) {
  return getConstructor(e) === String;
},
    isBoolean = function isBoolean(e) {
  return getConstructor(e) === Boolean;
},
    isFunction = function isFunction(e) {
  return getConstructor(e) === Function;
},
    isArray$1 = function isArray$1(e) {
  return Array.isArray(e);
},
    isNodeList = function isNodeList(e) {
  return instanceOf(e, NodeList);
},
    isElement = function isElement(e) {
  return instanceOf(e, Element);
},
    isEvent = function isEvent(e) {
  return instanceOf(e, Event);
},
    isEmpty = function isEmpty(e) {
  return isNullOrUndefined(e) || (isString(e) || isArray$1(e) || isNodeList(e)) && !e.length || isObject$1(e) && !Object.keys(e).length;
},
    is = {
  nullOrUndefined: isNullOrUndefined,
  object: isObject$1,
  number: isNumber,
  string: isString,
  "boolean": isBoolean,
  "function": isFunction,
  array: isArray$1,
  nodeList: isNodeList,
  element: isElement,
  event: isEvent,
  empty: isEmpty
};

function getDecimalPlaces(e) {
  var t = "".concat(e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0;
}

function round(e, t) {
  if (t < 1) {
    var n = getDecimalPlaces(t);
    return parseFloat(e.toFixed(n));
  }

  return Math.round(e / t) * t;
}

fixRegexpWellKnownSymbolLogic("match", 1, function (e, t, n) {
  return [function (t) {
    var n = requireObjectCoercible(this),
        r = null == t ? void 0 : t[e];
    return void 0 !== r ? r.call(t, n) : new RegExp(t)[e](String(n));
  }, function (e) {
    var r = n(t, e, this);
    if (r.done) return r.value;
    var i = anObject(e),
        o = String(this);
    if (!i.global) return regexpExecAbstract(i, o);
    var a = i.unicode;
    i.lastIndex = 0;

    for (var s, l = [], c = 0; null !== (s = regexpExecAbstract(i, o));) {
      var u = String(s[0]);
      l[c] = u, "" === u && (i.lastIndex = advanceStringIndex(o, toLength(i.lastIndex), a)), c++;
    }

    return 0 === c ? null : l;
  }];
});

var defer,
    channel,
    port,
    RangeTouch = function () {
  function e(t, n) {
    _classCallCheck(this, e), is.element(t) ? this.element = t : is.string(t) && (this.element = document.querySelector(t)), is.element(this.element) && is.empty(this.element.rangeTouch) && (this.config = Object.assign({}, defaults, n), this.init());
  }

  return _createClass(e, [{
    key: "init",
    value: function value() {
      e.enabled && (this.config.addCSS && (this.element.style.userSelect = "none", this.element.style.webKitUserSelect = "none", this.element.style.touchAction = "manipulation"), this.listeners(!0), this.element.rangeTouch = this);
    }
  }, {
    key: "destroy",
    value: function value() {
      e.enabled && (this.listeners(!1), this.element.rangeTouch = null);
    }
  }, {
    key: "listeners",
    value: function value(e) {
      var t = this,
          n = e ? "addEventListener" : "removeEventListener";
      ["touchstart", "touchmove", "touchend"].forEach(function (e) {
        t.element[n](e, function (e) {
          return t.set(e);
        }, !1);
      });
    }
  }, {
    key: "get",
    value: function value(t) {
      if (!e.enabled || !is.event(t)) return null;
      var n,
          r = t.target,
          i = t.changedTouches[0],
          o = parseFloat(r.getAttribute("min")) || 0,
          a = parseFloat(r.getAttribute("max")) || 100,
          s = parseFloat(r.getAttribute("step")) || 1,
          l = a - o,
          c = r.getBoundingClientRect(),
          u = 100 / c.width * (this.config.thumbWidth / 2) / 100;
      return (n = 100 / c.width * (i.clientX - c.left)) < 0 ? n = 0 : n > 100 && (n = 100), n < 50 ? n -= (100 - 2 * n) * u : n > 50 && (n += 2 * (n - 50) * u), o + round(l * (n / 100), s);
    }
  }, {
    key: "set",
    value: function value(t) {
      e.enabled && is.event(t) && !t.target.disabled && (t.preventDefault(), t.target.value = this.get(t), trigger(t.target, "touchend" === t.type ? "change" : "input"));
    }
  }], [{
    key: "setup",
    value: function value(t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          r = null;
      if (is.empty(t) || is.string(t) ? r = Array.from(document.querySelectorAll(is.string(t) ? t : 'input[type="range"]')) : is.element(t) ? r = [t] : is.nodeList(t) ? r = Array.from(t) : is.array(t) && (r = t.filter(is.element)), is.empty(r)) return null;
      var i = Object.assign({}, defaults, n);
      is.string(t) && i.watch && new MutationObserver(function (n) {
        Array.from(n).forEach(function (n) {
          Array.from(n.addedNodes).forEach(function (n) {
            if (is.element(n) && matches(n, t)) new e(n, i);
          });
        });
      }).observe(document.body, {
        childList: !0,
        subtree: !0
      });
      return r.map(function (t) {
        return new e(t, n);
      });
    }
  }, {
    key: "enabled",
    get: function get() {
      return "ontouchstart" in document.documentElement;
    }
  }]), e;
}(),
    SPECIES$5 = wellKnownSymbol("species"),
    setSpecies = function setSpecies(e) {
  var t = getBuiltIn(e),
      n = objectDefineProperty.f;
  descriptors && t && !t[SPECIES$5] && n(t, SPECIES$5, {
    configurable: !0,
    get: function get() {
      return this;
    }
  });
},
    location = global_1.location,
    set$1 = global_1.setImmediate,
    clear = global_1.clearImmediate,
    process = global_1.process,
    MessageChannel = global_1.MessageChannel,
    Dispatch = global_1.Dispatch,
    counter = 0,
    queue = {},
    ONREADYSTATECHANGE = "onreadystatechange",
    run = function run(e) {
  if (queue.hasOwnProperty(e)) {
    var t = queue[e];
    delete queue[e], t();
  }
},
    runner = function runner(e) {
  return function () {
    run(e);
  };
},
    listener = function listener(e) {
  run(e.data);
},
    post = function post(e) {
  global_1.postMessage(e + "", location.protocol + "//" + location.host);
};

set$1 && clear || (set$1 = function set$1(e) {
  for (var t = [], n = 1; arguments.length > n;) {
    t.push(arguments[n++]);
  }

  return queue[++counter] = function () {
    ("function" == typeof e ? e : Function(e)).apply(void 0, t);
  }, defer(counter), counter;
}, clear = function clear(e) {
  delete queue[e];
}, "process" == classofRaw(process) ? defer = function defer(e) {
  process.nextTick(runner(e));
} : Dispatch && Dispatch.now ? defer = function defer(e) {
  Dispatch.now(runner(e));
} : MessageChannel ? (port = (channel = new MessageChannel()).port2, channel.port1.onmessage = listener, defer = bindContext(port.postMessage, port, 1)) : !global_1.addEventListener || "function" != typeof postMessage || global_1.importScripts || fails(post) ? defer = ONREADYSTATECHANGE in documentCreateElement("script") ? function (e) {
  html.appendChild(documentCreateElement("script"))[ONREADYSTATECHANGE] = function () {
    html.removeChild(this), run(e);
  };
} : function (e) {
  setTimeout(runner(e), 0);
} : (defer = post, global_1.addEventListener("message", listener, !1)));
var flush,
    head,
    last,
    notify,
    toggle,
    node,
    promise,
    task = {
  set: set$1,
  clear: clear
},
    userAgent = getBuiltIn("navigator", "userAgent") || "",
    getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f,
    macrotask = task.set,
    MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver,
    process$1 = global_1.process,
    Promise$1 = global_1.Promise,
    IS_NODE = "process" == classofRaw(process$1),
    queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global_1, "queueMicrotask"),
    queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
queueMicrotask || (flush = function flush() {
  var e, t;

  for (IS_NODE && (e = process$1.domain) && e.exit(); head;) {
    t = head.fn, head = head.next;

    try {
      t();
    } catch (e) {
      throw head ? notify() : last = void 0, e;
    }
  }

  last = void 0, e && e.enter();
}, IS_NODE ? notify = function notify() {
  process$1.nextTick(flush);
} : MutationObserver$1 && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent) ? (toggle = !0, node = document.createTextNode(""), new MutationObserver$1(flush).observe(node, {
  characterData: !0
}), notify = function notify() {
  node.data = toggle = !toggle;
}) : Promise$1 && Promise$1.resolve ? (promise = Promise$1.resolve(void 0), notify = function notify() {
  promise.then(flush);
}) : notify = function notify() {
  macrotask.call(global_1, flush);
});

var Internal,
    OwnPromiseCapability,
    PromiseWrapper,
    microtask = queueMicrotask || function (e) {
  var t = {
    fn: e,
    next: void 0
  };
  last && (last.next = t), head || (head = t, notify()), last = t;
},
    PromiseCapability = function PromiseCapability(e) {
  var t, n;
  this.promise = new e(function (e, r) {
    if (void 0 !== t || void 0 !== n) throw TypeError("Bad Promise constructor");
    t = e, n = r;
  }), this.resolve = aFunction$1(t), this.reject = aFunction$1(n);
},
    f$7 = function f$7(e) {
  return new PromiseCapability(e);
},
    newPromiseCapability = {
  f: f$7
},
    promiseResolve = function promiseResolve(e, t) {
  if (anObject(e), isObject(t) && t.constructor === e) return t;
  var n = newPromiseCapability.f(e);
  return (0, n.resolve)(t), n.promise;
},
    hostReportErrors = function hostReportErrors(e, t) {
  var n = global_1.console;
  n && n.error && (1 === arguments.length ? n.error(e) : n.error(e, t));
},
    perform = function perform(e) {
  try {
    return {
      error: !1,
      value: e()
    };
  } catch (e) {
    return {
      error: !0,
      value: e
    };
  }
},
    task$1 = task.set,
    SPECIES$6 = wellKnownSymbol("species"),
    PROMISE = "Promise",
    getInternalState$3 = internalState.get,
    setInternalState$6 = internalState.set,
    getInternalPromiseState = internalState.getterFor(PROMISE),
    _PromiseConstructor = global_1[PROMISE],
    TypeError$1 = global_1.TypeError,
    document$2 = global_1.document,
    process$2 = global_1.process,
    $fetch = global_1.fetch,
    versions = process$2 && process$2.versions,
    v8 = versions && versions.v8 || "",
    newPromiseCapability$1 = newPromiseCapability.f,
    newGenericPromiseCapability = newPromiseCapability$1,
    IS_NODE$1 = "process" == classofRaw(process$2),
    DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent),
    UNHANDLED_REJECTION = "unhandledrejection",
    REJECTION_HANDLED = "rejectionhandled",
    PENDING = 0,
    FULFILLED = 1,
    REJECTED = 2,
    HANDLED = 1,
    UNHANDLED = 2,
    FORCED$2 = isForced_1(PROMISE, function () {
  var e = _PromiseConstructor.resolve(1),
      t = function t() {},
      n = (e.constructor = {})[SPECIES$6] = function (e) {
    e(t, t);
  };

  return !((IS_NODE$1 || "function" == typeof PromiseRejectionEvent) && (!isPure || e["finally"]) && e.then(t) instanceof n && 0 !== v8.indexOf("6.6") && -1 === userAgent.indexOf("Chrome/66"));
}),
    INCORRECT_ITERATION$1 = FORCED$2 || !checkCorrectnessOfIteration(function (e) {
  _PromiseConstructor.all(e)["catch"](function () {});
}),
    isThenable = function isThenable(e) {
  var t;
  return !(!isObject(e) || "function" != typeof (t = e.then)) && t;
},
    notify$1 = function notify$1(e, t, n) {
  if (!t.notified) {
    t.notified = !0;
    var r = t.reactions;
    microtask(function () {
      for (var i = t.value, o = t.state == FULFILLED, a = 0; r.length > a;) {
        var s,
            l,
            c,
            u = r[a++],
            d = o ? u.ok : u.fail,
            h = u.resolve,
            p = u.reject,
            f = u.domain;

        try {
          d ? (o || (t.rejection === UNHANDLED && onHandleUnhandled(e, t), t.rejection = HANDLED), !0 === d ? s = i : (f && f.enter(), s = d(i), f && (f.exit(), c = !0)), s === u.promise ? p(TypeError$1("Promise-chain cycle")) : (l = isThenable(s)) ? l.call(s, h, p) : h(s)) : p(i);
        } catch (e) {
          f && !c && f.exit(), p(e);
        }
      }

      t.reactions = [], t.notified = !1, n && !t.rejection && onUnhandled(e, t);
    });
  }
},
    dispatchEvent = function dispatchEvent(e, t, n) {
  var r, i;
  DISPATCH_EVENT ? ((r = document$2.createEvent("Event")).promise = t, r.reason = n, r.initEvent(e, !1, !0), global_1.dispatchEvent(r)) : r = {
    promise: t,
    reason: n
  }, (i = global_1["on" + e]) ? i(r) : e === UNHANDLED_REJECTION && hostReportErrors("Unhandled promise rejection", n);
},
    onUnhandled = function onUnhandled(e, t) {
  task$1.call(global_1, function () {
    var n,
        r = t.value;
    if (isUnhandled(t) && (n = perform(function () {
      IS_NODE$1 ? process$2.emit("unhandledRejection", r, e) : dispatchEvent(UNHANDLED_REJECTION, e, r);
    }), t.rejection = IS_NODE$1 || isUnhandled(t) ? UNHANDLED : HANDLED, n.error)) throw n.value;
  });
},
    isUnhandled = function isUnhandled(e) {
  return e.rejection !== HANDLED && !e.parent;
},
    onHandleUnhandled = function onHandleUnhandled(e, t) {
  task$1.call(global_1, function () {
    IS_NODE$1 ? process$2.emit("rejectionHandled", e) : dispatchEvent(REJECTION_HANDLED, e, t.value);
  });
},
    bind = function bind(e, t, n, r) {
  return function (i) {
    e(t, n, i, r);
  };
},
    internalReject = function internalReject(e, t, n, r) {
  t.done || (t.done = !0, r && (t = r), t.value = n, t.state = REJECTED, notify$1(e, t, !0));
},
    internalResolve = function internalResolve(e, t, n, r) {
  if (!t.done) {
    t.done = !0, r && (t = r);

    try {
      if (e === n) throw TypeError$1("Promise can't be resolved itself");
      var i = isThenable(n);
      i ? microtask(function () {
        var r = {
          done: !1
        };

        try {
          i.call(n, bind(internalResolve, e, r, t), bind(internalReject, e, r, t));
        } catch (n) {
          internalReject(e, r, n, t);
        }
      }) : (t.value = n, t.state = FULFILLED, notify$1(e, t, !1));
    } catch (n) {
      internalReject(e, {
        done: !1
      }, n, t);
    }
  }
};

FORCED$2 && (_PromiseConstructor = function PromiseConstructor(e) {
  anInstance(this, _PromiseConstructor, PROMISE), aFunction$1(e), Internal.call(this);
  var t = getInternalState$3(this);

  try {
    e(bind(internalResolve, this, t), bind(internalReject, this, t));
  } catch (e) {
    internalReject(this, t, e);
  }
}, (Internal = function Internal(e) {
  setInternalState$6(this, {
    type: PROMISE,
    done: !1,
    notified: !1,
    parent: !1,
    reactions: [],
    rejection: !1,
    state: PENDING,
    value: void 0
  });
}).prototype = redefineAll(_PromiseConstructor.prototype, {
  then: function then(e, t) {
    var n = getInternalPromiseState(this),
        r = newPromiseCapability$1(speciesConstructor(this, _PromiseConstructor));
    return r.ok = "function" != typeof e || e, r.fail = "function" == typeof t && t, r.domain = IS_NODE$1 ? process$2.domain : void 0, n.parent = !0, n.reactions.push(r), n.state != PENDING && notify$1(this, n, !1), r.promise;
  },
  "catch": function _catch(e) {
    return this.then(void 0, e);
  }
}), OwnPromiseCapability = function OwnPromiseCapability() {
  var e = new Internal(),
      t = getInternalState$3(e);
  this.promise = e, this.resolve = bind(internalResolve, e, t), this.reject = bind(internalReject, e, t);
}, newPromiseCapability.f = newPromiseCapability$1 = function newPromiseCapability$1(e) {
  return e === _PromiseConstructor || e === PromiseWrapper ? new OwnPromiseCapability(e) : newGenericPromiseCapability(e);
}, "function" == typeof $fetch && _export({
  global: !0,
  enumerable: !0,
  forced: !0
}, {
  fetch: function fetch(e) {
    return promiseResolve(_PromiseConstructor, $fetch.apply(global_1, arguments));
  }
})), _export({
  global: !0,
  wrap: !0,
  forced: FORCED$2
}, {
  Promise: _PromiseConstructor
}), setToStringTag(_PromiseConstructor, PROMISE, !1), setSpecies(PROMISE), PromiseWrapper = path[PROMISE], _export({
  target: PROMISE,
  stat: !0,
  forced: FORCED$2
}, {
  reject: function reject(e) {
    var t = newPromiseCapability$1(this);
    return t.reject.call(void 0, e), t.promise;
  }
}), _export({
  target: PROMISE,
  stat: !0,
  forced: FORCED$2
}, {
  resolve: function resolve(e) {
    return promiseResolve(this, e);
  }
}), _export({
  target: PROMISE,
  stat: !0,
  forced: INCORRECT_ITERATION$1
}, {
  all: function all(e) {
    var t = this,
        n = newPromiseCapability$1(t),
        r = n.resolve,
        i = n.reject,
        o = perform(function () {
      var n = aFunction$1(t.resolve),
          o = [],
          a = 0,
          s = 1;
      iterate_1(e, function (e) {
        var l = a++,
            c = !1;
        o.push(void 0), s++, n.call(t, e).then(function (e) {
          c || (c = !0, o[l] = e, --s || r(o));
        }, i);
      }), --s || r(o);
    });
    return o.error && i(o.value), n.promise;
  },
  race: function race(e) {
    var t = this,
        n = newPromiseCapability$1(t),
        r = n.reject,
        i = perform(function () {
      var i = aFunction$1(t.resolve);
      iterate_1(e, function (e) {
        i.call(t, e).then(n.resolve, r);
      });
    });
    return i.error && r(i.value), n.promise;
  }
});
var nativeStartsWith = "".startsWith,
    min$4 = Math.min;

_export({
  target: "String",
  proto: !0,
  forced: !correctIsRegexpLogic("startsWith")
}, {
  startsWith: function startsWith(e) {
    var t = String(requireObjectCoercible(this));
    notARegexp(e);
    var n = toLength(min$4(arguments.length > 1 ? arguments[1] : void 0, t.length)),
        r = String(e);
    return nativeStartsWith ? nativeStartsWith.call(t, r, n) : t.slice(n, n + r.length) === r;
  }
});

var getConstructor$1 = function getConstructor$1(e) {
  return null != e ? e.constructor : null;
},
    instanceOf$1 = function instanceOf$1(e, t) {
  return Boolean(e && t && e instanceof t);
},
    isNullOrUndefined$1 = function isNullOrUndefined$1(e) {
  return null == e;
},
    isObject$2 = function isObject$2(e) {
  return getConstructor$1(e) === Object;
},
    isNumber$1 = function isNumber$1(e) {
  return getConstructor$1(e) === Number && !Number.isNaN(e);
},
    isString$1 = function isString$1(e) {
  return getConstructor$1(e) === String;
},
    isBoolean$1 = function isBoolean$1(e) {
  return getConstructor$1(e) === Boolean;
},
    isFunction$1 = function isFunction$1(e) {
  return getConstructor$1(e) === Function;
},
    isArray$2 = function isArray$2(e) {
  return Array.isArray(e);
},
    isWeakMap = function isWeakMap(e) {
  return instanceOf$1(e, WeakMap);
},
    isNodeList$1 = function isNodeList$1(e) {
  return instanceOf$1(e, NodeList);
},
    isElement$1 = function isElement$1(e) {
  return instanceOf$1(e, Element);
},
    isTextNode = function isTextNode(e) {
  return getConstructor$1(e) === Text;
},
    isEvent$1 = function isEvent$1(e) {
  return instanceOf$1(e, Event);
},
    isKeyboardEvent = function isKeyboardEvent(e) {
  return instanceOf$1(e, KeyboardEvent);
},
    isCue = function isCue(e) {
  return instanceOf$1(e, window.TextTrackCue) || instanceOf$1(e, window.VTTCue);
},
    isTrack = function isTrack(e) {
  return instanceOf$1(e, TextTrack) || !isNullOrUndefined$1(e) && isString$1(e.kind);
},
    isPromise = function isPromise(e) {
  return instanceOf$1(e, Promise);
},
    isEmpty$1 = function isEmpty$1(e) {
  return isNullOrUndefined$1(e) || (isString$1(e) || isArray$2(e) || isNodeList$1(e)) && !e.length || isObject$2(e) && !Object.keys(e).length;
},
    isUrl = function isUrl(e) {
  if (instanceOf$1(e, window.URL)) return !0;
  if (!isString$1(e)) return !1;
  var t = e;
  e.startsWith("http://") && e.startsWith("https://") || (t = "http://".concat(e));

  try {
    return !isEmpty$1(new URL(t).hostname);
  } catch (e) {
    return !1;
  }
},
    is$1 = {
  nullOrUndefined: isNullOrUndefined$1,
  object: isObject$2,
  number: isNumber$1,
  string: isString$1,
  "boolean": isBoolean$1,
  "function": isFunction$1,
  array: isArray$2,
  weakMap: isWeakMap,
  nodeList: isNodeList$1,
  element: isElement$1,
  textNode: isTextNode,
  event: isEvent$1,
  keyboardEvent: isKeyboardEvent,
  cue: isCue,
  track: isTrack,
  promise: isPromise,
  url: isUrl,
  empty: isEmpty$1
},
    transitionEndEvent = function () {
  var e = document.createElement("span"),
      t = {
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "transitionend",
    OTransition: "oTransitionEnd otransitionend",
    transition: "transitionend"
  },
      n = Object.keys(t).find(function (t) {
    return void 0 !== e.style[t];
  });
  return !!is$1.string(n) && t[n];
}();

function repaint(e, t) {
  setTimeout(function () {
    try {
      e.hidden = !0, e.offsetHeight, e.hidden = !1;
    } catch (e) {}
  }, t);
}

var browser = {
  isIE: !!document.documentMode,
  isEdge: window.navigator.userAgent.includes("Edge"),
  isWebkit: "WebkitAppearance" in document.documentElement.style && !/Edge/.test(navigator.userAgent),
  isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),
  isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform)
},
    supportsPassiveListeners = function () {
  var e = !1;

  try {
    var t = Object.defineProperty({}, "passive", {
      get: function get() {
        return e = !0, null;
      }
    });
    window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
  } catch (e) {}

  return e;
}();

function toggleListener(e, t, n) {
  var r = this,
      i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
      o = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
      a = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];

  if (e && "addEventListener" in e && !is$1.empty(t) && is$1["function"](n)) {
    var s = t.split(" "),
        l = a;
    supportsPassiveListeners && (l = {
      passive: o,
      capture: a
    }), s.forEach(function (t) {
      r && r.eventListeners && i && r.eventListeners.push({
        element: e,
        type: t,
        callback: n,
        options: l
      }), e[i ? "addEventListener" : "removeEventListener"](t, n, l);
    });
  }
}

function on(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      n = arguments.length > 2 ? arguments[2] : void 0,
      r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, t, n, !0, r, i);
}

function off(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      n = arguments.length > 2 ? arguments[2] : void 0,
      r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, t, n, !1, r, i);
}

function once(e) {
  var t = this,
      n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      r = arguments.length > 2 ? arguments[2] : void 0,
      i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, n, function a() {
    off(e, n, a, i, o);

    for (var s = arguments.length, l = new Array(s), c = 0; c < s; c++) {
      l[c] = arguments[c];
    }

    r.apply(t, l);
  }, !0, i, o);
}

function triggerEvent(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
      r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};

  if (is$1.element(e) && !is$1.empty(t)) {
    var i = new CustomEvent(t, {
      bubbles: n,
      detail: Object.assign({}, r, {
        plyr: this
      })
    });
    e.dispatchEvent(i);
  }
}

function unbindListeners() {
  this && this.eventListeners && (this.eventListeners.forEach(function (e) {
    var t = e.element,
        n = e.type,
        r = e.callback,
        i = e.options;
    t.removeEventListener(n, r, i);
  }), this.eventListeners = []);
}

function ready() {
  var e = this;
  return new Promise(function (t) {
    return e.ready ? setTimeout(t, 0) : on.call(e, e.elements.container, "ready", t);
  }).then(function () {});
}

function cloneDeep(e) {
  return JSON.parse(JSON.stringify(e));
}

function getDeep(e, t) {
  return t.split(".").reduce(function (e, t) {
    return e && e[t];
  }, e);
}

function extend() {
  for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
    n[r - 1] = arguments[r];
  }

  if (!n.length) return e;
  var i = n.shift();
  return is$1.object(i) ? (Object.keys(i).forEach(function (t) {
    is$1.object(i[t]) ? (Object.keys(e).includes(t) || Object.assign(e, _defineProperty({}, t, {})), extend(e[t], i[t])) : Object.assign(e, _defineProperty({}, t, i[t]));
  }), extend.apply(void 0, [e].concat(n))) : e;
}

function wrap$1(e, t) {
  var n = e.length ? e : [e];
  Array.from(n).reverse().forEach(function (e, n) {
    var r = n > 0 ? t.cloneNode(!0) : t,
        i = e.parentNode,
        o = e.nextSibling;
    r.appendChild(e), o ? i.insertBefore(r, o) : i.appendChild(r);
  });
}

function setAttributes(e, t) {
  is$1.element(e) && !is$1.empty(t) && Object.entries(t).filter(function (e) {
    var t = _slicedToArray(e, 2)[1];

    return !is$1.nullOrUndefined(t);
  }).forEach(function (t) {
    var n = _slicedToArray(t, 2),
        r = n[0],
        i = n[1];

    return e.setAttribute(r, i);
  });
}

function createElement(e, t, n) {
  var r = document.createElement(e);
  return is$1.object(t) && setAttributes(r, t), is$1.string(n) && (r.innerText = n), r;
}

function insertAfter(e, t) {
  is$1.element(e) && is$1.element(t) && t.parentNode.insertBefore(e, t.nextSibling);
}

function insertElement(e, t, n, r) {
  is$1.element(t) && t.appendChild(createElement(e, n, r));
}

function removeElement(e) {
  is$1.nodeList(e) || is$1.array(e) ? Array.from(e).forEach(removeElement) : is$1.element(e) && is$1.element(e.parentNode) && e.parentNode.removeChild(e);
}

function emptyElement(e) {
  if (is$1.element(e)) for (var t = e.childNodes.length; t > 0;) {
    e.removeChild(e.lastChild), t -= 1;
  }
}

function replaceElement(e, t) {
  return is$1.element(t) && is$1.element(t.parentNode) && is$1.element(e) ? (t.parentNode.replaceChild(e, t), e) : null;
}

function getAttributesFromSelector(e, t) {
  if (!is$1.string(e) || is$1.empty(e)) return {};
  var n = {},
      r = extend({}, t);
  return e.split(",").forEach(function (e) {
    var t = e.trim(),
        i = t.replace(".", ""),
        o = t.replace(/[[\]]/g, "").split("="),
        a = _slicedToArray(o, 1)[0],
        s = o.length > 1 ? o[1].replace(/["']/g, "") : "";

    switch (t.charAt(0)) {
      case ".":
        is$1.string(r["class"]) ? n["class"] = "".concat(r["class"], " ").concat(i) : n["class"] = i;
        break;

      case "#":
        n.id = t.replace("#", "");
        break;

      case "[":
        n[a] = s;
    }
  }), extend(r, n);
}

function toggleHidden(e, t) {
  if (is$1.element(e)) {
    var n = t;
    is$1["boolean"](n) || (n = !e.hidden), e.hidden = n;
  }
}

function toggleClass(e, t, n) {
  if (is$1.nodeList(e)) return Array.from(e).map(function (e) {
    return toggleClass(e, t, n);
  });

  if (is$1.element(e)) {
    var r = "toggle";
    return void 0 !== n && (r = n ? "add" : "remove"), e.classList[r](t), e.classList.contains(t);
  }

  return !1;
}

function hasClass(e, t) {
  return is$1.element(e) && e.classList.contains(t);
}

function matches$1(e, t) {
  return function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }.call(e, t);
}

function getElements(e) {
  return this.elements.container.querySelectorAll(e);
}

function getElement(e) {
  return this.elements.container.querySelector(e);
}

function trapFocus() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

  if (is$1.element(e)) {
    var n = getElements.call(this, "button:not(:disabled), input:not(:disabled), [tabindex]"),
        r = n[0],
        i = n[n.length - 1];
    toggleListener.call(this, this.elements.container, "keydown", function (e) {
      if ("Tab" === e.key && 9 === e.keyCode) {
        var t = document.activeElement;
        t !== i || e.shiftKey ? t === r && e.shiftKey && (i.focus(), e.preventDefault()) : (r.focus(), e.preventDefault());
      }
    }, t, !1);
  }
}

function setFocus() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
  is$1.element(e) && (e.focus({
    preventScroll: !0
  }), t && toggleClass(e, this.config.classNames.tabFocus));
}

var defaultCodecs = {
  "audio/ogg": "vorbis",
  "audio/wav": "1",
  "video/webm": "vp8, vorbis",
  "video/mp4": "avc1.42E01E, mp4a.40.2",
  "video/ogg": "theora"
},
    support = {
  audio: "canPlayType" in document.createElement("audio"),
  video: "canPlayType" in document.createElement("video"),
  check: function check(e, t, n) {
    var r = browser.isIPhone && n && support.playsinline,
        i = support[e] || "html5" !== t;
    return {
      api: i,
      ui: i && support.rangeInput && ("video" !== e || !browser.isIPhone || r)
    };
  },
  pip: !(browser.isIPhone || !is$1["function"](createElement("video").webkitSetPresentationMode) && (!document.pictureInPictureEnabled || createElement("video").disablePictureInPicture)),
  airplay: is$1["function"](window.WebKitPlaybackTargetAvailabilityEvent),
  playsinline: "playsInline" in document.createElement("video"),
  mime: function mime(e) {
    if (is$1.empty(e)) return !1;

    var t = _slicedToArray(e.split("/"), 1)[0],
        n = e;

    if (!this.isHTML5 || t !== this.type) return !1;
    Object.keys(defaultCodecs).includes(n) && (n += '; codecs="'.concat(defaultCodecs[e], '"'));

    try {
      return Boolean(n && this.media.canPlayType(n).replace(/no/, ""));
    } catch (e) {
      return !1;
    }
  },
  textTracks: "textTracks" in document.createElement("video"),
  rangeInput: function () {
    var e = document.createElement("input");
    return e.type = "range", "range" === e.type;
  }(),
  touch: "ontouchstart" in document.documentElement,
  transitions: !1 !== transitionEndEvent,
  reducedMotion: "matchMedia" in window && window.matchMedia("(prefers-reduced-motion)").matches
};

function validateRatio(e) {
  return !!(is$1.array(e) || is$1.string(e) && e.includes(":")) && (is$1.array(e) ? e : e.split(":")).map(Number).every(is$1.number);
}

function reduceAspectRatio(e) {
  if (!is$1.array(e) || !e.every(is$1.number)) return null;

  var t = _slicedToArray(e, 2),
      n = t[0],
      r = t[1],
      i = function e(t, n) {
    return 0 === n ? t : e(n, t % n);
  }(n, r);

  return [n / i, r / i];
}

function getAspectRatio(e) {
  var t = function t(e) {
    return validateRatio(e) ? e.split(":").map(Number) : null;
  },
      n = t(e);

  if (null === n && (n = t(this.config.ratio)), null === n && !is$1.empty(this.embed) && is$1.array(this.embed.ratio) && (n = this.embed.ratio), null === n && this.isHTML5) {
    var r = this.media;
    n = reduceAspectRatio([r.videoWidth, r.videoHeight]);
  }

  return n;
}

function setAspectRatio(e) {
  if (!this.isVideo) return {};

  var t = getAspectRatio.call(this, e),
      n = _slicedToArray(is$1.array(t) ? t : [0, 0], 2),
      r = 100 / n[0] * n[1];

  if (this.elements.wrapper.style.paddingBottom = "".concat(r, "%"), this.isVimeo && this.supported.ui) {
    var i = (240 - r) / 4.8;
    this.media.style.transform = "translateY(-".concat(i, "%)");
  } else this.isHTML5 && this.elements.wrapper.classList.toggle(this.config.classNames.videoFixedRatio, null !== t);

  return {
    padding: r,
    ratio: t
  };
}

var html5 = {
  getSources: function getSources() {
    var e = this;
    return this.isHTML5 ? Array.from(this.media.querySelectorAll("source")).filter(function (t) {
      var n = t.getAttribute("type");
      return !!is$1.empty(n) || support.mime.call(e, n);
    }) : [];
  },
  getQualityOptions: function getQualityOptions() {
    return html5.getSources.call(this).map(function (e) {
      return Number(e.getAttribute("size"));
    }).filter(Boolean);
  },
  extend: function extend() {
    if (this.isHTML5) {
      var e = this;
      is$1.empty(this.config.ratio) || setAspectRatio.call(e), Object.defineProperty(e.media, "quality", {
        get: function get() {
          var t = html5.getSources.call(e).find(function (t) {
            return t.getAttribute("src") === e.source;
          });
          return t && Number(t.getAttribute("size"));
        },
        set: function set(t) {
          var n = html5.getSources.call(e).find(function (e) {
            return Number(e.getAttribute("size")) === t;
          });

          if (n) {
            var r = e.media,
                i = r.currentTime,
                o = r.paused,
                a = r.preload,
                s = r.readyState;
            e.media.src = n.getAttribute("src"), ("none" !== a || s) && (e.once("loadedmetadata", function () {
              e.currentTime = i, o || e.play();
            }), e.media.load()), triggerEvent.call(e, e.media, "qualitychange", !1, {
              quality: t
            });
          }
        }
      });
    }
  },
  cancelRequests: function cancelRequests() {
    this.isHTML5 && (removeElement(html5.getSources.call(this)), this.media.setAttribute("src", this.config.blankVideo), this.media.load(), this.debug.log("Cancelled network requests"));
  }
};

function dedupe(e) {
  return is$1.array(e) ? e.filter(function (t, n) {
    return e.indexOf(t) === n;
  }) : e;
}

function closest(e, t) {
  return is$1.array(e) && e.length ? e.reduce(function (e, n) {
    return Math.abs(n - t) < Math.abs(e - t) ? n : e;
  }) : null;
}

var defineProperty$4 = objectDefineProperty.f,
    getOwnPropertyNames$1 = objectGetOwnPropertyNames.f,
    MATCH$2 = wellKnownSymbol("match"),
    NativeRegExp = global_1.RegExp,
    RegExpPrototype$1 = NativeRegExp.prototype,
    re1 = /a/g,
    re2 = /a/g,
    CORRECT_NEW = new NativeRegExp(re1) !== re1,
    FORCED$3 = descriptors && isForced_1("RegExp", !CORRECT_NEW || fails(function () {
  return re2[MATCH$2] = !1, NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || "/a/i" != NativeRegExp(re1, "i");
}));

if (FORCED$3) {
  for (var RegExpWrapper = function RegExpWrapper(e, t) {
    var n = this instanceof RegExpWrapper,
        r = isRegexp(e),
        i = void 0 === t;
    return !n && r && e.constructor === RegExpWrapper && i ? e : inheritIfRequired(CORRECT_NEW ? new NativeRegExp(r && !i ? e.source : e, t) : NativeRegExp((r = e instanceof RegExpWrapper) ? e.source : e, r && i ? regexpFlags.call(e) : t), n ? this : RegExpPrototype$1, RegExpWrapper);
  }, proxy = function proxy(e) {
    (e in RegExpWrapper) || defineProperty$4(RegExpWrapper, e, {
      configurable: !0,
      get: function get() {
        return NativeRegExp[e];
      },
      set: function set(t) {
        NativeRegExp[e] = t;
      }
    });
  }, keys$2 = getOwnPropertyNames$1(NativeRegExp), index = 0; keys$2.length > index;) {
    proxy(keys$2[index++]);
  }

  RegExpPrototype$1.constructor = RegExpWrapper, RegExpWrapper.prototype = RegExpPrototype$1, redefine(global_1, "RegExp", RegExpWrapper);
}

function generateId(e) {
  return "".concat(e, "-").concat(Math.floor(1e4 * Math.random()));
}

function format(e) {
  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
    n[r - 1] = arguments[r];
  }

  return is$1.empty(e) ? e : e.toString().replace(/{(\d+)}/g, function (e, t) {
    return n[t].toString();
  });
}

function getPercentage(e, t) {
  return 0 === e || 0 === t || Number.isNaN(e) || Number.isNaN(t) ? 0 : (e / t * 100).toFixed(2);
}

function replaceAll() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
  return e.replace(new RegExp(t.toString().replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1"), "g"), n.toString());
}

function toTitleCase() {
  return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString().replace(/\w\S*/g, function (e) {
    return e.charAt(0).toUpperCase() + e.substr(1).toLowerCase();
  });
}

function toPascalCase() {
  var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString();
  return e = replaceAll(e, "-", " "), e = replaceAll(e, "_", " "), replaceAll(e = toTitleCase(e), " ", "");
}

function toCamelCase() {
  var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString();
  return (e = toPascalCase(e)).charAt(0).toLowerCase() + e.slice(1);
}

function stripHTML(e) {
  var t = document.createDocumentFragment(),
      n = document.createElement("div");
  return t.appendChild(n), n.innerHTML = e, t.firstChild.innerText;
}

function getHTML(e) {
  var t = document.createElement("div");
  return t.appendChild(e), t.innerHTML;
}

setSpecies("RegExp");

var resources = {
  pip: "PIP",
  airplay: "AirPlay",
  html5: "HTML5",
  vimeo: "Vimeo",
  youtube: "YouTube"
},
    i18n = {
  get: function get() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (is$1.empty(e) || is$1.empty(t)) return "";
    var n = getDeep(t.i18n, e);
    if (is$1.empty(n)) return Object.keys(resources).includes(e) ? resources[e] : "";
    var r = {
      "{seektime}": t.seekTime,
      "{title}": t.title
    };
    return Object.entries(r).forEach(function (e) {
      var t = _slicedToArray(e, 2),
          r = t[0],
          i = t[1];

      n = replaceAll(n, r, i);
    }), n;
  }
},
    Storage = function () {
  function e(t) {
    _classCallCheck(this, e), this.enabled = t.config.storage.enabled, this.key = t.config.storage.key;
  }

  return _createClass(e, [{
    key: "get",
    value: function value(t) {
      if (!e.supported || !this.enabled) return null;
      var n = window.localStorage.getItem(this.key);
      if (is$1.empty(n)) return null;
      var r = JSON.parse(n);
      return is$1.string(t) && t.length ? r[t] : r;
    }
  }, {
    key: "set",
    value: function value(t) {
      if (e.supported && this.enabled && is$1.object(t)) {
        var n = this.get();
        is$1.empty(n) && (n = {}), extend(n, t), window.localStorage.setItem(this.key, JSON.stringify(n));
      }
    }
  }], [{
    key: "supported",
    get: function get() {
      try {
        if (!("localStorage" in window)) return !1;
        return window.localStorage.setItem("___test", "___test"), window.localStorage.removeItem("___test"), !0;
      } catch (e) {
        return !1;
      }
    }
  }]), e;
}();

function fetch(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "text";
  return new Promise(function (n, r) {
    try {
      var i = new XMLHttpRequest();
      if (!("withCredentials" in i)) return;
      i.addEventListener("load", function () {
        if ("text" === t) try {
          n(JSON.parse(i.responseText));
        } catch (e) {
          n(i.responseText);
        } else n(i.response);
      }), i.addEventListener("error", function () {
        throw new Error(i.status);
      }), i.open("GET", e, !0), i.responseType = t, i.send();
    } catch (e) {
      r(e);
    }
  });
}

function loadSprite(e, t) {
  if (is$1.string(e)) {
    var n = is$1.string(t),
        r = function r() {
      return null !== document.getElementById(t);
    },
        i = function i(e, t) {
      e.innerHTML = t, n && r() || document.body.insertAdjacentElement("afterbegin", e);
    };

    if (!n || !r()) {
      var o = Storage.supported,
          a = document.createElement("div");

      if (a.setAttribute("hidden", ""), n && a.setAttribute("id", t), o) {
        var s = window.localStorage.getItem("".concat("cache", "-").concat(t));

        if (null !== s) {
          var l = JSON.parse(s);
          i(a, l.content);
        }
      }

      fetch(e).then(function (e) {
        is$1.empty(e) || (o && window.localStorage.setItem("".concat("cache", "-").concat(t), JSON.stringify({
          content: e
        })), i(a, e));
      })["catch"](function () {});
    }
  }
}

var ceil$1 = Math.ceil,
    floor$5 = Math.floor;

_export({
  target: "Math",
  stat: !0
}, {
  trunc: function trunc(e) {
    return (e > 0 ? floor$5 : ceil$1)(e);
  }
});

var getHours = function getHours(e) {
  return Math.trunc(e / 60 / 60 % 60, 10);
},
    getMinutes = function getMinutes(e) {
  return Math.trunc(e / 60 % 60, 10);
},
    getSeconds = function getSeconds(e) {
  return Math.trunc(e % 60, 10);
};

function _formatTime() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
      n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
  if (!is$1.number(e)) return _formatTime(null, t, n);

  var r = function r(e) {
    return "0".concat(e).slice(-2);
  },
      i = getHours(e),
      o = getMinutes(e),
      a = getSeconds(e);

  return i = t || i > 0 ? "".concat(i, ":") : "", "".concat(n && e > 0 ? "-" : "").concat(i).concat(r(o), ":").concat(r(a));
}

var controls = {
  getIconUrl: function getIconUrl() {
    var e = new URL(this.config.iconUrl, window.location).host !== window.location.host || browser.isIE && !window.svg4everybody;
    return {
      url: this.config.iconUrl,
      cors: e
    };
  },
  findElements: function findElements() {
    try {
      return this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper), this.elements.buttons = {
        play: getElements.call(this, this.config.selectors.buttons.play),
        pause: getElement.call(this, this.config.selectors.buttons.pause),
        restart: getElement.call(this, this.config.selectors.buttons.restart),
        rewind: getElement.call(this, this.config.selectors.buttons.rewind),
        fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),
        mute: getElement.call(this, this.config.selectors.buttons.mute),
        pip: getElement.call(this, this.config.selectors.buttons.pip),
        airplay: getElement.call(this, this.config.selectors.buttons.airplay),
        settings: getElement.call(this, this.config.selectors.buttons.settings),
        captions: getElement.call(this, this.config.selectors.buttons.captions),
        fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen)
      }, this.elements.progress = getElement.call(this, this.config.selectors.progress), this.elements.inputs = {
        seek: getElement.call(this, this.config.selectors.inputs.seek),
        volume: getElement.call(this, this.config.selectors.inputs.volume)
      }, this.elements.display = {
        buffer: getElement.call(this, this.config.selectors.display.buffer),
        currentTime: getElement.call(this, this.config.selectors.display.currentTime),
        duration: getElement.call(this, this.config.selectors.display.duration)
      }, is$1.element(this.elements.progress) && (this.elements.display.seekTooltip = this.elements.progress.querySelector(".".concat(this.config.classNames.tooltip))), !0;
    } catch (e) {
      return this.debug.warn("It looks like there is a problem with your custom controls HTML", e), this.toggleNativeControls(!0), !1;
    }
  },
  createIcon: function createIcon(e, t) {
    var n = controls.getIconUrl.call(this),
        r = "".concat(n.cors ? "" : n.url, "#").concat(this.config.iconPrefix),
        i = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    setAttributes(i, extend(t, {
      role: "presentation",
      focusable: "false"
    }));
    var o = document.createElementNS("http://www.w3.org/2000/svg", "use"),
        a = "".concat(r, "-").concat(e);
    return "href" in o && o.setAttributeNS("http://www.w3.org/1999/xlink", "href", a), o.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", a), i.appendChild(o), i;
  },
  createLabel: function createLabel(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = i18n.get(e, this.config);
    return createElement("span", Object.assign({}, t, {
      "class": [t["class"], this.config.classNames.hidden].filter(Boolean).join(" ")
    }), n);
  },
  createBadge: function createBadge(e) {
    if (is$1.empty(e)) return null;
    var t = createElement("span", {
      "class": this.config.classNames.menu.value
    });
    return t.appendChild(createElement("span", {
      "class": this.config.classNames.menu.badge
    }, e)), t;
  },
  createButton: function createButton(e, t) {
    var n = this,
        r = extend({}, t),
        i = toCamelCase(e),
        o = {
      element: "button",
      toggle: !1,
      label: null,
      icon: null,
      labelPressed: null,
      iconPressed: null
    };

    switch (["element", "icon", "label"].forEach(function (e) {
      Object.keys(r).includes(e) && (o[e] = r[e], delete r[e]);
    }), "button" !== o.element || Object.keys(r).includes("type") || (r.type = "button"), Object.keys(r).includes("class") ? r["class"].split(" ").some(function (e) {
      return e === n.config.classNames.control;
    }) || extend(r, {
      "class": "".concat(r["class"], " ").concat(this.config.classNames.control)
    }) : r["class"] = this.config.classNames.control, e) {
      case "play":
        o.toggle = !0, o.label = "play", o.labelPressed = "pause", o.icon = "play", o.iconPressed = "pause";
        break;

      case "mute":
        o.toggle = !0, o.label = "mute", o.labelPressed = "unmute", o.icon = "volume", o.iconPressed = "muted";
        break;

      case "captions":
        o.toggle = !0, o.label = "enableCaptions", o.labelPressed = "disableCaptions", o.icon = "captions-off", o.iconPressed = "captions-on";
        break;

      case "fullscreen":
        o.toggle = !0, o.label = "enterFullscreen", o.labelPressed = "exitFullscreen", o.icon = "enter-fullscreen", o.iconPressed = "exit-fullscreen";
        break;

      case "play-large":
        r["class"] += " ".concat(this.config.classNames.control, "--overlaid"), i = "play", o.label = "play", o.icon = "play";
        break;

      default:
        is$1.empty(o.label) && (o.label = i), is$1.empty(o.icon) && (o.icon = e);
    }

    var a = createElement(o.element);
    return o.toggle ? (a.appendChild(controls.createIcon.call(this, o.iconPressed, {
      "class": "icon--pressed"
    })), a.appendChild(controls.createIcon.call(this, o.icon, {
      "class": "icon--not-pressed"
    })), a.appendChild(controls.createLabel.call(this, o.labelPressed, {
      "class": "label--pressed"
    })), a.appendChild(controls.createLabel.call(this, o.label, {
      "class": "label--not-pressed"
    }))) : (a.appendChild(controls.createIcon.call(this, o.icon)), a.appendChild(controls.createLabel.call(this, o.label))), extend(r, getAttributesFromSelector(this.config.selectors.buttons[i], r)), setAttributes(a, r), "play" === i ? (is$1.array(this.elements.buttons[i]) || (this.elements.buttons[i] = []), this.elements.buttons[i].push(a)) : this.elements.buttons[i] = a, a;
  },
  createRange: function createRange(e, t) {
    var n = createElement("input", extend(getAttributesFromSelector(this.config.selectors.inputs[e]), {
      type: "range",
      min: 0,
      max: 100,
      step: .01,
      value: 0,
      autocomplete: "off",
      role: "slider",
      "aria-label": i18n.get(e, this.config),
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-valuenow": 0
    }, t));
    return this.elements.inputs[e] = n, controls.updateRangeFill.call(this, n), RangeTouch.setup(n), n;
  },
  createProgress: function createProgress(e, t) {
    var n = createElement("progress", extend(getAttributesFromSelector(this.config.selectors.display[e]), {
      min: 0,
      max: 100,
      value: 0,
      role: "progressbar",
      "aria-hidden": !0
    }, t));

    if ("volume" !== e) {
      n.appendChild(createElement("span", null, "0"));
      var r = {
        played: "played",
        buffer: "buffered"
      }[e],
          i = r ? i18n.get(r, this.config) : "";
      n.innerText = "% ".concat(i.toLowerCase());
    }

    return this.elements.display[e] = n, n;
  },
  createTime: function createTime(e, t) {
    var n = getAttributesFromSelector(this.config.selectors.display[e], t),
        r = createElement("div", extend(n, {
      "class": "".concat(n["class"] ? n["class"] : "", " ").concat(this.config.classNames.display.time, " ").trim(),
      "aria-label": i18n.get(e, this.config)
    }), "00:00");
    return this.elements.display[e] = r, r;
  },
  bindMenuItemShortcuts: function bindMenuItemShortcuts(e, t) {
    var n = this;
    on(e, "keydown keyup", function (r) {
      if ([32, 38, 39, 40].includes(r.which) && (r.preventDefault(), r.stopPropagation(), "keydown" !== r.type)) {
        var i,
            o = matches$1(e, '[role="menuitemradio"]');
        if (!o && [32, 39].includes(r.which)) controls.showMenuPanel.call(n, t, !0);else 32 !== r.which && (40 === r.which || o && 39 === r.which ? (i = e.nextElementSibling, is$1.element(i) || (i = e.parentNode.firstElementChild)) : (i = e.previousElementSibling, is$1.element(i) || (i = e.parentNode.lastElementChild)), setFocus.call(n, i, !0));
      }
    }, !1), on(e, "keyup", function (e) {
      13 === e.which && controls.focusFirstMenuItem.call(n, null, !0);
    });
  },
  createMenuItem: function createMenuItem(e) {
    var t = this,
        n = e.value,
        r = e.list,
        i = e.type,
        o = e.title,
        a = e.badge,
        s = void 0 === a ? null : a,
        l = e.checked,
        c = void 0 !== l && l,
        u = getAttributesFromSelector(this.config.selectors.inputs[i]),
        d = createElement("button", extend(u, {
      type: "button",
      role: "menuitemradio",
      "class": "".concat(this.config.classNames.control, " ").concat(u["class"] ? u["class"] : "").trim(),
      "aria-checked": c,
      value: n
    })),
        h = createElement("span");
    h.innerHTML = o, is$1.element(s) && h.appendChild(s), d.appendChild(h), Object.defineProperty(d, "checked", {
      enumerable: !0,
      get: function get() {
        return "true" === d.getAttribute("aria-checked");
      },
      set: function set(e) {
        e && Array.from(d.parentNode.children).filter(function (e) {
          return matches$1(e, '[role="menuitemradio"]');
        }).forEach(function (e) {
          return e.setAttribute("aria-checked", "false");
        }), d.setAttribute("aria-checked", e ? "true" : "false");
      }
    }), this.listeners.bind(d, "click keyup", function (e) {
      if (!is$1.keyboardEvent(e) || 32 === e.which) {
        switch (e.preventDefault(), e.stopPropagation(), d.checked = !0, i) {
          case "language":
            t.currentTrack = Number(n);
            break;

          case "quality":
            t.quality = n;
            break;

          case "speed":
            t.speed = parseFloat(n);
        }

        controls.showMenuPanel.call(t, "home", is$1.keyboardEvent(e));
      }
    }, i, !1), controls.bindMenuItemShortcuts.call(this, d, i), r.appendChild(d);
  },
  formatTime: function formatTime() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
        t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    return is$1.number(e) ? _formatTime(e, getHours(this.duration) > 0, t) : e;
  },
  updateTimeDisplay: function updateTimeDisplay() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    is$1.element(e) && is$1.number(t) && (e.innerText = controls.formatTime(t, n));
  },
  updateVolume: function updateVolume() {
    this.supported.ui && (is$1.element(this.elements.inputs.volume) && controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume), is$1.element(this.elements.buttons.mute) && (this.elements.buttons.mute.pressed = this.muted || 0 === this.volume));
  },
  setRange: function setRange(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
    is$1.element(e) && (e.value = t, controls.updateRangeFill.call(this, e));
  },
  updateProgress: function updateProgress(e) {
    var t = this;

    if (this.supported.ui && is$1.event(e)) {
      var n = 0;
      if (e) switch (e.type) {
        case "timeupdate":
        case "seeking":
        case "seeked":
          n = getPercentage(this.currentTime, this.duration), "timeupdate" === e.type && controls.setRange.call(this, this.elements.inputs.seek, n);
          break;

        case "playing":
        case "progress":
          !function (e, n) {
            var r = is$1.number(n) ? n : 0,
                i = is$1.element(e) ? e : t.elements.display.buffer;

            if (is$1.element(i)) {
              i.value = r;
              var o = i.getElementsByTagName("span")[0];
              is$1.element(o) && (o.childNodes[0].nodeValue = r);
            }
          }(this.elements.display.buffer, 100 * this.buffered);
      }
    }
  },
  updateRangeFill: function updateRangeFill(e) {
    var t = is$1.event(e) ? e.target : e;

    if (is$1.element(t) && "range" === t.getAttribute("type")) {
      if (matches$1(t, this.config.selectors.inputs.seek)) {
        t.setAttribute("aria-valuenow", this.currentTime);
        var n = controls.formatTime(this.currentTime),
            r = controls.formatTime(this.duration),
            i = i18n.get("seekLabel", this.config);
        t.setAttribute("aria-valuetext", i.replace("{currentTime}", n).replace("{duration}", r));
      } else if (matches$1(t, this.config.selectors.inputs.volume)) {
        var o = 100 * t.value;
        t.setAttribute("aria-valuenow", o), t.setAttribute("aria-valuetext", "".concat(o.toFixed(1), "%"));
      } else t.setAttribute("aria-valuenow", t.value);

      browser.isWebkit && t.style.setProperty("--value", "".concat(t.value / t.max * 100, "%"));
    }
  },
  updateSeekTooltip: function updateSeekTooltip(e) {
    var t = this;

    if (this.config.tooltips.seek && is$1.element(this.elements.inputs.seek) && is$1.element(this.elements.display.seekTooltip) && 0 !== this.duration) {
      var n = "".concat(this.config.classNames.tooltip, "--visible"),
          r = function r(e) {
        return toggleClass(t.elements.display.seekTooltip, n, e);
      };

      if (this.touch) r(!1);else {
        var i = 0,
            o = this.elements.progress.getBoundingClientRect();
        if (is$1.event(e)) i = 100 / o.width * (e.pageX - o.left);else {
          if (!hasClass(this.elements.display.seekTooltip, n)) return;
          i = parseFloat(this.elements.display.seekTooltip.style.left, 10);
        }
        i < 0 ? i = 0 : i > 100 && (i = 100), controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * i), this.elements.display.seekTooltip.style.left = "".concat(i, "%"), is$1.event(e) && ["mouseenter", "mouseleave"].includes(e.type) && r("mouseenter" === e.type);
      }
    }
  },
  timeUpdate: function timeUpdate(e) {
    var t = !is$1.element(this.elements.display.duration) && this.config.invertTime;
    controls.updateTimeDisplay.call(this, this.elements.display.currentTime, t ? this.duration - this.currentTime : this.currentTime, t), e && "timeupdate" === e.type && this.media.seeking || controls.updateProgress.call(this, e);
  },
  durationUpdate: function durationUpdate() {
    if (this.supported.ui && (this.config.invertTime || !this.currentTime)) {
      if (this.duration >= Math.pow(2, 32)) return toggleHidden(this.elements.display.currentTime, !0), void toggleHidden(this.elements.progress, !0);
      is$1.element(this.elements.inputs.seek) && this.elements.inputs.seek.setAttribute("aria-valuemax", this.duration);
      var e = is$1.element(this.elements.display.duration);
      !e && this.config.displayDuration && this.paused && controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration), e && controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration), controls.updateSeekTooltip.call(this);
    }
  },
  toggleMenuButton: function toggleMenuButton(e, t) {
    toggleHidden(this.elements.settings.buttons[e], !t);
  },
  updateSetting: function updateSetting(e, t, n) {
    var r = this.elements.settings.panels[e],
        i = null,
        o = t;
    if ("captions" === e) i = this.currentTrack;else {
      if (i = is$1.empty(n) ? this[e] : n, is$1.empty(i) && (i = this.config[e]["default"]), !is$1.empty(this.options[e]) && !this.options[e].includes(i)) return void this.debug.warn("Unsupported value of '".concat(i, "' for ").concat(e));
      if (!this.config[e].options.includes(i)) return void this.debug.warn("Disabled value of '".concat(i, "' for ").concat(e));
    }

    if (is$1.element(o) || (o = r && r.querySelector('[role="menu"]')), is$1.element(o)) {
      this.elements.settings.buttons[e].querySelector(".".concat(this.config.classNames.menu.value)).innerHTML = controls.getLabel.call(this, e, i);
      var a = o && o.querySelector('[value="'.concat(i, '"]'));
      is$1.element(a) && (a.checked = !0);
    }
  },
  getLabel: function getLabel(e, t) {
    switch (e) {
      case "speed":
        return 1 === t ? i18n.get("normal", this.config) : "".concat(t, "&times;");

      case "quality":
        if (is$1.number(t)) {
          var n = i18n.get("qualityLabel.".concat(t), this.config);
          return n.length ? n : "".concat(t, "p");
        }

        return toTitleCase(t);

      case "captions":
        return captions.getLabel.call(this);

      default:
        return null;
    }
  },
  setQualityMenu: function setQualityMenu(e) {
    var t = this;

    if (is$1.element(this.elements.settings.panels.quality)) {
      var n = this.elements.settings.panels.quality.querySelector('[role="menu"]');
      is$1.array(e) && (this.options.quality = dedupe(e).filter(function (e) {
        return t.config.quality.options.includes(e);
      }));
      var r = !is$1.empty(this.options.quality) && this.options.quality.length > 1;

      if (controls.toggleMenuButton.call(this, "quality", r), emptyElement(n), controls.checkMenu.call(this), r) {
        var i = function i(e) {
          var n = i18n.get("qualityBadge.".concat(e), t.config);
          return n.length ? controls.createBadge.call(t, n) : null;
        };

        this.options.quality.sort(function (e, n) {
          var r = t.config.quality.options;
          return r.indexOf(e) > r.indexOf(n) ? 1 : -1;
        }).forEach(function (e) {
          controls.createMenuItem.call(t, {
            value: e,
            list: n,
            type: "quality",
            title: controls.getLabel.call(t, "quality", e),
            badge: i(e)
          });
        }), controls.updateSetting.call(this, "quality", n);
      }
    }
  },
  setCaptionsMenu: function setCaptionsMenu() {
    var e = this;

    if (is$1.element(this.elements.settings.panels.captions)) {
      var t = this.elements.settings.panels.captions.querySelector('[role="menu"]'),
          n = captions.getTracks.call(this),
          r = Boolean(n.length);

      if (controls.toggleMenuButton.call(this, "captions", r), emptyElement(t), controls.checkMenu.call(this), r) {
        var i = n.map(function (n, r) {
          return {
            value: r,
            checked: e.captions.toggled && e.currentTrack === r,
            title: captions.getLabel.call(e, n),
            badge: n.language && controls.createBadge.call(e, n.language.toUpperCase()),
            list: t,
            type: "language"
          };
        });
        i.unshift({
          value: -1,
          checked: !this.captions.toggled,
          title: i18n.get("disabled", this.config),
          list: t,
          type: "language"
        }), i.forEach(controls.createMenuItem.bind(this)), controls.updateSetting.call(this, "captions", t);
      }
    }
  },
  setSpeedMenu: function setSpeedMenu(e) {
    var t = this;

    if (is$1.element(this.elements.settings.panels.speed)) {
      var n = this.elements.settings.panels.speed.querySelector('[role="menu"]');
      is$1.array(e) ? this.options.speed = e : (this.isHTML5 || this.isVimeo) && (this.options.speed = [.5, .75, 1, 1.25, 1.5, 1.75, 2]), this.options.speed = this.options.speed.filter(function (e) {
        return t.config.speed.options.includes(e);
      });
      var r = !is$1.empty(this.options.speed) && this.options.speed.length > 1;
      controls.toggleMenuButton.call(this, "speed", r), emptyElement(n), controls.checkMenu.call(this), r && (this.options.speed.forEach(function (e) {
        controls.createMenuItem.call(t, {
          value: e,
          list: n,
          type: "speed",
          title: controls.getLabel.call(t, "speed", e)
        });
      }), controls.updateSetting.call(this, "speed", n));
    }
  },
  checkMenu: function checkMenu() {
    var e = this.elements.settings.buttons,
        t = !is$1.empty(e) && Object.values(e).some(function (e) {
      return !e.hidden;
    });
    toggleHidden(this.elements.settings.menu, !t);
  },
  focusFirstMenuItem: function focusFirstMenuItem(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

    if (!this.elements.settings.popup.hidden) {
      var n = e;
      is$1.element(n) || (n = Object.values(this.elements.settings.panels).find(function (e) {
        return !e.hidden;
      }));
      var r = n.querySelector('[role^="menuitem"]');
      setFocus.call(this, r, t);
    }
  },
  toggleMenu: function toggleMenu(e) {
    var t = this.elements.settings.popup,
        n = this.elements.buttons.settings;

    if (is$1.element(t) && is$1.element(n)) {
      var r = t.hidden,
          i = r;
      if (is$1["boolean"](e)) i = e;else if (is$1.keyboardEvent(e) && 27 === e.which) i = !1;else if (is$1.event(e)) {
        var o = is$1["function"](e.composedPath) ? e.composedPath()[0] : e.target,
            a = t.contains(o);
        if (a || !a && e.target !== n && i) return;
      }
      n.setAttribute("aria-expanded", i), toggleHidden(t, !i), toggleClass(this.elements.container, this.config.classNames.menu.open, i), i && is$1.keyboardEvent(e) ? controls.focusFirstMenuItem.call(this, null, !0) : i || r || setFocus.call(this, n, is$1.keyboardEvent(e));
    }
  },
  getMenuSize: function getMenuSize(e) {
    var t = e.cloneNode(!0);
    t.style.position = "absolute", t.style.opacity = 0, t.removeAttribute("hidden"), e.parentNode.appendChild(t);
    var n = t.scrollWidth,
        r = t.scrollHeight;
    return removeElement(t), {
      width: n,
      height: r
    };
  },
  showMenuPanel: function showMenuPanel() {
    var e = this,
        t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
        n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
        r = this.elements.container.querySelector("#plyr-settings-".concat(this.id, "-").concat(t));

    if (is$1.element(r)) {
      var i = r.parentNode,
          o = Array.from(i.children).find(function (e) {
        return !e.hidden;
      });

      if (support.transitions && !support.reducedMotion) {
        i.style.width = "".concat(o.scrollWidth, "px"), i.style.height = "".concat(o.scrollHeight, "px");
        var a = controls.getMenuSize.call(this, r);
        on.call(this, i, transitionEndEvent, function t(n) {
          n.target === i && ["width", "height"].includes(n.propertyName) && (i.style.width = "", i.style.height = "", off.call(e, i, transitionEndEvent, t));
        }), i.style.width = "".concat(a.width, "px"), i.style.height = "".concat(a.height, "px");
      }

      toggleHidden(o, !0), toggleHidden(r, !1), controls.focusFirstMenuItem.call(this, r, n);
    }
  },
  setDownloadUrl: function setDownloadUrl() {
    var e = this.elements.buttons.download;
    is$1.element(e) && e.setAttribute("href", this.download);
  },
  create: function create(e) {
    var t = this,
        n = controls.bindMenuItemShortcuts,
        r = controls.createButton,
        i = controls.createProgress,
        o = controls.createRange,
        a = controls.createTime,
        s = controls.setQualityMenu,
        l = controls.setSpeedMenu,
        c = controls.showMenuPanel;
    this.elements.controls = null, this.config.controls.includes("play-large") && this.elements.container.appendChild(r.call(this, "play-large"));
    var u = createElement("div", getAttributesFromSelector(this.config.selectors.controls.wrapper));
    this.elements.controls = u;
    var d = {
      "class": "plyr__controls__item"
    };
    return dedupe(this.config.controls).forEach(function (s) {
      if ("restart" === s && u.appendChild(r.call(t, "restart", d)), "rewind" === s && u.appendChild(r.call(t, "rewind", d)), "play" === s && u.appendChild(r.call(t, "play", d)), "fast-forward" === s && u.appendChild(r.call(t, "fast-forward", d)), "progress" === s) {
        var l = createElement("div", {
          "class": "".concat(d["class"], " plyr__progress__container")
        }),
            h = createElement("div", getAttributesFromSelector(t.config.selectors.progress));

        if (h.appendChild(o.call(t, "seek", {
          id: "plyr-seek-".concat(e.id)
        })), h.appendChild(i.call(t, "buffer")), t.config.tooltips.seek) {
          var p = createElement("span", {
            "class": t.config.classNames.tooltip
          }, "00:00");
          h.appendChild(p), t.elements.display.seekTooltip = p;
        }

        t.elements.progress = h, l.appendChild(t.elements.progress), u.appendChild(l);
      }

      if ("current-time" === s && u.appendChild(a.call(t, "currentTime", d)), "duration" === s && u.appendChild(a.call(t, "duration", d)), "mute" === s || "volume" === s) {
        var f = t.elements.volume;

        if (is$1.element(f) && u.contains(f) || (f = createElement("div", extend({}, d, {
          "class": "".concat(d["class"], " plyr__volume").trim()
        })), t.elements.volume = f, u.appendChild(f)), "mute" === s && f.appendChild(r.call(t, "mute")), "volume" === s) {
          var m = {
            max: 1,
            step: .05,
            value: t.config.volume
          };
          f.appendChild(o.call(t, "volume", extend(m, {
            id: "plyr-volume-".concat(e.id)
          })));
        }
      }

      if ("captions" === s && u.appendChild(r.call(t, "captions", d)), "settings" === s && !is$1.empty(t.config.settings)) {
        var g = createElement("div", extend({}, d, {
          "class": "".concat(d["class"], " plyr__menu").trim(),
          hidden: ""
        }));
        g.appendChild(r.call(t, "settings", {
          "aria-haspopup": !0,
          "aria-controls": "plyr-settings-".concat(e.id),
          "aria-expanded": !1
        }));
        var y = createElement("div", {
          "class": "plyr__menu__container",
          id: "plyr-settings-".concat(e.id),
          hidden: ""
        }),
            b = createElement("div"),
            v = createElement("div", {
          id: "plyr-settings-".concat(e.id, "-home")
        }),
            E = createElement("div", {
          role: "menu"
        });
        v.appendChild(E), b.appendChild(v), t.elements.settings.panels.home = v, t.config.settings.forEach(function (r) {
          var i = createElement("button", extend(getAttributesFromSelector(t.config.selectors.buttons.settings), {
            type: "button",
            "class": "".concat(t.config.classNames.control, " ").concat(t.config.classNames.control, "--forward"),
            role: "menuitem",
            "aria-haspopup": !0,
            hidden: ""
          }));
          n.call(t, i, r), on(i, "click", function () {
            c.call(t, r, !1);
          });
          var o = createElement("span", null, i18n.get(r, t.config)),
              a = createElement("span", {
            "class": t.config.classNames.menu.value
          });
          a.innerHTML = e[r], o.appendChild(a), i.appendChild(o), E.appendChild(i);
          var s = createElement("div", {
            id: "plyr-settings-".concat(e.id, "-").concat(r),
            hidden: ""
          }),
              l = createElement("button", {
            type: "button",
            "class": "".concat(t.config.classNames.control, " ").concat(t.config.classNames.control, "--back")
          });
          l.appendChild(createElement("span", {
            "aria-hidden": !0
          }, i18n.get(r, t.config))), l.appendChild(createElement("span", {
            "class": t.config.classNames.hidden
          }, i18n.get("menuBack", t.config))), on(s, "keydown", function (e) {
            37 === e.which && (e.preventDefault(), e.stopPropagation(), c.call(t, "home", !0));
          }, !1), on(l, "click", function () {
            c.call(t, "home", !1);
          }), s.appendChild(l), s.appendChild(createElement("div", {
            role: "menu"
          })), b.appendChild(s), t.elements.settings.buttons[r] = i, t.elements.settings.panels[r] = s;
        }), y.appendChild(b), g.appendChild(y), u.appendChild(g), t.elements.settings.popup = y, t.elements.settings.menu = g;
      }

      if ("pip" === s && support.pip && u.appendChild(r.call(t, "pip", d)), "airplay" === s && support.airplay && u.appendChild(r.call(t, "airplay", d)), "download" === s) {
        var S = extend({}, d, {
          element: "a",
          href: t.download,
          target: "_blank"
        }),
            T = t.config.urls.download;
        !is$1.url(T) && t.isEmbed && extend(S, {
          icon: "logo-".concat(t.provider),
          label: t.provider
        }), u.appendChild(r.call(t, "download", S));
      }

      "fullscreen" === s && u.appendChild(r.call(t, "fullscreen", d));
    }), this.isHTML5 && s.call(this, html5.getQualityOptions.call(this)), l.call(this), u;
  },
  inject: function inject() {
    var e = this;

    if (this.config.loadSprite) {
      var t = controls.getIconUrl.call(this);
      t.cors && loadSprite(t.url, "sprite-plyr");
    }

    this.id = Math.floor(1e4 * Math.random());
    var n = null;
    this.elements.controls = null;
    var r = {
      id: this.id,
      seektime: this.config.seekTime,
      title: this.config.title
    },
        i = !0;
    is$1["function"](this.config.controls) && (this.config.controls = this.config.controls.call(this, r)), this.config.controls || (this.config.controls = []), is$1.element(this.config.controls) || is$1.string(this.config.controls) ? n = this.config.controls : (n = controls.create.call(this, {
      id: this.id,
      seektime: this.config.seekTime,
      speed: this.speed,
      quality: this.quality,
      captions: captions.getLabel.call(this)
    }), i = !1);

    var o,
        a = function a(e) {
      var t = e;
      return Object.entries(r).forEach(function (e) {
        var n = _slicedToArray(e, 2),
            r = n[0],
            i = n[1];

        t = replaceAll(t, "{".concat(r, "}"), i);
      }), t;
    };

    if (i && (is$1.string(this.config.controls) ? n = a(n) : is$1.element(n) && (n.innerHTML = a(n.innerHTML))), is$1.string(this.config.selectors.controls.container) && (o = document.querySelector(this.config.selectors.controls.container)), is$1.element(o) || (o = this.elements.container), o[is$1.element(n) ? "insertAdjacentElement" : "insertAdjacentHTML"]("afterbegin", n), is$1.element(this.elements.controls) || controls.findElements.call(this), !is$1.empty(this.elements.buttons)) {
      var s = function s(t) {
        var n = e.config.classNames.controlPressed;
        Object.defineProperty(t, "pressed", {
          enumerable: !0,
          get: function get() {
            return hasClass(t, n);
          },
          set: function set() {
            var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            toggleClass(t, n, e);
          }
        });
      };

      Object.values(this.elements.buttons).filter(Boolean).forEach(function (e) {
        is$1.array(e) || is$1.nodeList(e) ? Array.from(e).filter(Boolean).forEach(s) : s(e);
      });
    }

    if (browser.isEdge && repaint(o), this.config.tooltips.controls) {
      var l = this.config,
          c = l.classNames,
          u = l.selectors,
          d = "".concat(u.controls.wrapper, " ").concat(u.labels, " .").concat(c.hidden),
          h = getElements.call(this, d);
      Array.from(h).forEach(function (t) {
        toggleClass(t, e.config.classNames.hidden, !1), toggleClass(t, e.config.classNames.tooltip, !0);
      });
    }
  }
};

function parseUrl(e) {
  var t = e;

  if (!(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]) {
    var n = document.createElement("a");
    n.href = t, t = n.href;
  }

  try {
    return new URL(t);
  } catch (e) {
    return null;
  }
}

function buildUrlParams(e) {
  var t = new URLSearchParams();
  return is$1.object(e) && Object.entries(e).forEach(function (e) {
    var n = _slicedToArray(e, 2),
        r = n[0],
        i = n[1];

    t.set(r, i);
  }), t;
}

var captions = {
  setup: function setup() {
    if (this.supported.ui) if (!this.isVideo || this.isYouTube || this.isHTML5 && !support.textTracks) is$1.array(this.config.controls) && this.config.controls.includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this);else {
      if (is$1.element(this.elements.captions) || (this.elements.captions = createElement("div", getAttributesFromSelector(this.config.selectors.captions)), insertAfter(this.elements.captions, this.elements.wrapper)), browser.isIE && window.URL) {
        var e = this.media.querySelectorAll("track");
        Array.from(e).forEach(function (e) {
          var t = e.getAttribute("src"),
              n = parseUrl(t);
          null !== n && n.hostname !== window.location.href.hostname && ["http:", "https:"].includes(n.protocol) && fetch(t, "blob").then(function (t) {
            e.setAttribute("src", window.URL.createObjectURL(t));
          })["catch"](function () {
            removeElement(e);
          });
        });
      }

      var t = dedupe((navigator.languages || [navigator.language || navigator.userLanguage || "en"]).map(function (e) {
        return e.split("-")[0];
      })),
          n = (this.storage.get("language") || this.config.captions.language || "auto").toLowerCase();
      if ("auto" === n) n = _slicedToArray(t, 1)[0];
      var r = this.storage.get("captions");

      if (is$1["boolean"](r) || (r = this.config.captions.active), Object.assign(this.captions, {
        toggled: !1,
        active: r,
        language: n,
        languages: t
      }), this.isHTML5) {
        var i = this.config.captions.update ? "addtrack removetrack" : "removetrack";
        on.call(this, this.media.textTracks, i, captions.update.bind(this));
      }

      setTimeout(captions.update.bind(this), 0);
    }
  },
  update: function update() {
    var e = this,
        t = captions.getTracks.call(this, !0),
        n = this.captions,
        r = n.active,
        i = n.language,
        o = n.meta,
        a = n.currentTrackNode,
        s = Boolean(t.find(function (e) {
      return e.language === i;
    }));
    this.isHTML5 && this.isVideo && t.filter(function (e) {
      return !o.get(e);
    }).forEach(function (t) {
      e.debug.log("Track added", t), o.set(t, {
        "default": "showing" === t.mode
      }), t.mode = "hidden", on.call(e, t, "cuechange", function () {
        return captions.updateCues.call(e);
      });
    }), (s && this.language !== i || !t.includes(a)) && (captions.setLanguage.call(this, i), captions.toggle.call(this, r && s)), toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is$1.empty(t)), (this.config.controls || []).includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this);
  },
  toggle: function toggle(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

    if (this.supported.ui) {
      var n = this.captions.toggled,
          r = this.config.classNames.captions.active,
          i = is$1.nullOrUndefined(e) ? !n : e;

      if (i !== n) {
        if (t || (this.captions.active = i, this.storage.set({
          captions: i
        })), !this.language && i && !t) {
          var o = captions.getTracks.call(this),
              a = captions.findTrack.call(this, [this.captions.language].concat(_toConsumableArray(this.captions.languages)), !0);
          return this.captions.language = a.language, void captions.set.call(this, o.indexOf(a));
        }

        this.elements.buttons.captions && (this.elements.buttons.captions.pressed = i), toggleClass(this.elements.container, r, i), this.captions.toggled = i, controls.updateSetting.call(this, "captions"), triggerEvent.call(this, this.media, i ? "captionsenabled" : "captionsdisabled");
      }
    }
  },
  set: function set(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
        n = captions.getTracks.call(this);
    if (-1 !== e) {
      if (is$1.number(e)) {
        if (e in n) {
          if (this.captions.currentTrack !== e) {
            this.captions.currentTrack = e;
            var r = n[e],
                i = (r || {}).language;
            this.captions.currentTrackNode = r, controls.updateSetting.call(this, "captions"), t || (this.captions.language = i, this.storage.set({
              language: i
            })), this.isVimeo && this.embed.enableTextTrack(i), triggerEvent.call(this, this.media, "languagechange");
          }

          captions.toggle.call(this, !0, t), this.isHTML5 && this.isVideo && captions.updateCues.call(this);
        } else this.debug.warn("Track not found", e);
      } else this.debug.warn("Invalid caption argument", e);
    } else captions.toggle.call(this, !1, t);
  },
  setLanguage: function setLanguage(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

    if (is$1.string(e)) {
      var n = e.toLowerCase();
      this.captions.language = n;
      var r = captions.getTracks.call(this),
          i = captions.findTrack.call(this, [n]);
      captions.set.call(this, r.indexOf(i), t);
    } else this.debug.warn("Invalid language argument", e);
  },
  getTracks: function getTracks() {
    var e = this,
        t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    return Array.from((this.media || {}).textTracks || []).filter(function (n) {
      return !e.isHTML5 || t || e.captions.meta.has(n);
    }).filter(function (e) {
      return ["captions", "subtitles"].includes(e.kind);
    });
  },
  findTrack: function findTrack(e) {
    var t,
        n = this,
        r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
        i = captions.getTracks.call(this),
        o = function o(e) {
      return Number((n.captions.meta.get(e) || {})["default"]);
    },
        a = Array.from(i).sort(function (e, t) {
      return o(t) - o(e);
    });

    return e.every(function (e) {
      return !(t = a.find(function (t) {
        return t.language === e;
      }));
    }), t || (r ? a[0] : void 0);
  },
  getCurrentTrack: function getCurrentTrack() {
    return captions.getTracks.call(this)[this.currentTrack];
  },
  getLabel: function getLabel(e) {
    var t = e;
    return !is$1.track(t) && support.textTracks && this.captions.toggled && (t = captions.getCurrentTrack.call(this)), is$1.track(t) ? is$1.empty(t.label) ? is$1.empty(t.language) ? i18n.get("enabled", this.config) : e.language.toUpperCase() : t.label : i18n.get("disabled", this.config);
  },
  updateCues: function updateCues(e) {
    if (this.supported.ui) if (is$1.element(this.elements.captions)) {
      if (is$1.nullOrUndefined(e) || Array.isArray(e)) {
        var t = e;

        if (!t) {
          var n = captions.getCurrentTrack.call(this);
          t = Array.from((n || {}).activeCues || []).map(function (e) {
            return e.getCueAsHTML();
          }).map(getHTML);
        }

        var r = t.map(function (e) {
          return e.trim();
        }).join("\n");

        if (r !== this.elements.captions.innerHTML) {
          emptyElement(this.elements.captions);
          var i = createElement("span", getAttributesFromSelector(this.config.selectors.caption));
          i.innerHTML = r, this.elements.captions.appendChild(i), triggerEvent.call(this, this.media, "cuechange");
        }
      } else this.debug.warn("updateCues: Invalid input", e);
    } else this.debug.warn("No captions element to render to");
  }
},
    defaults$1 = {
  enabled: !0,
  title: "",
  debug: !1,
  autoplay: !1,
  autopause: !0,
  playsinline: !0,
  seekTime: 10,
  volume: 1,
  muted: !1,
  duration: null,
  displayDuration: !0,
  invertTime: !0,
  toggleInvert: !0,
  ratio: null,
  clickToPlay: !0,
  hideControls: !0,
  resetOnEnd: !1,
  disableContextMenu: !0,
  loadSprite: !0,
  iconPrefix: "plyr",
  iconUrl: "https://cdn.plyr.io/3.5.6/plyr.svg",
  blankVideo: "https://cdn.plyr.io/static/blank.mp4",
  quality: {
    "default": 576,
    options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240]
  },
  loop: {
    active: !1
  },
  speed: {
    selected: 1,
    options: [.5, .75, 1, 1.25, 1.5, 1.75, 2]
  },
  keyboard: {
    focused: !0,
    global: !1
  },
  tooltips: {
    controls: !1,
    seek: !0
  },
  captions: {
    active: !1,
    language: "auto",
    update: !1
  },
  fullscreen: {
    enabled: !0,
    fallback: !0,
    iosNative: !1
  },
  storage: {
    enabled: !0,
    key: "plyr"
  },
  controls: ["play-large", "play", "progress", "current-time", "mute", "volume", "captions", "settings", "pip", "airplay", "fullscreen"],
  settings: ["captions", "quality", "speed"],
  i18n: {
    restart: "Restart",
    rewind: "Rewind {seektime}s",
    play: "Play",
    pause: "Pause",
    fastForward: "Forward {seektime}s",
    seek: "Seek",
    seekLabel: "{currentTime} of {duration}",
    played: "Played",
    buffered: "Buffered",
    currentTime: "Current time",
    duration: "Duration",
    volume: "Volume",
    mute: "Mute",
    unmute: "Unmute",
    enableCaptions: "Enable captions",
    disableCaptions: "Disable captions",
    download: "Download",
    enterFullscreen: "Enter fullscreen",
    exitFullscreen: "Exit fullscreen",
    frameTitle: "Player for {title}",
    captions: "Captions",
    settings: "Settings",
    menuBack: "Go back to previous menu",
    speed: "Speed",
    normal: "Normal",
    quality: "Quality",
    loop: "Loop",
    start: "Start",
    end: "End",
    all: "All",
    reset: "Reset",
    disabled: "Disabled",
    enabled: "Enabled",
    advertisement: "Ad",
    qualityBadge: {
      2160: "4K",
      1440: "HD",
      1080: "HD",
      720: "HD",
      576: "SD",
      480: "SD"
    }
  },
  urls: {
    download: null,
    vimeo: {
      sdk: "https://player.vimeo.com/api/player.js",
      iframe: "https://player.vimeo.com/video/{0}?{1}",
      api: "https://vimeo.com/api/v2/video/{0}.json"
    },
    youtube: {
      sdk: "https://www.youtube.com/iframe_api",
      api: "https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}"
    },
    googleIMA: {
      sdk: "https://imasdk.googleapis.com/js/sdkloader/ima3.js"
    }
  },
  listeners: {
    seek: null,
    play: null,
    pause: null,
    restart: null,
    rewind: null,
    fastForward: null,
    mute: null,
    volume: null,
    captions: null,
    download: null,
    fullscreen: null,
    pip: null,
    airplay: null,
    speed: null,
    quality: null,
    loop: null,
    language: null
  },
  events: ["ended", "progress", "stalled", "playing", "waiting", "canplay", "canplaythrough", "loadstart", "loadeddata", "loadedmetadata", "timeupdate", "volumechange", "play", "pause", "error", "seeking", "seeked", "emptied", "ratechange", "cuechange", "download", "enterfullscreen", "exitfullscreen", "captionsenabled", "captionsdisabled", "languagechange", "controlshidden", "controlsshown", "ready", "statechange", "qualitychange", "adsloaded", "adscontentpause", "adscontentresume", "adstarted", "adsmidpoint", "adscomplete", "adsallcomplete", "adsimpression", "adsclick"],
  selectors: {
    editable: "input, textarea, select, [contenteditable]",
    container: ".plyr",
    controls: {
      container: null,
      wrapper: ".plyr__controls"
    },
    labels: "[data-plyr]",
    buttons: {
      play: '[data-plyr="play"]',
      pause: '[data-plyr="pause"]',
      restart: '[data-plyr="restart"]',
      rewind: '[data-plyr="rewind"]',
      fastForward: '[data-plyr="fast-forward"]',
      mute: '[data-plyr="mute"]',
      captions: '[data-plyr="captions"]',
      download: '[data-plyr="download"]',
      fullscreen: '[data-plyr="fullscreen"]',
      pip: '[data-plyr="pip"]',
      airplay: '[data-plyr="airplay"]',
      settings: '[data-plyr="settings"]',
      loop: '[data-plyr="loop"]'
    },
    inputs: {
      seek: '[data-plyr="seek"]',
      volume: '[data-plyr="volume"]',
      speed: '[data-plyr="speed"]',
      language: '[data-plyr="language"]',
      quality: '[data-plyr="quality"]'
    },
    display: {
      currentTime: ".plyr__time--current",
      duration: ".plyr__time--duration",
      buffer: ".plyr__progress__buffer",
      loop: ".plyr__progress__loop",
      volume: ".plyr__volume--display"
    },
    progress: ".plyr__progress",
    captions: ".plyr__captions",
    caption: ".plyr__caption"
  },
  classNames: {
    type: "plyr--{0}",
    provider: "plyr--{0}",
    video: "plyr__video-wrapper",
    embed: "plyr__video-embed",
    videoFixedRatio: "plyr__video-wrapper--fixed-ratio",
    embedContainer: "plyr__video-embed__container",
    poster: "plyr__poster",
    posterEnabled: "plyr__poster-enabled",
    ads: "plyr__ads",
    control: "plyr__control",
    controlPressed: "plyr__control--pressed",
    playing: "plyr--playing",
    paused: "plyr--paused",
    stopped: "plyr--stopped",
    loading: "plyr--loading",
    hover: "plyr--hover",
    tooltip: "plyr__tooltip",
    cues: "plyr__cues",
    hidden: "plyr__sr-only",
    hideControls: "plyr--hide-controls",
    isIos: "plyr--is-ios",
    isTouch: "plyr--is-touch",
    uiSupported: "plyr--full-ui",
    noTransition: "plyr--no-transition",
    display: {
      time: "plyr__time"
    },
    menu: {
      value: "plyr__menu__value",
      badge: "plyr__badge",
      open: "plyr--menu-open"
    },
    captions: {
      enabled: "plyr--captions-enabled",
      active: "plyr--captions-active"
    },
    fullscreen: {
      enabled: "plyr--fullscreen-enabled",
      fallback: "plyr--fullscreen-fallback"
    },
    pip: {
      supported: "plyr--pip-supported",
      active: "plyr--pip-active"
    },
    airplay: {
      supported: "plyr--airplay-supported",
      active: "plyr--airplay-active"
    },
    tabFocus: "plyr__tab-focus",
    previewThumbnails: {
      thumbContainer: "plyr__preview-thumb",
      thumbContainerShown: "plyr__preview-thumb--is-shown",
      imageContainer: "plyr__preview-thumb__image-container",
      timeContainer: "plyr__preview-thumb__time-container",
      scrubbingContainer: "plyr__preview-scrubbing",
      scrubbingContainerShown: "plyr__preview-scrubbing--is-shown"
    }
  },
  attributes: {
    embed: {
      provider: "data-plyr-provider",
      id: "data-plyr-embed-id"
    }
  },
  ads: {
    enabled: !1,
    publisherId: "",
    tagUrl: ""
  },
  previewThumbnails: {
    enabled: !1,
    src: ""
  },
  vimeo: {
    byline: !1,
    portrait: !1,
    title: !1,
    speed: !0,
    transparent: !1
  },
  youtube: {
    noCookie: !1,
    rel: 0,
    showinfo: 0,
    iv_load_policy: 3,
    modestbranding: 1
  }
},
    pip = {
  active: "picture-in-picture",
  inactive: "inline"
},
    providers = {
  html5: "html5",
  youtube: "youtube",
  vimeo: "vimeo"
},
    types = {
  audio: "audio",
  video: "video"
};

function getProviderByUrl(e) {
  return /^(https?:\/\/)?(www\.)?(youtube\.com|youtube-nocookie\.com|youtu\.?be)\/.+$/.test(e) ? providers.youtube : /^https?:\/\/player.vimeo.com\/video\/\d{0,9}(?=\b|\/)/.test(e) ? providers.vimeo : null;
}

var noop = function noop() {},
    Console = function () {
  function e() {
    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    _classCallCheck(this, e), this.enabled = window.console && t, this.enabled && this.log("Debugging enabled");
  }

  return _createClass(e, [{
    key: "log",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;
    }
  }, {
    key: "warn",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;
    }
  }, {
    key: "error",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;
    }
  }]), e;
}();

function onChange() {
  if (this.enabled) {
    var e = this.player.elements.buttons.fullscreen;
    is$1.element(e) && (e.pressed = this.active), triggerEvent.call(this.player, this.target, this.active ? "enterfullscreen" : "exitfullscreen", !0), browser.isIos || trapFocus.call(this.player, this.target, this.active);
  }
}

function toggleFallback() {
  var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];

  if (e ? this.scrollPosition = {
    x: window.scrollX || 0,
    y: window.scrollY || 0
  } : window.scrollTo(this.scrollPosition.x, this.scrollPosition.y), document.body.style.overflow = e ? "hidden" : "", toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, e), browser.isIos) {
    var t = document.head.querySelector('meta[name="viewport"]'),
        n = "viewport-fit=cover";
    t || (t = document.createElement("meta")).setAttribute("name", "viewport");
    var r = is$1.string(t.content) && t.content.includes(n);
    e ? (this.cleanupViewport = !r, r || (t.content += ",".concat(n))) : this.cleanupViewport && (t.content = t.content.split(",").filter(function (e) {
      return e.trim() !== n;
    }).join(","));
  }

  onChange.call(this);
}

var Fullscreen = function () {
  function e(t) {
    var n = this;
    _classCallCheck(this, e), this.player = t, this.prefix = e.prefix, this.property = e.property, this.scrollPosition = {
      x: 0,
      y: 0
    }, this.forceFallback = "force" === t.config.fullscreen.fallback, on.call(this.player, document, "ms" === this.prefix ? "MSFullscreenChange" : "".concat(this.prefix, "fullscreenchange"), function () {
      onChange.call(n);
    }), on.call(this.player, this.player.elements.container, "dblclick", function (e) {
      is$1.element(n.player.elements.controls) && n.player.elements.controls.contains(e.target) || n.toggle();
    }), this.update();
  }

  return _createClass(e, [{
    key: "update",
    value: function value() {
      var t;
      this.enabled ? (t = this.forceFallback ? "Fallback (forced)" : e["native"] ? "Native" : "Fallback", this.player.debug.log("".concat(t, " fullscreen enabled"))) : this.player.debug.log("Fullscreen not supported and fallback disabled");
      toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);
    }
  }, {
    key: "enter",
    value: function value() {
      this.enabled && (browser.isIos && this.player.config.fullscreen.iosNative ? this.target.webkitEnterFullscreen() : !e["native"] || this.forceFallback ? toggleFallback.call(this, !0) : this.prefix ? is$1.empty(this.prefix) || this.target["".concat(this.prefix, "Request").concat(this.property)]() : this.target.requestFullscreen());
    }
  }, {
    key: "exit",
    value: function value() {
      if (this.enabled) if (browser.isIos && this.player.config.fullscreen.iosNative) this.target.webkitExitFullscreen(), this.player.play();else if (!e["native"] || this.forceFallback) toggleFallback.call(this, !1);else if (this.prefix) {
        if (!is$1.empty(this.prefix)) {
          var t = "moz" === this.prefix ? "Cancel" : "Exit";
          document["".concat(this.prefix).concat(t).concat(this.property)]();
        }
      } else (document.cancelFullScreen || document.exitFullscreen).call(document);
    }
  }, {
    key: "toggle",
    value: function value() {
      this.active ? this.exit() : this.enter();
    }
  }, {
    key: "usingNative",
    get: function get() {
      return e["native"] && !this.forceFallback;
    }
  }, {
    key: "enabled",
    get: function get() {
      return (e["native"] || this.player.config.fullscreen.fallback) && this.player.config.fullscreen.enabled && this.player.supported.ui && this.player.isVideo;
    }
  }, {
    key: "active",
    get: function get() {
      return !!this.enabled && (!e["native"] || this.forceFallback ? hasClass(this.target, this.player.config.classNames.fullscreen.fallback) : (this.prefix ? document["".concat(this.prefix).concat(this.property, "Element")] : document.fullscreenElement) === this.target);
    }
  }, {
    key: "target",
    get: function get() {
      return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;
    }
  }], [{
    key: "native",
    get: function get() {
      return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);
    }
  }, {
    key: "prefix",
    get: function get() {
      if (is$1["function"](document.exitFullscreen)) return "";
      var e = "";
      return ["webkit", "moz", "ms"].some(function (t) {
        return !(!is$1["function"](document["".concat(t, "ExitFullscreen")]) && !is$1["function"](document["".concat(t, "CancelFullScreen")])) && (e = t, !0);
      }), e;
    }
  }, {
    key: "property",
    get: function get() {
      return "moz" === this.prefix ? "FullScreen" : "Fullscreen";
    }
  }]), e;
}(),
    mathSign = Math.sign || function (e) {
  return 0 == (e = +e) || e != e ? e : e < 0 ? -1 : 1;
};

function loadImage(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
  return new Promise(function (n, r) {
    var i = new Image(),
        o = function o() {
      delete i.onload, delete i.onerror, (i.naturalWidth >= t ? n : r)(i);
    };

    Object.assign(i, {
      onload: o,
      onerror: o,
      src: e
    });
  });
}

_export({
  target: "Math",
  stat: !0
}, {
  sign: mathSign
});

var ui = {
  addStyleHook: function addStyleHook() {
    toggleClass(this.elements.container, this.config.selectors.container.replace(".", ""), !0), toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);
  },
  toggleNativeControls: function toggleNativeControls() {
    arguments.length > 0 && void 0 !== arguments[0] && arguments[0] && this.isHTML5 ? this.media.setAttribute("controls", "") : this.media.removeAttribute("controls");
  },
  build: function build() {
    var e = this;
    if (this.listeners.media(), !this.supported.ui) return this.debug.warn("Basic support only for ".concat(this.provider, " ").concat(this.type)), void ui.toggleNativeControls.call(this, !0);
    is$1.element(this.elements.controls) || (controls.inject.call(this), this.listeners.controls()), ui.toggleNativeControls.call(this), this.isHTML5 && captions.setup.call(this), this.volume = null, this.muted = null, this.loop = null, this.quality = null, this.speed = null, controls.updateVolume.call(this), controls.timeUpdate.call(this), ui.checkPlaying.call(this), toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo), toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5), toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos), toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch), this.ready = !0, setTimeout(function () {
      triggerEvent.call(e, e.media, "ready");
    }, 0), ui.setTitle.call(this), this.poster && ui.setPoster.call(this, this.poster, !1)["catch"](function () {}), this.config.duration && controls.durationUpdate.call(this);
  },
  setTitle: function setTitle() {
    var e = i18n.get("play", this.config);

    if (is$1.string(this.config.title) && !is$1.empty(this.config.title) && (e += ", ".concat(this.config.title)), Array.from(this.elements.buttons.play || []).forEach(function (t) {
      t.setAttribute("aria-label", e);
    }), this.isEmbed) {
      var t = getElement.call(this, "iframe");
      if (!is$1.element(t)) return;
      var n = is$1.empty(this.config.title) ? "video" : this.config.title,
          r = i18n.get("frameTitle", this.config);
      t.setAttribute("title", r.replace("{title}", n));
    }
  },
  togglePoster: function togglePoster(e) {
    toggleClass(this.elements.container, this.config.classNames.posterEnabled, e);
  },
  setPoster: function setPoster(e) {
    var t = this;
    return arguments.length > 1 && void 0 !== arguments[1] && !arguments[1] || !this.poster ? (this.media.setAttribute("poster", e), ready.call(this).then(function () {
      return loadImage(e);
    })["catch"](function (n) {
      throw e === t.poster && ui.togglePoster.call(t, !1), n;
    }).then(function () {
      if (e !== t.poster) throw new Error("setPoster cancelled by later call to setPoster");
    }).then(function () {
      return Object.assign(t.elements.poster.style, {
        backgroundImage: "url('".concat(e, "')"),
        backgroundSize: ""
      }), ui.togglePoster.call(t, !0), e;
    })) : Promise.reject(new Error("Poster already set"));
  },
  checkPlaying: function checkPlaying(e) {
    var t = this;
    toggleClass(this.elements.container, this.config.classNames.playing, this.playing), toggleClass(this.elements.container, this.config.classNames.paused, this.paused), toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped), Array.from(this.elements.buttons.play || []).forEach(function (e) {
      Object.assign(e, {
        pressed: t.playing
      });
    }), is$1.event(e) && "timeupdate" === e.type || ui.toggleControls.call(this);
  },
  checkLoading: function checkLoading(e) {
    var t = this;
    this.loading = ["stalled", "waiting"].includes(e.type), clearTimeout(this.timers.loading), this.timers.loading = setTimeout(function () {
      toggleClass(t.elements.container, t.config.classNames.loading, t.loading), ui.toggleControls.call(t);
    }, this.loading ? 250 : 0);
  },
  toggleControls: function toggleControls(e) {
    var t = this.elements.controls;

    if (t && this.config.hideControls) {
      var n = this.touch && this.lastSeekTime + 2e3 > Date.now();
      this.toggleControls(Boolean(e || this.loading || this.paused || t.pressed || t.hover || n));
    }
  }
},
    Listeners = function () {
  function e(t) {
    _classCallCheck(this, e), this.player = t, this.lastKey = null, this.focusTimer = null, this.lastKeyDown = null, this.handleKey = this.handleKey.bind(this), this.toggleMenu = this.toggleMenu.bind(this), this.setTabFocus = this.setTabFocus.bind(this), this.firstTouch = this.firstTouch.bind(this);
  }

  return _createClass(e, [{
    key: "handleKey",
    value: function value(e) {
      var t = this.player,
          n = t.elements,
          r = e.keyCode ? e.keyCode : e.which,
          i = "keydown" === e.type,
          o = i && r === this.lastKey;

      if (!(e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) && is$1.number(r)) {
        if (i) {
          var a = document.activeElement;

          if (is$1.element(a)) {
            var s = t.config.selectors.editable;
            if (a !== n.inputs.seek && matches$1(a, s)) return;
            if (32 === e.which && matches$1(a, 'button, [role^="menuitem"]')) return;
          }

          switch ([32, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 56, 57, 67, 70, 73, 75, 76, 77, 79].includes(r) && (e.preventDefault(), e.stopPropagation()), r) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              o || (t.currentTime = t.duration / 10 * (r - 48));
              break;

            case 32:
            case 75:
              o || t.togglePlay();
              break;

            case 38:
              t.increaseVolume(.1);
              break;

            case 40:
              t.decreaseVolume(.1);
              break;

            case 77:
              o || (t.muted = !t.muted);
              break;

            case 39:
              t.forward();
              break;

            case 37:
              t.rewind();
              break;

            case 70:
              t.fullscreen.toggle();
              break;

            case 67:
              o || t.toggleCaptions();
              break;

            case 76:
              t.loop = !t.loop;
          }

          27 === r && !t.fullscreen.usingNative && t.fullscreen.active && t.fullscreen.toggle(), this.lastKey = r;
        } else this.lastKey = null;
      }
    }
  }, {
    key: "toggleMenu",
    value: function value(e) {
      controls.toggleMenu.call(this.player, e);
    }
  }, {
    key: "firstTouch",
    value: function value() {
      var e = this.player,
          t = e.elements;
      e.touch = !0, toggleClass(t.container, e.config.classNames.isTouch, !0);
    }
  }, {
    key: "setTabFocus",
    value: function value(e) {
      var t = this.player,
          n = t.elements;

      if (clearTimeout(this.focusTimer), "keydown" !== e.type || 9 === e.which) {
        "keydown" === e.type && (this.lastKeyDown = e.timeStamp);
        var r,
            i = e.timeStamp - this.lastKeyDown <= 20;
        if ("focus" !== e.type || i) r = t.config.classNames.tabFocus, toggleClass(getElements.call(t, ".".concat(r)), r, !1), this.focusTimer = setTimeout(function () {
          var e = document.activeElement;
          n.container.contains(e) && toggleClass(document.activeElement, t.config.classNames.tabFocus, !0);
        }, 10);
      }
    }
  }, {
    key: "global",
    value: function value() {
      var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
          t = this.player;
      t.config.keyboard.global && toggleListener.call(t, window, "keydown keyup", this.handleKey, e, !1), toggleListener.call(t, document.body, "click", this.toggleMenu, e), once.call(t, document.body, "touchstart", this.firstTouch), toggleListener.call(t, document.body, "keydown focus blur", this.setTabFocus, e, !1, !0);
    }
  }, {
    key: "container",
    value: function value() {
      var e = this.player,
          t = e.config,
          n = e.elements,
          r = e.timers;
      !t.keyboard.global && t.keyboard.focused && on.call(e, n.container, "keydown keyup", this.handleKey, !1), on.call(e, n.container, "mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen", function (t) {
        var i = n.controls;
        i && "enterfullscreen" === t.type && (i.pressed = !1, i.hover = !1);
        var o = 0;
        ["touchstart", "touchmove", "mousemove"].includes(t.type) && (ui.toggleControls.call(e, !0), o = e.touch ? 3e3 : 2e3), clearTimeout(r.controls), r.controls = setTimeout(function () {
          return ui.toggleControls.call(e, !1);
        }, o);
      });

      var i = function i(t) {
        if (!t) return setAspectRatio.call(e);
        var r = n.container.getBoundingClientRect(),
            i = r.width,
            o = r.height;
        return setAspectRatio.call(e, "".concat(i, ":").concat(o));
      },
          o = function o() {
        clearTimeout(r.resized), r.resized = setTimeout(i, 50);
      };

      on.call(e, n.container, "enterfullscreen exitfullscreen", function (t) {
        var r = e.fullscreen,
            a = r.target,
            s = r.usingNative;

        if (a === n.container && (e.isEmbed || !is$1.empty(e.config.ratio))) {
          var l = "enterfullscreen" === t.type,
              c = i(l);
          c.padding;
          !function (t, n, r) {
            if (e.isVimeo) {
              var i = e.elements.wrapper.firstChild,
                  o = _slicedToArray(t, 2)[1],
                  a = _slicedToArray(getAspectRatio.call(e), 2),
                  s = a[0],
                  l = a[1];

              i.style.maxWidth = r ? "".concat(o / l * s, "px") : null, i.style.margin = r ? "0 auto" : null;
            }
          }(c.ratio, 0, l), s || (l ? on.call(e, window, "resize", o) : off.call(e, window, "resize", o));
        }
      });
    }
  }, {
    key: "media",
    value: function value() {
      var e = this,
          t = this.player,
          n = t.elements;

      if (on.call(t, t.media, "timeupdate seeking seeked", function (e) {
        return controls.timeUpdate.call(t, e);
      }), on.call(t, t.media, "durationchange loadeddata loadedmetadata", function (e) {
        return controls.durationUpdate.call(t, e);
      }), on.call(t, t.media, "canplay loadeddata", function () {
        toggleHidden(n.volume, !t.hasAudio), toggleHidden(n.buttons.mute, !t.hasAudio);
      }), on.call(t, t.media, "ended", function () {
        t.isHTML5 && t.isVideo && t.config.resetOnEnd && t.restart();
      }), on.call(t, t.media, "progress playing seeking seeked", function (e) {
        return controls.updateProgress.call(t, e);
      }), on.call(t, t.media, "volumechange", function (e) {
        return controls.updateVolume.call(t, e);
      }), on.call(t, t.media, "playing play pause ended emptied timeupdate", function (e) {
        return ui.checkPlaying.call(t, e);
      }), on.call(t, t.media, "waiting canplay seeked playing", function (e) {
        return ui.checkLoading.call(t, e);
      }), t.supported.ui && t.config.clickToPlay && !t.isAudio) {
        var r = getElement.call(t, ".".concat(t.config.classNames.video));
        if (!is$1.element(r)) return;
        on.call(t, n.container, "click", function (i) {
          ([n.container, r].includes(i.target) || r.contains(i.target)) && (t.touch && t.config.hideControls || (t.ended ? (e.proxy(i, t.restart, "restart"), e.proxy(i, t.play, "play")) : e.proxy(i, t.togglePlay, "play")));
        });
      }

      t.supported.ui && t.config.disableContextMenu && on.call(t, n.wrapper, "contextmenu", function (e) {
        e.preventDefault();
      }, !1), on.call(t, t.media, "volumechange", function () {
        t.storage.set({
          volume: t.volume,
          muted: t.muted
        });
      }), on.call(t, t.media, "ratechange", function () {
        controls.updateSetting.call(t, "speed"), t.storage.set({
          speed: t.speed
        });
      }), on.call(t, t.media, "qualitychange", function (e) {
        controls.updateSetting.call(t, "quality", null, e.detail.quality);
      }), on.call(t, t.media, "ready qualitychange", function () {
        controls.setDownloadUrl.call(t);
      });
      var i = t.config.events.concat(["keyup", "keydown"]).join(" ");
      on.call(t, t.media, i, function (e) {
        var r = e.detail,
            i = void 0 === r ? {} : r;
        "error" === e.type && (i = t.media.error), triggerEvent.call(t, n.container, e.type, !0, i);
      });
    }
  }, {
    key: "proxy",
    value: function value(e, t, n) {
      var r = this.player,
          i = r.config.listeners[n],
          o = !0;
      is$1["function"](i) && (o = i.call(r, e)), o && is$1["function"](t) && t.call(r, e);
    }
  }, {
    key: "bind",
    value: function value(e, t, n, r) {
      var i = this,
          o = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
          a = this.player,
          s = a.config.listeners[r],
          l = is$1["function"](s);
      on.call(a, e, t, function (e) {
        return i.proxy(e, n, r);
      }, o && !l);
    }
  }, {
    key: "controls",
    value: function value() {
      var e = this,
          t = this.player,
          n = t.elements,
          r = browser.isIE ? "change" : "input";

      if (n.buttons.play && Array.from(n.buttons.play).forEach(function (n) {
        e.bind(n, "click", t.togglePlay, "play");
      }), this.bind(n.buttons.restart, "click", t.restart, "restart"), this.bind(n.buttons.rewind, "click", t.rewind, "rewind"), this.bind(n.buttons.fastForward, "click", t.forward, "fastForward"), this.bind(n.buttons.mute, "click", function () {
        t.muted = !t.muted;
      }, "mute"), this.bind(n.buttons.captions, "click", function () {
        return t.toggleCaptions();
      }), this.bind(n.buttons.download, "click", function () {
        triggerEvent.call(t, t.media, "download");
      }, "download"), this.bind(n.buttons.fullscreen, "click", function () {
        t.fullscreen.toggle();
      }, "fullscreen"), this.bind(n.buttons.pip, "click", function () {
        t.pip = "toggle";
      }, "pip"), this.bind(n.buttons.airplay, "click", t.airplay, "airplay"), this.bind(n.buttons.settings, "click", function (e) {
        e.stopPropagation(), controls.toggleMenu.call(t, e);
      }), this.bind(n.buttons.settings, "keyup", function (e) {
        var n = e.which;
        [13, 32].includes(n) && (13 !== n ? (e.preventDefault(), e.stopPropagation(), controls.toggleMenu.call(t, e)) : controls.focusFirstMenuItem.call(t, null, !0));
      }, null, !1), this.bind(n.settings.menu, "keydown", function (e) {
        27 === e.which && controls.toggleMenu.call(t, e);
      }), this.bind(n.inputs.seek, "mousedown mousemove", function (e) {
        var t = n.progress.getBoundingClientRect(),
            r = 100 / t.width * (e.pageX - t.left);
        e.currentTarget.setAttribute("seek-value", r);
      }), this.bind(n.inputs.seek, "mousedown mouseup keydown keyup touchstart touchend", function (e) {
        var n = e.currentTarget,
            r = e.keyCode ? e.keyCode : e.which;

        if (!is$1.keyboardEvent(e) || 39 === r || 37 === r) {
          t.lastSeekTime = Date.now();
          var i = n.hasAttribute("play-on-seeked"),
              o = ["mouseup", "touchend", "keyup"].includes(e.type);
          i && o ? (n.removeAttribute("play-on-seeked"), t.play()) : !o && t.playing && (n.setAttribute("play-on-seeked", ""), t.pause());
        }
      }), browser.isIos) {
        var i = getElements.call(t, 'input[type="range"]');
        Array.from(i).forEach(function (t) {
          return e.bind(t, r, function (e) {
            return repaint(e.target);
          });
        });
      }

      this.bind(n.inputs.seek, r, function (e) {
        var n = e.currentTarget,
            r = n.getAttribute("seek-value");
        is$1.empty(r) && (r = n.value), n.removeAttribute("seek-value"), t.currentTime = r / n.max * t.duration;
      }, "seek"), this.bind(n.progress, "mouseenter mouseleave mousemove", function (e) {
        return controls.updateSeekTooltip.call(t, e);
      }), this.bind(n.progress, "mousemove touchmove", function (e) {
        var n = t.previewThumbnails;
        n && n.loaded && n.startMove(e);
      }), this.bind(n.progress, "mouseleave click", function () {
        var e = t.previewThumbnails;
        e && e.loaded && e.endMove(!1, !0);
      }), this.bind(n.progress, "mousedown touchstart", function (e) {
        var n = t.previewThumbnails;
        n && n.loaded && n.startScrubbing(e);
      }), this.bind(n.progress, "mouseup touchend", function (e) {
        var n = t.previewThumbnails;
        n && n.loaded && n.endScrubbing(e);
      }), browser.isWebkit && Array.from(getElements.call(t, 'input[type="range"]')).forEach(function (n) {
        e.bind(n, "input", function (e) {
          return controls.updateRangeFill.call(t, e.target);
        });
      }), t.config.toggleInvert && !is$1.element(n.display.duration) && this.bind(n.display.currentTime, "click", function () {
        0 !== t.currentTime && (t.config.invertTime = !t.config.invertTime, controls.timeUpdate.call(t));
      }), this.bind(n.inputs.volume, r, function (e) {
        t.volume = e.target.value;
      }, "volume"), this.bind(n.controls, "mouseenter mouseleave", function (e) {
        n.controls.hover = !t.touch && "mouseenter" === e.type;
      }), this.bind(n.controls, "mousedown mouseup touchstart touchend touchcancel", function (e) {
        n.controls.pressed = ["mousedown", "touchstart"].includes(e.type);
      }), this.bind(n.controls, "focusin", function () {
        var r = t.config,
            i = t.timers;
        toggleClass(n.controls, r.classNames.noTransition, !0), ui.toggleControls.call(t, !0), setTimeout(function () {
          toggleClass(n.controls, r.classNames.noTransition, !1);
        }, 0);
        var o = e.touch ? 3e3 : 4e3;
        clearTimeout(i.controls), i.controls = setTimeout(function () {
          return ui.toggleControls.call(t, !1);
        }, o);
      }), this.bind(n.inputs.volume, "wheel", function (e) {
        var n = e.webkitDirectionInvertedFromDevice,
            r = _slicedToArray([e.deltaX, -e.deltaY].map(function (e) {
          return n ? -e : e;
        }), 2),
            i = r[0],
            o = r[1],
            a = Math.sign(Math.abs(i) > Math.abs(o) ? i : o);

        t.increaseVolume(a / 50);
        var s = t.media.volume;
        (1 === a && s < 1 || -1 === a && s > 0) && e.preventDefault();
      }, "volume", !1);
    }
  }]), e;
}(),
    defineProperty$5 = objectDefineProperty.f,
    FunctionPrototype = Function.prototype,
    FunctionPrototypeToString = FunctionPrototype.toString,
    nameRE = /^\s*function ([^ (]*)/,
    NAME = "name";

!descriptors || NAME in FunctionPrototype || defineProperty$5(FunctionPrototype, NAME, {
  configurable: !0,
  get: function get() {
    try {
      return FunctionPrototypeToString.call(this).match(nameRE)[1];
    } catch (e) {
      return "";
    }
  }
});
var max$3 = Math.max,
    min$5 = Math.min,
    MAX_SAFE_INTEGER$1 = 9007199254740991,
    MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";

_export({
  target: "Array",
  proto: !0,
  forced: !arrayMethodHasSpeciesSupport("splice")
}, {
  splice: function splice(e, t) {
    var n,
        r,
        i,
        o,
        a,
        s,
        l = toObject(this),
        c = toLength(l.length),
        u = toAbsoluteIndex(e, c),
        d = arguments.length;
    if (0 === d ? n = r = 0 : 1 === d ? (n = 0, r = c - u) : (n = d - 2, r = min$5(max$3(toInteger(t), 0), c - u)), c + n - r > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);

    for (i = arraySpeciesCreate(l, r), o = 0; o < r; o++) {
      (a = u + o) in l && createProperty(i, o, l[a]);
    }

    if (i.length = r, n < r) {
      for (o = u; o < c - r; o++) {
        s = o + n, (a = o + r) in l ? l[s] = l[a] : delete l[s];
      }

      for (o = c; o > c - r + n; o--) {
        delete l[o - 1];
      }
    } else if (n > r) for (o = c - r; o > u; o--) {
      s = o + n - 1, (a = o + r - 1) in l ? l[s] = l[a] : delete l[s];
    }

    for (o = 0; o < n; o++) {
      l[o + u] = arguments[o + 2];
    }

    return l.length = c - r + n, i;
  }
});

var loadjs_umd = createCommonjsModule(function (e, t) {
  e.exports = function () {
    var e = function e() {},
        t = {},
        n = {},
        r = {};

    function i(e, t) {
      if (e) {
        var i = r[e];
        if (n[e] = t, i) for (; i.length;) {
          i[0](e, t), i.splice(0, 1);
        }
      }
    }

    function o(t, n) {
      t.call && (t = {
        success: t
      }), n.length ? (t.error || e)(n) : (t.success || e)(t);
    }

    function a(t, n, r, i) {
      var o,
          s,
          l = document,
          c = r.async,
          u = (r.numRetries || 0) + 1,
          d = r.before || e,
          h = t.replace(/^(css|img)!/, "");
      i = i || 0, /(^css!|\.css$)/.test(t) ? ((s = l.createElement("link")).rel = "stylesheet", s.href = h, (o = "hideFocus" in s) && s.relList && (o = 0, s.rel = "preload", s.as = "style")) : /(^img!|\.(png|gif|jpg|svg)$)/.test(t) ? (s = l.createElement("img")).src = h : ((s = l.createElement("script")).src = t, s.async = void 0 === c || c), s.onload = s.onerror = s.onbeforeload = function (e) {
        var l = e.type[0];
        if (o) try {
          s.sheet.cssText.length || (l = "e");
        } catch (e) {
          18 != e.code && (l = "e");
        }

        if ("e" == l) {
          if ((i += 1) < u) return a(t, n, r, i);
        } else if ("preload" == s.rel && "style" == s.as) return s.rel = "stylesheet";

        n(t, l, e.defaultPrevented);
      }, !1 !== d(t, s) && l.head.appendChild(s);
    }

    function s(e, n, r) {
      var s, l;

      if (n && n.trim && (s = n), l = (s ? r : n) || {}, s) {
        if (s in t) throw "LoadJS";
        t[s] = !0;
      }

      function c(t, n) {
        !function (e, t, n) {
          var r,
              i,
              o = (e = e.push ? e : [e]).length,
              s = o,
              l = [];

          for (r = function r(e, n, _r) {
            if ("e" == n && l.push(e), "b" == n) {
              if (!_r) return;
              l.push(e);
            }

            --o || t(l);
          }, i = 0; i < s; i++) {
            a(e[i], r, n);
          }
        }(e, function (e) {
          o(l, e), t && o({
            success: t,
            error: n
          }, e), i(s, e);
        }, l);
      }

      if (l.returnPromise) return new Promise(c);
      c();
    }

    return s.ready = function (e, t) {
      return function (e, t) {
        e = e.push ? e : [e];
        var i,
            o,
            a,
            s = [],
            l = e.length,
            c = l;

        for (i = function i(e, n) {
          n.length && s.push(e), --c || t(s);
        }; l--;) {
          o = e[l], (a = n[o]) ? i(o, a) : (r[o] = r[o] || []).push(i);
        }
      }(e, function (e) {
        o(t, e);
      }), s;
    }, s.done = function (e) {
      i(e, []);
    }, s.reset = function () {
      t = {}, n = {}, r = {};
    }, s.isDefined = function (e) {
      return e in t;
    }, s;
  }();
});

function loadScript(e) {
  return new Promise(function (t, n) {
    loadjs_umd(e, {
      success: t,
      error: n
    });
  });
}

function parseId(e) {
  if (is$1.empty(e)) return null;
  if (is$1.number(Number(e))) return e;
  return e.match(/^.*(vimeo.com\/|video\/)(\d+).*/) ? RegExp.$2 : e;
}

function assurePlaybackState(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}

var vimeo = {
  setup: function setup() {
    var e = this;
    toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), setAspectRatio.call(this), is$1.object(window.Vimeo) ? vimeo.ready.call(this) : loadScript(this.config.urls.vimeo.sdk).then(function () {
      vimeo.ready.call(e);
    })["catch"](function (t) {
      e.debug.warn("Vimeo SDK (player.js) failed to load", t);
    });
  },
  ready: function ready() {
    var e = this,
        t = this,
        n = t.config.vimeo,
        r = buildUrlParams(extend({}, {
      loop: t.config.loop.active,
      autoplay: t.autoplay,
      muted: t.muted,
      gesture: "media",
      playsinline: !this.config.fullscreen.iosNative
    }, n)),
        i = t.media.getAttribute("src");
    is$1.empty(i) && (i = t.media.getAttribute(t.config.attributes.embed.id));
    var o = parseId(i),
        a = createElement("iframe"),
        s = format(t.config.urls.vimeo.iframe, o, r);
    a.setAttribute("src", s), a.setAttribute("allowfullscreen", ""), a.setAttribute("allowtransparency", ""), a.setAttribute("allow", "autoplay");
    var l = createElement("div", {
      poster: t.poster,
      "class": t.config.classNames.embedContainer
    });
    l.appendChild(a), t.media = replaceElement(l, t.media), fetch(format(t.config.urls.vimeo.api, o), "json").then(function (e) {
      if (!is$1.empty(e)) {
        var n = new URL(e[0].thumbnail_large);
        n.pathname = "".concat(n.pathname.split("_")[0], ".jpg"), ui.setPoster.call(t, n.href)["catch"](function () {});
      }
    }), t.embed = new window.Vimeo.Player(a, {
      autopause: t.config.autopause,
      muted: t.muted
    }), t.media.paused = !0, t.media.currentTime = 0, t.supported.ui && t.embed.disableTextTrack(), t.media.play = function () {
      return assurePlaybackState.call(t, !0), t.embed.play();
    }, t.media.pause = function () {
      return assurePlaybackState.call(t, !1), t.embed.pause();
    }, t.media.stop = function () {
      t.pause(), t.currentTime = 0;
    };
    var c = t.media.currentTime;
    Object.defineProperty(t.media, "currentTime", {
      get: function get() {
        return c;
      },
      set: function set(e) {
        var n = t.embed,
            r = t.media,
            i = t.paused,
            o = t.volume,
            a = i && !n.hasPlayed;
        r.seeking = !0, triggerEvent.call(t, r, "seeking"), Promise.resolve(a && n.setVolume(0)).then(function () {
          return n.setCurrentTime(e);
        }).then(function () {
          return a && n.pause();
        }).then(function () {
          return a && n.setVolume(o);
        })["catch"](function () {});
      }
    });
    var u = t.config.speed.selected;
    Object.defineProperty(t.media, "playbackRate", {
      get: function get() {
        return u;
      },
      set: function set(e) {
        t.embed.setPlaybackRate(e).then(function () {
          u = e, triggerEvent.call(t, t.media, "ratechange");
        })["catch"](function (e) {
          "Error" === e.name && controls.setSpeedMenu.call(t, []);
        });
      }
    });
    var d = t.config.volume;
    Object.defineProperty(t.media, "volume", {
      get: function get() {
        return d;
      },
      set: function set(e) {
        t.embed.setVolume(e).then(function () {
          d = e, triggerEvent.call(t, t.media, "volumechange");
        });
      }
    });
    var h = t.config.muted;
    Object.defineProperty(t.media, "muted", {
      get: function get() {
        return h;
      },
      set: function set(e) {
        var n = !!is$1["boolean"](e) && e;
        t.embed.setVolume(n ? 0 : t.config.volume).then(function () {
          h = n, triggerEvent.call(t, t.media, "volumechange");
        });
      }
    });
    var p,
        f = t.config.loop;
    Object.defineProperty(t.media, "loop", {
      get: function get() {
        return f;
      },
      set: function set(e) {
        var n = is$1["boolean"](e) ? e : t.config.loop.active;
        t.embed.setLoop(n).then(function () {
          f = n;
        });
      }
    }), t.embed.getVideoUrl().then(function (e) {
      p = e, controls.setDownloadUrl.call(t);
    })["catch"](function (t) {
      e.debug.warn(t);
    }), Object.defineProperty(t.media, "currentSrc", {
      get: function get() {
        return p;
      }
    }), Object.defineProperty(t.media, "ended", {
      get: function get() {
        return t.currentTime === t.duration;
      }
    }), Promise.all([t.embed.getVideoWidth(), t.embed.getVideoHeight()]).then(function (n) {
      var r = _slicedToArray(n, 2),
          i = r[0],
          o = r[1];

      t.embed.ratio = [i, o], setAspectRatio.call(e);
    }), t.embed.setAutopause(t.config.autopause).then(function (e) {
      t.config.autopause = e;
    }), t.embed.getVideoTitle().then(function (n) {
      t.config.title = n, ui.setTitle.call(e);
    }), t.embed.getCurrentTime().then(function (e) {
      c = e, triggerEvent.call(t, t.media, "timeupdate");
    }), t.embed.getDuration().then(function (e) {
      t.media.duration = e, triggerEvent.call(t, t.media, "durationchange");
    }), t.embed.getTextTracks().then(function (e) {
      t.media.textTracks = e, captions.setup.call(t);
    }), t.embed.on("cuechange", function (e) {
      var n = e.cues,
          r = (void 0 === n ? [] : n).map(function (e) {
        return stripHTML(e.text);
      });
      captions.updateCues.call(t, r);
    }), t.embed.on("loaded", function () {
      (t.embed.getPaused().then(function (e) {
        assurePlaybackState.call(t, !e), e || triggerEvent.call(t, t.media, "playing");
      }), is$1.element(t.embed.element) && t.supported.ui) && t.embed.element.setAttribute("tabindex", -1);
    }), t.embed.on("play", function () {
      assurePlaybackState.call(t, !0), triggerEvent.call(t, t.media, "playing");
    }), t.embed.on("pause", function () {
      assurePlaybackState.call(t, !1);
    }), t.embed.on("timeupdate", function (e) {
      t.media.seeking = !1, c = e.seconds, triggerEvent.call(t, t.media, "timeupdate");
    }), t.embed.on("progress", function (e) {
      t.media.buffered = e.percent, triggerEvent.call(t, t.media, "progress"), 1 === parseInt(e.percent, 10) && triggerEvent.call(t, t.media, "canplaythrough"), t.embed.getDuration().then(function (e) {
        e !== t.media.duration && (t.media.duration = e, triggerEvent.call(t, t.media, "durationchange"));
      });
    }), t.embed.on("seeked", function () {
      t.media.seeking = !1, triggerEvent.call(t, t.media, "seeked");
    }), t.embed.on("ended", function () {
      t.media.paused = !0, triggerEvent.call(t, t.media, "ended");
    }), t.embed.on("error", function (e) {
      t.media.error = e, triggerEvent.call(t, t.media, "error");
    }), setTimeout(function () {
      return ui.build.call(t);
    }, 0);
  }
};

function parseId$1(e) {
  if (is$1.empty(e)) return null;
  return e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/) ? RegExp.$2 : e;
}

function assurePlaybackState$1(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}

function getHost$1(e) {
  return e.noCookie ? "https://www.youtube-nocookie.com" : "http:" === window.location.protocol ? "http://www.youtube.com" : void 0;
}

var youtube = {
  setup: function setup() {
    var e = this;
    if (toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), is$1.object(window.YT) && is$1["function"](window.YT.Player)) youtube.ready.call(this);else {
      var t = window.onYouTubeIframeAPIReady;
      window.onYouTubeIframeAPIReady = function () {
        is$1["function"](t) && t(), youtube.ready.call(e);
      }, loadScript(this.config.urls.youtube.sdk)["catch"](function (t) {
        e.debug.warn("YouTube API failed to load", t);
      });
    }
  },
  getTitle: function getTitle(e) {
    var t = this;
    fetch(format(this.config.urls.youtube.api, e)).then(function (e) {
      if (is$1.object(e)) {
        var n = e.title,
            r = e.height,
            i = e.width;
        t.config.title = n, ui.setTitle.call(t), t.embed.ratio = [i, r];
      }

      setAspectRatio.call(t);
    })["catch"](function () {
      setAspectRatio.call(t);
    });
  },
  ready: function ready() {
    var e = this,
        t = e.media && e.media.getAttribute("id");

    if (is$1.empty(t) || !t.startsWith("youtube-")) {
      var n = e.media.getAttribute("src");
      is$1.empty(n) && (n = e.media.getAttribute(this.config.attributes.embed.id));
      var r = parseId$1(n),
          i = generateId(e.provider),
          o = createElement("div", {
        id: i,
        poster: e.poster
      });
      e.media = replaceElement(o, e.media);

      var a = function a(e) {
        return "https://i.ytimg.com/vi/".concat(r, "/").concat(e, "default.jpg");
      };

      loadImage(a("maxres"), 121)["catch"](function () {
        return loadImage(a("sd"), 121);
      })["catch"](function () {
        return loadImage(a("hq"));
      }).then(function (t) {
        return ui.setPoster.call(e, t.src);
      }).then(function (t) {
        t.includes("maxres") || (e.elements.poster.style.backgroundSize = "cover");
      })["catch"](function () {});
      var s = e.config.youtube;
      e.embed = new window.YT.Player(i, {
        videoId: r,
        host: getHost$1(s),
        playerVars: extend({}, {
          autoplay: e.config.autoplay ? 1 : 0,
          hl: e.config.hl,
          controls: e.supported.ui ? 0 : 1,
          disablekb: 1,
          playsinline: e.config.fullscreen.iosNative ? 0 : 1,
          cc_load_policy: e.captions.active ? 1 : 0,
          cc_lang_pref: e.config.captions.language,
          widget_referrer: window ? window.location.href : null
        }, s),
        events: {
          onError: function onError(t) {
            if (!e.media.error) {
              var n = t.data,
                  r = {
                2: "The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.",
                5: "The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.",
                100: "The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.",
                101: "The owner of the requested video does not allow it to be played in embedded players.",
                150: "The owner of the requested video does not allow it to be played in embedded players."
              }[n] || "An unknown error occured";
              e.media.error = {
                code: n,
                message: r
              }, triggerEvent.call(e, e.media, "error");
            }
          },
          onPlaybackRateChange: function onPlaybackRateChange(t) {
            var n = t.target;
            e.media.playbackRate = n.getPlaybackRate(), triggerEvent.call(e, e.media, "ratechange");
          },
          onReady: function onReady(t) {
            if (!is$1["function"](e.media.play)) {
              var n = t.target;
              youtube.getTitle.call(e, r), e.media.play = function () {
                assurePlaybackState$1.call(e, !0), n.playVideo();
              }, e.media.pause = function () {
                assurePlaybackState$1.call(e, !1), n.pauseVideo();
              }, e.media.stop = function () {
                n.stopVideo();
              }, e.media.duration = n.getDuration(), e.media.paused = !0, e.media.currentTime = 0, Object.defineProperty(e.media, "currentTime", {
                get: function get() {
                  return Number(n.getCurrentTime());
                },
                set: function set(t) {
                  e.paused && !e.embed.hasPlayed && e.embed.mute(), e.media.seeking = !0, triggerEvent.call(e, e.media, "seeking"), n.seekTo(t);
                }
              }), Object.defineProperty(e.media, "playbackRate", {
                get: function get() {
                  return n.getPlaybackRate();
                },
                set: function set(e) {
                  n.setPlaybackRate(e);
                }
              });
              var i = e.config.volume;
              Object.defineProperty(e.media, "volume", {
                get: function get() {
                  return i;
                },
                set: function set(t) {
                  i = t, n.setVolume(100 * i), triggerEvent.call(e, e.media, "volumechange");
                }
              });
              var o = e.config.muted;
              Object.defineProperty(e.media, "muted", {
                get: function get() {
                  return o;
                },
                set: function set(t) {
                  var r = is$1["boolean"](t) ? t : o;
                  o = r, n[r ? "mute" : "unMute"](), triggerEvent.call(e, e.media, "volumechange");
                }
              }), Object.defineProperty(e.media, "currentSrc", {
                get: function get() {
                  return n.getVideoUrl();
                }
              }), Object.defineProperty(e.media, "ended", {
                get: function get() {
                  return e.currentTime === e.duration;
                }
              }), e.options.speed = n.getAvailablePlaybackRates(), e.supported.ui && e.media.setAttribute("tabindex", -1), triggerEvent.call(e, e.media, "timeupdate"), triggerEvent.call(e, e.media, "durationchange"), clearInterval(e.timers.buffering), e.timers.buffering = setInterval(function () {
                e.media.buffered = n.getVideoLoadedFraction(), (null === e.media.lastBuffered || e.media.lastBuffered < e.media.buffered) && triggerEvent.call(e, e.media, "progress"), e.media.lastBuffered = e.media.buffered, 1 === e.media.buffered && (clearInterval(e.timers.buffering), triggerEvent.call(e, e.media, "canplaythrough"));
              }, 200), setTimeout(function () {
                return ui.build.call(e);
              }, 50);
            }
          },
          onStateChange: function onStateChange(t) {
            var n = t.target;

            switch (clearInterval(e.timers.playing), e.media.seeking && [1, 2].includes(t.data) && (e.media.seeking = !1, triggerEvent.call(e, e.media, "seeked")), t.data) {
              case -1:
                triggerEvent.call(e, e.media, "timeupdate"), e.media.buffered = n.getVideoLoadedFraction(), triggerEvent.call(e, e.media, "progress");
                break;

              case 0:
                assurePlaybackState$1.call(e, !1), e.media.loop ? (n.stopVideo(), n.playVideo()) : triggerEvent.call(e, e.media, "ended");
                break;

              case 1:
                e.config.autoplay || !e.media.paused || e.embed.hasPlayed ? (assurePlaybackState$1.call(e, !0), triggerEvent.call(e, e.media, "playing"), e.timers.playing = setInterval(function () {
                  triggerEvent.call(e, e.media, "timeupdate");
                }, 50), e.media.duration !== n.getDuration() && (e.media.duration = n.getDuration(), triggerEvent.call(e, e.media, "durationchange"))) : e.media.pause();
                break;

              case 2:
                e.muted || e.embed.unMute(), assurePlaybackState$1.call(e, !1);
            }

            triggerEvent.call(e, e.elements.container, "statechange", !1, {
              code: t.data
            });
          }
        }
      });
    }
  }
},
    media = {
  setup: function setup() {
    this.media ? (toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", this.type), !0), toggleClass(this.elements.container, this.config.classNames.provider.replace("{0}", this.provider), !0), this.isEmbed && toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", "video"), !0), this.isVideo && (this.elements.wrapper = createElement("div", {
      "class": this.config.classNames.video
    }), wrap$1(this.media, this.elements.wrapper), this.elements.poster = createElement("div", {
      "class": this.config.classNames.poster
    }), this.elements.wrapper.appendChild(this.elements.poster)), this.isHTML5 ? html5.extend.call(this) : this.isYouTube ? youtube.setup.call(this) : this.isVimeo && vimeo.setup.call(this)) : this.debug.warn("No media element found!");
  }
},
    destroy = function destroy(e) {
  e.manager && e.manager.destroy(), e.elements.displayContainer && e.elements.displayContainer.destroy(), e.elements.container.remove();
},
    Ads = function () {
  function e(t) {
    var n = this;
    _classCallCheck(this, e), this.player = t, this.config = t.config.ads, this.playing = !1, this.initialized = !1, this.elements = {
      container: null,
      displayContainer: null
    }, this.manager = null, this.loader = null, this.cuePoints = null, this.events = {}, this.safetyTimer = null, this.countdownTimer = null, this.managerPromise = new Promise(function (e, t) {
      n.on("loaded", e), n.on("error", t);
    }), this.load();
  }

  return _createClass(e, [{
    key: "load",
    value: function value() {
      var e = this;
      this.enabled && (is$1.object(window.google) && is$1.object(window.google.ima) ? this.ready() : loadScript(this.player.config.urls.googleIMA.sdk).then(function () {
        e.ready();
      })["catch"](function () {
        e.trigger("error", new Error("Google IMA SDK failed to load"));
      }));
    }
  }, {
    key: "ready",
    value: function value() {
      var e = this;
      this.enabled || destroy(this), this.startSafetyTimer(12e3, "ready()"), this.managerPromise.then(function () {
        e.clearSafetyTimer("onAdsManagerLoaded()");
      }), this.listeners(), this.setupIMA();
    }
  }, {
    key: "setupIMA",
    value: function value() {
      this.elements.container = createElement("div", {
        "class": this.player.config.classNames.ads
      }), this.player.elements.container.appendChild(this.elements.container), google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED), google.ima.settings.setLocale(this.player.config.ads.language), google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline), this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container, this.player.media), this.requestAds();
    }
  }, {
    key: "requestAds",
    value: function value() {
      var e = this,
          t = this.player.elements.container;

      try {
        this.loader = new google.ima.AdsLoader(this.elements.displayContainer), this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, function (t) {
          return e.onAdsManagerLoaded(t);
        }, !1), this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (t) {
          return e.onAdError(t);
        }, !1);
        var n = new google.ima.AdsRequest();
        n.adTagUrl = this.tagUrl, n.linearAdSlotWidth = t.offsetWidth, n.linearAdSlotHeight = t.offsetHeight, n.nonLinearAdSlotWidth = t.offsetWidth, n.nonLinearAdSlotHeight = t.offsetHeight, n.forceNonLinearFullSlot = !1, n.setAdWillPlayMuted(!this.player.muted), this.loader.requestAds(n);
      } catch (e) {
        this.onAdError(e);
      }
    }
  }, {
    key: "pollCountdown",
    value: function value() {
      var e = this;
      if (!(arguments.length > 0 && void 0 !== arguments[0] && arguments[0])) return clearInterval(this.countdownTimer), void this.elements.container.removeAttribute("data-badge-text");
      this.countdownTimer = setInterval(function () {
        var t = _formatTime(Math.max(e.manager.getRemainingTime(), 0)),
            n = "".concat(i18n.get("advertisement", e.player.config), " - ").concat(t);

        e.elements.container.setAttribute("data-badge-text", n);
      }, 100);
    }
  }, {
    key: "onAdsManagerLoaded",
    value: function value(e) {
      var t = this;

      if (this.enabled) {
        var n = new google.ima.AdsRenderingSettings();
        n.restoreCustomPlaybackStateOnAdBreakComplete = !0, n.enablePreloading = !0, this.manager = e.getAdsManager(this.player, n), this.cuePoints = this.manager.getCuePoints(), this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (e) {
          return t.onAdError(e);
        }), Object.keys(google.ima.AdEvent.Type).forEach(function (e) {
          t.manager.addEventListener(google.ima.AdEvent.Type[e], function (e) {
            return t.onAdEvent(e);
          });
        }), this.trigger("loaded");
      }
    }
  }, {
    key: "addCuePoints",
    value: function value() {
      var e = this;
      is$1.empty(this.cuePoints) || this.cuePoints.forEach(function (t) {
        if (0 !== t && -1 !== t && t < e.player.duration) {
          var n = e.player.elements.progress;

          if (is$1.element(n)) {
            var r = 100 / e.player.duration * t,
                i = createElement("span", {
              "class": e.player.config.classNames.cues
            });
            i.style.left = "".concat(r.toString(), "%"), n.appendChild(i);
          }
        }
      });
    }
  }, {
    key: "onAdEvent",
    value: function value(e) {
      var t,
          n = this,
          r = this.player.elements.container,
          i = e.getAd(),
          o = e.getAdData();

      switch (t = e.type, triggerEvent.call(n.player, n.player.media, "ads".concat(t.replace(/_/g, "").toLowerCase())), e.type) {
        case google.ima.AdEvent.Type.LOADED:
          this.trigger("loaded"), this.pollCountdown(!0), i.isLinear() || (i.width = r.offsetWidth, i.height = r.offsetHeight);
          break;

        case google.ima.AdEvent.Type.STARTED:
          this.manager.setVolume(this.player.volume);
          break;

        case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
          this.loadAds();
          break;

        case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:
          this.pauseContent();
          break;

        case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:
          this.pollCountdown(), this.resumeContent();
          break;

        case google.ima.AdEvent.Type.LOG:
          o.adError && this.player.debug.warn("Non-fatal ad error: ".concat(o.adError.getMessage()));
      }
    }
  }, {
    key: "onAdError",
    value: function value(e) {
      this.cancel(), this.player.debug.warn("Ads error", e);
    }
  }, {
    key: "listeners",
    value: function value() {
      var e,
          t = this,
          n = this.player.elements.container;
      this.player.on("canplay", function () {
        t.addCuePoints();
      }), this.player.on("ended", function () {
        t.loader.contentComplete();
      }), this.player.on("timeupdate", function () {
        e = t.player.currentTime;
      }), this.player.on("seeked", function () {
        var n = t.player.currentTime;
        is$1.empty(t.cuePoints) || t.cuePoints.forEach(function (r, i) {
          e < r && r < n && (t.manager.discardAdBreak(), t.cuePoints.splice(i, 1));
        });
      }), window.addEventListener("resize", function () {
        t.manager && t.manager.resize(n.offsetWidth, n.offsetHeight, google.ima.ViewMode.NORMAL);
      });
    }
  }, {
    key: "play",
    value: function value() {
      var e = this,
          t = this.player.elements.container;
      this.managerPromise || this.resumeContent(), this.managerPromise.then(function () {
        e.manager.setVolume(e.player.volume), e.elements.displayContainer.initialize();

        try {
          e.initialized || (e.manager.init(t.offsetWidth, t.offsetHeight, google.ima.ViewMode.NORMAL), e.manager.start()), e.initialized = !0;
        } catch (t) {
          e.onAdError(t);
        }
      })["catch"](function () {});
    }
  }, {
    key: "resumeContent",
    value: function value() {
      this.elements.container.style.zIndex = "", this.playing = !1, this.player.media.play();
    }
  }, {
    key: "pauseContent",
    value: function value() {
      this.elements.container.style.zIndex = 3, this.playing = !0, this.player.media.pause();
    }
  }, {
    key: "cancel",
    value: function value() {
      this.initialized && this.resumeContent(), this.trigger("error"), this.loadAds();
    }
  }, {
    key: "loadAds",
    value: function value() {
      var e = this;
      this.managerPromise.then(function () {
        e.manager && e.manager.destroy(), e.managerPromise = new Promise(function (t) {
          e.on("loaded", t), e.player.debug.log(e.manager);
        }), e.requestAds();
      })["catch"](function () {});
    }
  }, {
    key: "trigger",
    value: function value(e) {
      for (var t = this, n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) {
        r[i - 1] = arguments[i];
      }

      var o = this.events[e];
      is$1.array(o) && o.forEach(function (e) {
        is$1["function"](e) && e.apply(t, r);
      });
    }
  }, {
    key: "on",
    value: function value(e, t) {
      return is$1.array(this.events[e]) || (this.events[e] = []), this.events[e].push(t), this;
    }
  }, {
    key: "startSafetyTimer",
    value: function value(e, t) {
      var n = this;
      this.player.debug.log("Safety timer invoked from: ".concat(t)), this.safetyTimer = setTimeout(function () {
        n.cancel(), n.clearSafetyTimer("startSafetyTimer()");
      }, e);
    }
  }, {
    key: "clearSafetyTimer",
    value: function value(e) {
      is$1.nullOrUndefined(this.safetyTimer) || (this.player.debug.log("Safety timer cleared from: ".concat(e)), clearTimeout(this.safetyTimer), this.safetyTimer = null);
    }
  }, {
    key: "enabled",
    get: function get() {
      var e = this.config;
      return this.player.isHTML5 && this.player.isVideo && e.enabled && (!is$1.empty(e.publisherId) || is$1.url(e.tagUrl));
    }
  }, {
    key: "tagUrl",
    get: function get() {
      var e = this.config;
      if (is$1.url(e.tagUrl)) return e.tagUrl;
      var t = {
        AV_PUBLISHERID: "58c25bb0073ef448b1087ad6",
        AV_CHANNELID: "5a0458dc28a06145e4519d21",
        AV_URL: window.location.hostname,
        cb: Date.now(),
        AV_WIDTH: 640,
        AV_HEIGHT: 480,
        AV_CDIM2: this.publisherId
      };
      return "".concat("https://go.aniview.com/api/adserver6/vast/", "?").concat(buildUrlParams(t));
    }
  }]), e;
}(),
    $findIndex = arrayIteration.findIndex,
    FIND_INDEX = "findIndex",
    SKIPS_HOLES$1 = !0;

FIND_INDEX in [] && Array(1)[FIND_INDEX](function () {
  SKIPS_HOLES$1 = !1;
}), _export({
  target: "Array",
  proto: !0,
  forced: SKIPS_HOLES$1
}, {
  findIndex: function findIndex(e) {
    return $findIndex(this, e, arguments.length > 1 ? arguments[1] : void 0);
  }
}), addToUnscopables(FIND_INDEX);

var parseVtt = function parseVtt(e) {
  var t = [];
  return e.split(/\r\n\r\n|\n\n|\r\r/).forEach(function (e) {
    var n = {};
    e.split(/\r\n|\n|\r/).forEach(function (e) {
      if (is$1.number(n.startTime)) {
        if (!is$1.empty(e.trim()) && is$1.empty(n.text)) {
          var t = e.trim().split("#xywh="),
              r = _slicedToArray(t, 1);

          if (n.text = r[0], t[1]) {
            var i = _slicedToArray(t[1].split(","), 4);

            n.x = i[0], n.y = i[1], n.w = i[2], n.h = i[3];
          }
        }
      } else {
        var o = e.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/);
        o && (n.startTime = 60 * Number(o[1] || 0) * 60 + 60 * Number(o[2]) + Number(o[3]) + Number("0.".concat(o[4])), n.endTime = 60 * Number(o[6] || 0) * 60 + 60 * Number(o[7]) + Number(o[8]) + Number("0.".concat(o[9])));
      }
    }), n.text && t.push(n);
  }), t;
},
    PreviewThumbnails = function () {
  function e(t) {
    _classCallCheck(this, e), this.player = t, this.thumbnails = [], this.loaded = !1, this.lastMouseMoveTime = Date.now(), this.mouseDown = !1, this.loadedImages = [], this.elements = {
      thumb: {},
      scrubbing: {}
    }, this.load();
  }

  return _createClass(e, [{
    key: "load",
    value: function value() {
      var e = this;
      this.player.elements.display.seekTooltip && (this.player.elements.display.seekTooltip.hidden = this.enabled), this.enabled && this.getThumbnails().then(function () {
        e.enabled && (e.render(), e.determineContainerAutoSizing(), e.loaded = !0);
      });
    }
  }, {
    key: "getThumbnails",
    value: function value() {
      var e = this;
      return new Promise(function (t) {
        var n = e.player.config.previewThumbnails.src;
        if (is$1.empty(n)) throw new Error("Missing previewThumbnails.src config attribute");
        var r = (is$1.string(n) ? [n] : n).map(function (t) {
          return e.getThumbnail(t);
        });
        Promise.all(r).then(function () {
          e.thumbnails.sort(function (e, t) {
            return e.height - t.height;
          }), e.player.debug.log("Preview thumbnails", e.thumbnails), t();
        });
      });
    }
  }, {
    key: "getThumbnail",
    value: function value(e) {
      var t = this;
      return new Promise(function (n) {
        fetch(e).then(function (r) {
          var i = {
            frames: parseVtt(r),
            height: null,
            urlPrefix: ""
          };
          i.frames[0].text.startsWith("/") || i.frames[0].text.startsWith("http://") || i.frames[0].text.startsWith("https://") || (i.urlPrefix = e.substring(0, e.lastIndexOf("/") + 1));
          var o = new Image();
          o.onload = function () {
            i.height = o.naturalHeight, i.width = o.naturalWidth, t.thumbnails.push(i), n();
          }, o.src = i.urlPrefix + i.frames[0].text;
        });
      });
    }
  }, {
    key: "startMove",
    value: function value(e) {
      if (this.loaded && is$1.event(e) && ["touchmove", "mousemove"].includes(e.type) && this.player.media.duration) {
        if ("touchmove" === e.type) this.seekTime = this.player.media.duration * (this.player.elements.inputs.seek.value / 100);else {
          var t = this.player.elements.progress.getBoundingClientRect(),
              n = 100 / t.width * (e.pageX - t.left);
          this.seekTime = this.player.media.duration * (n / 100), this.seekTime < 0 && (this.seekTime = 0), this.seekTime > this.player.media.duration - 1 && (this.seekTime = this.player.media.duration - 1), this.mousePosX = e.pageX, this.elements.thumb.time.innerText = _formatTime(this.seekTime);
        }
        this.showImageAtCurrentTime();
      }
    }
  }, {
    key: "endMove",
    value: function value() {
      this.toggleThumbContainer(!1, !0);
    }
  }, {
    key: "startScrubbing",
    value: function value(e) {
      !1 !== e.button && 0 !== e.button || (this.mouseDown = !0, this.player.media.duration && (this.toggleScrubbingContainer(!0), this.toggleThumbContainer(!1, !0), this.showImageAtCurrentTime()));
    }
  }, {
    key: "endScrubbing",
    value: function value() {
      var e = this;
      this.mouseDown = !1, Math.ceil(this.lastTime) === Math.ceil(this.player.media.currentTime) ? this.toggleScrubbingContainer(!1) : once.call(this.player, this.player.media, "timeupdate", function () {
        e.mouseDown || e.toggleScrubbingContainer(!1);
      });
    }
  }, {
    key: "listeners",
    value: function value() {
      var e = this;
      this.player.on("play", function () {
        e.toggleThumbContainer(!1, !0);
      }), this.player.on("seeked", function () {
        e.toggleThumbContainer(!1);
      }), this.player.on("timeupdate", function () {
        e.lastTime = e.player.media.currentTime;
      });
    }
  }, {
    key: "render",
    value: function value() {
      this.elements.thumb.container = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.thumbContainer
      }), this.elements.thumb.imageContainer = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.imageContainer
      }), this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer);
      var e = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.timeContainer
      });
      this.elements.thumb.time = createElement("span", {}, "00:00"), e.appendChild(this.elements.thumb.time), this.elements.thumb.container.appendChild(e), is$1.element(this.player.elements.progress) && this.player.elements.progress.appendChild(this.elements.thumb.container), this.elements.scrubbing.container = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.scrubbingContainer
      }), this.player.elements.wrapper.appendChild(this.elements.scrubbing.container);
    }
  }, {
    key: "showImageAtCurrentTime",
    value: function value() {
      var e = this;
      this.mouseDown ? this.setScrubbingContainerSize() : this.setThumbContainerSizeAndPos();
      var t = this.thumbnails[0].frames.findIndex(function (t) {
        return e.seekTime >= t.startTime && e.seekTime <= t.endTime;
      }),
          n = t >= 0,
          r = 0;
      this.mouseDown || this.toggleThumbContainer(n), n && (this.thumbnails.forEach(function (n, i) {
        e.loadedImages.includes(n.frames[t].text) && (r = i);
      }), t !== this.showingThumb && (this.showingThumb = t, this.loadImage(r)));
    }
  }, {
    key: "loadImage",
    value: function value() {
      var e = this,
          t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
          n = this.showingThumb,
          r = this.thumbnails[t],
          i = r.urlPrefix,
          o = r.frames[n],
          a = r.frames[n].text,
          s = i + a;
      if (this.currentImageElement && this.currentImageElement.dataset.filename === a) this.showImage(this.currentImageElement, o, t, n, a, !1), this.currentImageElement.dataset.index = n, this.removeOldImages(this.currentImageElement);else {
        this.loadingImage && this.usingSprites && (this.loadingImage.onload = null);
        var l = new Image();
        l.src = s, l.dataset.index = n, l.dataset.filename = a, this.showingThumbFilename = a, this.player.debug.log("Loading image: ".concat(s)), l.onload = function () {
          return e.showImage(l, o, t, n, a, !0);
        }, this.loadingImage = l, this.removeOldImages(l);
      }
    }
  }, {
    key: "showImage",
    value: function value(e, t, n, r, i) {
      var o = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5];
      this.player.debug.log("Showing thumb: ".concat(i, ". num: ").concat(r, ". qual: ").concat(n, ". newimg: ").concat(o)), this.setImageSizeAndOffset(e, t), o && (this.currentImageContainer.appendChild(e), this.currentImageElement = e, this.loadedImages.includes(i) || this.loadedImages.push(i)), this.preloadNearby(r, !0).then(this.preloadNearby(r, !1)).then(this.getHigherQuality(n, e, t, i));
    }
  }, {
    key: "removeOldImages",
    value: function value(e) {
      var t = this;
      Array.from(this.currentImageContainer.children).forEach(function (n) {
        if ("img" === n.tagName.toLowerCase()) {
          var r = t.usingSprites ? 500 : 1e3;

          if (n.dataset.index !== e.dataset.index && !n.dataset.deleting) {
            n.dataset.deleting = !0;
            var i = t.currentImageContainer;
            setTimeout(function () {
              i.removeChild(n), t.player.debug.log("Removing thumb: ".concat(n.dataset.filename));
            }, r);
          }
        }
      });
    }
  }, {
    key: "preloadNearby",
    value: function value(e) {
      var t = this,
          n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      return new Promise(function (r) {
        setTimeout(function () {
          var i = t.thumbnails[0].frames[e].text;

          if (t.showingThumbFilename === i) {
            var o;
            o = n ? t.thumbnails[0].frames.slice(e) : t.thumbnails[0].frames.slice(0, e).reverse();
            var a = !1;
            o.forEach(function (e) {
              var n = e.text;

              if (n !== i && !t.loadedImages.includes(n)) {
                a = !0, t.player.debug.log("Preloading thumb filename: ".concat(n));
                var o = t.thumbnails[0].urlPrefix + n,
                    s = new Image();
                s.src = o, s.onload = function () {
                  t.player.debug.log("Preloaded thumb filename: ".concat(n)), t.loadedImages.includes(n) || t.loadedImages.push(n), r();
                };
              }
            }), a || r();
          }
        }, 300);
      });
    }
  }, {
    key: "getHigherQuality",
    value: function value(e, t, n, r) {
      var i = this;

      if (e < this.thumbnails.length - 1) {
        var o = t.naturalHeight;
        this.usingSprites && (o = n.h), o < this.thumbContainerHeight && setTimeout(function () {
          i.showingThumbFilename === r && (i.player.debug.log("Showing higher quality thumb for: ".concat(r)), i.loadImage(e + 1));
        }, 300);
      }
    }
  }, {
    key: "toggleThumbContainer",
    value: function value() {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          n = this.player.config.classNames.previewThumbnails.thumbContainerShown;
      this.elements.thumb.container.classList.toggle(n, e), !e && t && (this.showingThumb = null, this.showingThumbFilename = null);
    }
  }, {
    key: "toggleScrubbingContainer",
    value: function value() {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          t = this.player.config.classNames.previewThumbnails.scrubbingContainerShown;
      this.elements.scrubbing.container.classList.toggle(t, e), e || (this.showingThumb = null, this.showingThumbFilename = null);
    }
  }, {
    key: "determineContainerAutoSizing",
    value: function value() {
      this.elements.thumb.imageContainer.clientHeight > 20 && (this.sizeSpecifiedInCSS = !0);
    }
  }, {
    key: "setThumbContainerSizeAndPos",
    value: function value() {
      if (!this.sizeSpecifiedInCSS) {
        var e = Math.floor(this.thumbContainerHeight * this.thumbAspectRatio);
        this.elements.thumb.imageContainer.style.height = "".concat(this.thumbContainerHeight, "px"), this.elements.thumb.imageContainer.style.width = "".concat(e, "px");
      }

      this.setThumbContainerPos();
    }
  }, {
    key: "setThumbContainerPos",
    value: function value() {
      var e = this.player.elements.progress.getBoundingClientRect(),
          t = this.player.elements.container.getBoundingClientRect(),
          n = this.elements.thumb.container,
          r = t.left - e.left + 10,
          i = t.right - e.left - n.clientWidth - 10,
          o = this.mousePosX - e.left - n.clientWidth / 2;
      o < r && (o = r), o > i && (o = i), n.style.left = "".concat(o, "px");
    }
  }, {
    key: "setScrubbingContainerSize",
    value: function value() {
      this.elements.scrubbing.container.style.width = "".concat(this.player.media.clientWidth, "px"), this.elements.scrubbing.container.style.height = "".concat(this.player.media.clientWidth / this.thumbAspectRatio, "px");
    }
  }, {
    key: "setImageSizeAndOffset",
    value: function value(e, t) {
      if (this.usingSprites) {
        var n = this.thumbContainerHeight / t.h;
        e.style.height = "".concat(Math.floor(e.naturalHeight * n), "px"), e.style.width = "".concat(Math.floor(e.naturalWidth * n), "px"), e.style.left = "-".concat(t.x * n, "px"), e.style.top = "-".concat(t.y * n, "px");
      }
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.player.isHTML5 && this.player.isVideo && this.player.config.previewThumbnails.enabled;
    }
  }, {
    key: "currentImageContainer",
    get: function get() {
      return this.mouseDown ? this.elements.scrubbing.container : this.elements.thumb.imageContainer;
    }
  }, {
    key: "usingSprites",
    get: function get() {
      return Object.keys(this.thumbnails[0].frames[0]).includes("w");
    }
  }, {
    key: "thumbAspectRatio",
    get: function get() {
      return this.usingSprites ? this.thumbnails[0].frames[0].w / this.thumbnails[0].frames[0].h : this.thumbnails[0].width / this.thumbnails[0].height;
    }
  }, {
    key: "thumbContainerHeight",
    get: function get() {
      return this.mouseDown ? Math.floor(this.player.media.clientWidth / this.thumbAspectRatio) : Math.floor(this.player.media.clientWidth / this.thumbAspectRatio / 4);
    }
  }, {
    key: "currentImageElement",
    get: function get() {
      return this.mouseDown ? this.currentScrubbingImageElement : this.currentThumbnailImageElement;
    },
    set: function set(e) {
      this.mouseDown ? this.currentScrubbingImageElement = e : this.currentThumbnailImageElement = e;
    }
  }]), e;
}(),
    source = {
  insertElements: function insertElements(e, t) {
    var n = this;
    is$1.string(t) ? insertElement(e, this.media, {
      src: t
    }) : is$1.array(t) && t.forEach(function (t) {
      insertElement(e, n.media, t);
    });
  },
  change: function change(e) {
    var t = this;
    getDeep(e, "sources.length") ? (html5.cancelRequests.call(this), this.destroy.call(this, function () {
      t.options.quality = [], removeElement(t.media), t.media = null, is$1.element(t.elements.container) && t.elements.container.removeAttribute("class");

      var n = e.sources,
          r = e.type,
          i = _slicedToArray(n, 1)[0],
          o = i.provider,
          a = void 0 === o ? providers.html5 : o,
          s = i.src,
          l = "html5" === a ? r : "div",
          c = "html5" === a ? {} : {
        src: s
      };

      Object.assign(t, {
        provider: a,
        type: r,
        supported: support.check(r, a, t.config.playsinline),
        media: createElement(l, c)
      }), t.elements.container.appendChild(t.media), is$1["boolean"](e.autoplay) && (t.config.autoplay = e.autoplay), t.isHTML5 && (t.config.crossorigin && t.media.setAttribute("crossorigin", ""), t.config.autoplay && t.media.setAttribute("autoplay", ""), is$1.empty(e.poster) || (t.poster = e.poster), t.config.loop.active && t.media.setAttribute("loop", ""), t.config.muted && t.media.setAttribute("muted", ""), t.config.playsinline && t.media.setAttribute("playsinline", "")), ui.addStyleHook.call(t), t.isHTML5 && source.insertElements.call(t, "source", n), t.config.title = e.title, media.setup.call(t), t.isHTML5 && Object.keys(e).includes("tracks") && source.insertElements.call(t, "track", e.tracks), (t.isHTML5 || t.isEmbed && !t.supported.ui) && ui.build.call(t), t.isHTML5 && t.media.load(), t.previewThumbnails && t.previewThumbnails.load(), t.fullscreen.update();
    }, !0)) : this.debug.warn("Invalid source format");
  }
};

function clamp() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
      n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 255;
  return Math.min(Math.max(e, t), n);
}

var Plyr = function () {
  function e(t, n) {
    var r = this;
    if (_classCallCheck(this, e), this.timers = {}, this.ready = !1, this.loading = !1, this.failed = !1, this.touch = support.touch, this.media = t, is$1.string(this.media) && (this.media = document.querySelectorAll(this.media)), (window.jQuery && this.media instanceof jQuery || is$1.nodeList(this.media) || is$1.array(this.media)) && (this.media = this.media[0]), this.config = extend({}, defaults$1, e.defaults, n || {}, function () {
      try {
        return JSON.parse(r.media.getAttribute("data-plyr-config"));
      } catch (e) {
        return {};
      }
    }()), this.elements = {
      container: null,
      captions: null,
      buttons: {},
      display: {},
      progress: {},
      inputs: {},
      settings: {
        popup: null,
        menu: null,
        panels: {},
        buttons: {}
      }
    }, this.captions = {
      active: null,
      currentTrack: -1,
      meta: new WeakMap()
    }, this.fullscreen = {
      active: !1
    }, this.options = {
      speed: [],
      quality: []
    }, this.debug = new Console(this.config.debug), this.debug.log("Config", this.config), this.debug.log("Support", support), !is$1.nullOrUndefined(this.media) && is$1.element(this.media)) {
      if (this.media.plyr) this.debug.warn("Target already setup");else if (this.config.enabled) {
        if (support.check().api) {
          var i = this.media.cloneNode(!0);
          i.autoplay = !1, this.elements.original = i;
          var o = this.media.tagName.toLowerCase(),
              a = null,
              s = null;

          switch (o) {
            case "div":
              if (a = this.media.querySelector("iframe"), is$1.element(a)) {
                if (s = parseUrl(a.getAttribute("src")), this.provider = getProviderByUrl(s.toString()), this.elements.container = this.media, this.media = a, this.elements.container.className = "", s.search.length) {
                  var l = ["1", "true"];
                  l.includes(s.searchParams.get("autoplay")) && (this.config.autoplay = !0), l.includes(s.searchParams.get("loop")) && (this.config.loop.active = !0), this.isYouTube ? (this.config.playsinline = l.includes(s.searchParams.get("playsinline")), this.config.youtube.hl = s.searchParams.get("hl")) : this.config.playsinline = !0;
                }
              } else this.provider = this.media.getAttribute(this.config.attributes.embed.provider), this.media.removeAttribute(this.config.attributes.embed.provider);

              if (is$1.empty(this.provider) || !Object.keys(providers).includes(this.provider)) return void this.debug.error("Setup failed: Invalid provider");
              this.type = types.video;
              break;

            case "video":
            case "audio":
              this.type = o, this.provider = providers.html5, this.media.hasAttribute("crossorigin") && (this.config.crossorigin = !0), this.media.hasAttribute("autoplay") && (this.config.autoplay = !0), (this.media.hasAttribute("playsinline") || this.media.hasAttribute("webkit-playsinline")) && (this.config.playsinline = !0), this.media.hasAttribute("muted") && (this.config.muted = !0), this.media.hasAttribute("loop") && (this.config.loop.active = !0);
              break;

            default:
              return void this.debug.error("Setup failed: unsupported type");
          }

          this.supported = support.check(this.type, this.provider, this.config.playsinline), this.supported.api ? (this.eventListeners = [], this.listeners = new Listeners(this), this.storage = new Storage(this), this.media.plyr = this, is$1.element(this.elements.container) || (this.elements.container = createElement("div", {
            tabindex: 0
          }), wrap$1(this.media, this.elements.container)), ui.addStyleHook.call(this), media.setup.call(this), this.config.debug && on.call(this, this.elements.container, this.config.events.join(" "), function (e) {
            r.debug.log("event: ".concat(e.type));
          }), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.listeners.container(), this.listeners.global(), this.fullscreen = new Fullscreen(this), this.config.ads.enabled && (this.ads = new Ads(this)), this.isHTML5 && this.config.autoplay && setTimeout(function () {
            return r.play();
          }, 10), this.lastSeekTime = 0, this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))) : this.debug.error("Setup failed: no support");
        } else this.debug.error("Setup failed: no support");
      } else this.debug.error("Setup failed: disabled by config");
    } else this.debug.error("Setup failed: no suitable element passed");
  }

  return _createClass(e, [{
    key: "play",
    value: function value() {
      var e = this;
      return is$1["function"](this.media.play) ? (this.ads && this.ads.enabled && this.ads.managerPromise.then(function () {
        return e.ads.play();
      })["catch"](function () {
        return e.media.play();
      }), this.media.play()) : null;
    }
  }, {
    key: "pause",
    value: function value() {
      this.playing && is$1["function"](this.media.pause) && this.media.pause();
    }
  }, {
    key: "togglePlay",
    value: function value(e) {
      (is$1["boolean"](e) ? e : !this.playing) ? this.play() : this.pause();
    }
  }, {
    key: "stop",
    value: function value() {
      this.isHTML5 ? (this.pause(), this.restart()) : is$1["function"](this.media.stop) && this.media.stop();
    }
  }, {
    key: "restart",
    value: function value() {
      this.currentTime = 0;
    }
  }, {
    key: "rewind",
    value: function value(e) {
      this.currentTime = this.currentTime - (is$1.number(e) ? e : this.config.seekTime);
    }
  }, {
    key: "forward",
    value: function value(e) {
      this.currentTime = this.currentTime + (is$1.number(e) ? e : this.config.seekTime);
    }
  }, {
    key: "increaseVolume",
    value: function value(e) {
      var t = this.media.muted ? 0 : this.volume;
      this.volume = t + (is$1.number(e) ? e : 0);
    }
  }, {
    key: "decreaseVolume",
    value: function value(e) {
      this.increaseVolume(-e);
    }
  }, {
    key: "toggleCaptions",
    value: function value(e) {
      captions.toggle.call(this, e, !1);
    }
  }, {
    key: "airplay",
    value: function value() {
      support.airplay && this.media.webkitShowPlaybackTargetPicker();
    }
  }, {
    key: "toggleControls",
    value: function value(e) {
      if (this.supported.ui && !this.isAudio) {
        var t = hasClass(this.elements.container, this.config.classNames.hideControls),
            n = void 0 === e ? void 0 : !e,
            r = toggleClass(this.elements.container, this.config.classNames.hideControls, n);

        if (r && this.config.controls.includes("settings") && !is$1.empty(this.config.settings) && controls.toggleMenu.call(this, !1), r !== t) {
          var i = r ? "controlshidden" : "controlsshown";
          triggerEvent.call(this, this.media, i);
        }

        return !r;
      }

      return !1;
    }
  }, {
    key: "on",
    value: function value(e, t) {
      on.call(this, this.elements.container, e, t);
    }
  }, {
    key: "once",
    value: function value(e, t) {
      once.call(this, this.elements.container, e, t);
    }
  }, {
    key: "off",
    value: function value(e, t) {
      off(this.elements.container, e, t);
    }
  }, {
    key: "destroy",
    value: function value(e) {
      var t = this,
          n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

      if (this.ready) {
        var r = function r() {
          document.body.style.overflow = "", t.embed = null, n ? (Object.keys(t.elements).length && (removeElement(t.elements.buttons.play), removeElement(t.elements.captions), removeElement(t.elements.controls), removeElement(t.elements.wrapper), t.elements.buttons.play = null, t.elements.captions = null, t.elements.controls = null, t.elements.wrapper = null), is$1["function"](e) && e()) : (unbindListeners.call(t), replaceElement(t.elements.original, t.elements.container), triggerEvent.call(t, t.elements.original, "destroyed", !0), is$1["function"](e) && e.call(t.elements.original), t.ready = !1, setTimeout(function () {
            t.elements = null, t.media = null;
          }, 200));
        };

        this.stop(), clearTimeout(this.timers.loading), clearTimeout(this.timers.controls), clearTimeout(this.timers.resized), this.isHTML5 ? (ui.toggleNativeControls.call(this, !0), r()) : this.isYouTube ? (clearInterval(this.timers.buffering), clearInterval(this.timers.playing), null !== this.embed && is$1["function"](this.embed.destroy) && this.embed.destroy(), r()) : this.isVimeo && (null !== this.embed && this.embed.unload().then(r), setTimeout(r, 200));
      }
    }
  }, {
    key: "supports",
    value: function value(e) {
      return support.mime.call(this, e);
    }
  }, {
    key: "isHTML5",
    get: function get() {
      return this.provider === providers.html5;
    }
  }, {
    key: "isEmbed",
    get: function get() {
      return this.isYouTube || this.isVimeo;
    }
  }, {
    key: "isYouTube",
    get: function get() {
      return this.provider === providers.youtube;
    }
  }, {
    key: "isVimeo",
    get: function get() {
      return this.provider === providers.vimeo;
    }
  }, {
    key: "isVideo",
    get: function get() {
      return this.type === types.video;
    }
  }, {
    key: "isAudio",
    get: function get() {
      return this.type === types.audio;
    }
  }, {
    key: "playing",
    get: function get() {
      return Boolean(this.ready && !this.paused && !this.ended);
    }
  }, {
    key: "paused",
    get: function get() {
      return Boolean(this.media.paused);
    }
  }, {
    key: "stopped",
    get: function get() {
      return Boolean(this.paused && 0 === this.currentTime);
    }
  }, {
    key: "ended",
    get: function get() {
      return Boolean(this.media.ended);
    }
  }, {
    key: "currentTime",
    set: function set(e) {
      if (this.duration) {
        var t = is$1.number(e) && e > 0;
        this.media.currentTime = t ? Math.min(e, this.duration) : 0, this.debug.log("Seeking to ".concat(this.currentTime, " seconds"));
      }
    },
    get: function get() {
      return Number(this.media.currentTime);
    }
  }, {
    key: "buffered",
    get: function get() {
      var e = this.media.buffered;
      return is$1.number(e) ? e : e && e.length && this.duration > 0 ? e.end(0) / this.duration : 0;
    }
  }, {
    key: "seeking",
    get: function get() {
      return Boolean(this.media.seeking);
    }
  }, {
    key: "duration",
    get: function get() {
      var e = parseFloat(this.config.duration),
          t = (this.media || {}).duration,
          n = is$1.number(t) && t !== 1 / 0 ? t : 0;
      return e || n;
    }
  }, {
    key: "volume",
    set: function set(e) {
      var t = e;
      is$1.string(t) && (t = Number(t)), is$1.number(t) || (t = this.storage.get("volume")), is$1.number(t) || (t = this.config.volume), t > 1 && (t = 1), t < 0 && (t = 0), this.config.volume = t, this.media.volume = t, !is$1.empty(e) && this.muted && t > 0 && (this.muted = !1);
    },
    get: function get() {
      return Number(this.media.volume);
    }
  }, {
    key: "muted",
    set: function set(e) {
      var t = e;
      is$1["boolean"](t) || (t = this.storage.get("muted")), is$1["boolean"](t) || (t = this.config.muted), this.config.muted = t, this.media.muted = t;
    },
    get: function get() {
      return Boolean(this.media.muted);
    }
  }, {
    key: "hasAudio",
    get: function get() {
      return !this.isHTML5 || !!this.isAudio || Boolean(this.media.mozHasAudio) || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);
    }
  }, {
    key: "speed",
    set: function set(e) {
      var t = this,
          n = null;
      is$1.number(e) && (n = e), is$1.number(n) || (n = this.storage.get("speed")), is$1.number(n) || (n = this.config.speed.selected);
      var r = this.minimumSpeed,
          i = this.maximumSpeed;
      n = clamp(n, r, i), this.config.speed.selected = n, setTimeout(function () {
        t.media.playbackRate = n;
      }, 0);
    },
    get: function get() {
      return Number(this.media.playbackRate);
    }
  }, {
    key: "minimumSpeed",
    get: function get() {
      return this.isYouTube ? Math.min.apply(Math, _toConsumableArray(this.options.speed)) : this.isVimeo ? .5 : .0625;
    }
  }, {
    key: "maximumSpeed",
    get: function get() {
      return this.isYouTube ? Math.max.apply(Math, _toConsumableArray(this.options.speed)) : this.isVimeo ? 2 : 16;
    }
  }, {
    key: "quality",
    set: function set(e) {
      var t = this.config.quality,
          n = this.options.quality;

      if (n.length) {
        var r = [!is$1.empty(e) && Number(e), this.storage.get("quality"), t.selected, t["default"]].find(is$1.number),
            i = !0;

        if (!n.includes(r)) {
          var o = closest(n, r);
          this.debug.warn("Unsupported quality option: ".concat(r, ", using ").concat(o, " instead")), r = o, i = !1;
        }

        t.selected = r, this.media.quality = r, i && this.storage.set({
          quality: r
        });
      }
    },
    get: function get() {
      return this.media.quality;
    }
  }, {
    key: "loop",
    set: function set(e) {
      var t = is$1["boolean"](e) ? e : this.config.loop.active;
      this.config.loop.active = t, this.media.loop = t;
    },
    get: function get() {
      return Boolean(this.media.loop);
    }
  }, {
    key: "source",
    set: function set(e) {
      source.change.call(this, e);
    },
    get: function get() {
      return this.media.currentSrc;
    }
  }, {
    key: "download",
    get: function get() {
      var e = this.config.urls.download;
      return is$1.url(e) ? e : this.source;
    },
    set: function set(e) {
      is$1.url(e) && (this.config.urls.download = e, controls.setDownloadUrl.call(this));
    }
  }, {
    key: "poster",
    set: function set(e) {
      this.isVideo ? ui.setPoster.call(this, e, !1)["catch"](function () {}) : this.debug.warn("Poster can only be set for video");
    },
    get: function get() {
      return this.isVideo ? this.media.getAttribute("poster") : null;
    }
  }, {
    key: "ratio",
    get: function get() {
      if (!this.isVideo) return null;
      var e = reduceAspectRatio(getAspectRatio.call(this));
      return is$1.array(e) ? e.join(":") : e;
    },
    set: function set(e) {
      this.isVideo ? is$1.string(e) && validateRatio(e) ? (this.config.ratio = e, setAspectRatio.call(this)) : this.debug.error("Invalid aspect ratio specified (".concat(e, ")")) : this.debug.warn("Aspect ratio can only be set for video");
    }
  }, {
    key: "autoplay",
    set: function set(e) {
      var t = is$1["boolean"](e) ? e : this.config.autoplay;
      this.config.autoplay = t;
    },
    get: function get() {
      return Boolean(this.config.autoplay);
    }
  }, {
    key: "currentTrack",
    set: function set(e) {
      captions.set.call(this, e, !1);
    },
    get: function get() {
      var e = this.captions,
          t = e.toggled,
          n = e.currentTrack;
      return t ? n : -1;
    }
  }, {
    key: "language",
    set: function set(e) {
      captions.setLanguage.call(this, e, !1);
    },
    get: function get() {
      return (captions.getCurrentTrack.call(this) || {}).language;
    }
  }, {
    key: "pip",
    set: function set(e) {
      if (support.pip) {
        var t = is$1["boolean"](e) ? e : !this.pip;
        is$1["function"](this.media.webkitSetPresentationMode) && this.media.webkitSetPresentationMode(t ? pip.active : pip.inactive), is$1["function"](this.media.requestPictureInPicture) && (!this.pip && t ? this.media.requestPictureInPicture() : this.pip && !t && document.exitPictureInPicture());
      }
    },
    get: function get() {
      return support.pip ? is$1.empty(this.media.webkitPresentationMode) ? this.media === document.pictureInPictureElement : this.media.webkitPresentationMode === pip.active : null;
    }
  }], [{
    key: "supported",
    value: function value(e, t, n) {
      return support.check(e, t, n);
    }
  }, {
    key: "loadSprite",
    value: function value(e, t) {
      return loadSprite(e, t);
    }
  }, {
    key: "setup",
    value: function value(t) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          r = null;
      return is$1.string(t) ? r = Array.from(document.querySelectorAll(t)) : is$1.nodeList(t) ? r = Array.from(t) : is$1.array(t) && (r = t.filter(is$1.element)), is$1.empty(r) ? null : r.map(function (t) {
        return new e(t, n);
      });
    }
  }]), e;
}();

Plyr.defaults = cloneDeep(defaults$1);
var _default = Plyr;
exports["default"] = _default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
