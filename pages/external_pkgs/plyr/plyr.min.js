(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _defineProperties(e, t) {
  for (var i = 0; i < t.length; i++) {
    var n = t[i];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
  }
}

function _createClass(e, t, i) {
  return t && _defineProperties(e.prototype, t), i && _defineProperties(e, i), e;
}

function _defineProperty(e, t, i) {
  return t in e ? Object.defineProperty(e, t, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = i, e;
}

function _slicedToArray(e, t) {
  return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _nonIterableRest();
}

function _toConsumableArray(e) {
  return _arrayWithoutHoles(e) || _iterableToArray(e) || _nonIterableSpread();
}

function _arrayWithoutHoles(e) {
  if (Array.isArray(e)) {
    for (var t = 0, i = new Array(e.length); t < e.length; t++) {
      i[t] = e[t];
    }

    return i;
  }
}

function _arrayWithHoles(e) {
  if (Array.isArray(e)) return e;
}

function _iterableToArray(e) {
  if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
}

function _iterableToArrayLimit(e, t) {
  var i = [],
      n = !0,
      s = !1,
      a = void 0;

  try {
    for (var r, o = e[Symbol.iterator](); !(n = (r = o.next()).done) && (i.push(r.value), !t || i.length !== t); n = !0) {
      ;
    }
  } catch (e) {
    s = !0, a = e;
  } finally {
    try {
      n || null == o["return"] || o["return"]();
    } finally {
      if (s) throw a;
    }
  }

  return i;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var defaults = {
  addCSS: !0,
  thumbWidth: 15,
  watch: !0
};

function matches(e, t) {
  return function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }.call(e, t);
}

function trigger(e, t) {
  if (e && t) {
    var i = new Event(t);
    e.dispatchEvent(i);
  }
}

var getConstructor = function getConstructor(e) {
  return null != e ? e.constructor : null;
},
    instanceOf = function instanceOf(e, t) {
  return Boolean(e && t && e instanceof t);
},
    isNullOrUndefined = function isNullOrUndefined(e) {
  return null == e;
},
    isObject = function isObject(e) {
  return getConstructor(e) === Object;
},
    isNumber = function isNumber(e) {
  return getConstructor(e) === Number && !Number.isNaN(e);
},
    isString = function isString(e) {
  return getConstructor(e) === String;
},
    isBoolean = function isBoolean(e) {
  return getConstructor(e) === Boolean;
},
    isFunction = function isFunction(e) {
  return getConstructor(e) === Function;
},
    isArray = function isArray(e) {
  return Array.isArray(e);
},
    isNodeList = function isNodeList(e) {
  return instanceOf(e, NodeList);
},
    isElement = function isElement(e) {
  return instanceOf(e, Element);
},
    isEvent = function isEvent(e) {
  return instanceOf(e, Event);
},
    isEmpty = function isEmpty(e) {
  return isNullOrUndefined(e) || (isString(e) || isArray(e) || isNodeList(e)) && !e.length || isObject(e) && !Object.keys(e).length;
},
    is = {
  nullOrUndefined: isNullOrUndefined,
  object: isObject,
  number: isNumber,
  string: isString,
  "boolean": isBoolean,
  "function": isFunction,
  array: isArray,
  nodeList: isNodeList,
  element: isElement,
  event: isEvent,
  empty: isEmpty
};

function getDecimalPlaces(e) {
  var t = "".concat(e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0;
}

function round(e, t) {
  if (t < 1) {
    var i = getDecimalPlaces(t);
    return parseFloat(e.toFixed(i));
  }

  return Math.round(e / t) * t;
}

var RangeTouch = function () {
  function e(t, i) {
    _classCallCheck(this, e), is.element(t) ? this.element = t : is.string(t) && (this.element = document.querySelector(t)), is.element(this.element) && is.empty(this.element.rangeTouch) && (this.config = Object.assign({}, defaults, i), this.init());
  }

  return _createClass(e, [{
    key: "init",
    value: function value() {
      e.enabled && (this.config.addCSS && (this.element.style.userSelect = "none", this.element.style.webKitUserSelect = "none", this.element.style.touchAction = "manipulation"), this.listeners(!0), this.element.rangeTouch = this);
    }
  }, {
    key: "destroy",
    value: function value() {
      e.enabled && (this.listeners(!1), this.element.rangeTouch = null);
    }
  }, {
    key: "listeners",
    value: function value(e) {
      var t = this,
          i = e ? "addEventListener" : "removeEventListener";
      ["touchstart", "touchmove", "touchend"].forEach(function (e) {
        t.element[i](e, function (e) {
          return t.set(e);
        }, !1);
      });
    }
  }, {
    key: "get",
    value: function value(t) {
      if (!e.enabled || !is.event(t)) return null;
      var i,
          n = t.target,
          s = t.changedTouches[0],
          a = parseFloat(n.getAttribute("min")) || 0,
          r = parseFloat(n.getAttribute("max")) || 100,
          o = parseFloat(n.getAttribute("step")) || 1,
          l = r - a,
          c = n.getBoundingClientRect(),
          u = 100 / c.width * (this.config.thumbWidth / 2) / 100;
      return (i = 100 / c.width * (s.clientX - c.left)) < 0 ? i = 0 : i > 100 && (i = 100), i < 50 ? i -= (100 - 2 * i) * u : i > 50 && (i += 2 * (i - 50) * u), a + round(l * (i / 100), o);
    }
  }, {
    key: "set",
    value: function value(t) {
      e.enabled && is.event(t) && !t.target.disabled && (t.preventDefault(), t.target.value = this.get(t), trigger(t.target, "touchend" === t.type ? "change" : "input"));
    }
  }], [{
    key: "setup",
    value: function value(t) {
      var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          n = null;
      if (is.empty(t) || is.string(t) ? n = Array.from(document.querySelectorAll(is.string(t) ? t : 'input[type="range"]')) : is.element(t) ? n = [t] : is.nodeList(t) ? n = Array.from(t) : is.array(t) && (n = t.filter(is.element)), is.empty(n)) return null;
      var s = Object.assign({}, defaults, i);
      is.string(t) && s.watch && new MutationObserver(function (i) {
        Array.from(i).forEach(function (i) {
          Array.from(i.addedNodes).forEach(function (i) {
            if (is.element(i) && matches(i, t)) new e(i, s);
          });
        });
      }).observe(document.body, {
        childList: !0,
        subtree: !0
      });
      return n.map(function (t) {
        return new e(t, i);
      });
    }
  }, {
    key: "enabled",
    get: function get() {
      return "ontouchstart" in document.documentElement;
    }
  }]), e;
}(),
    getConstructor$1 = function getConstructor$1(e) {
  return null != e ? e.constructor : null;
},
    instanceOf$1 = function instanceOf$1(e, t) {
  return Boolean(e && t && e instanceof t);
},
    isNullOrUndefined$1 = function isNullOrUndefined$1(e) {
  return null == e;
},
    isObject$1 = function isObject$1(e) {
  return getConstructor$1(e) === Object;
},
    isNumber$1 = function isNumber$1(e) {
  return getConstructor$1(e) === Number && !Number.isNaN(e);
},
    isString$1 = function isString$1(e) {
  return getConstructor$1(e) === String;
},
    isBoolean$1 = function isBoolean$1(e) {
  return getConstructor$1(e) === Boolean;
},
    isFunction$1 = function isFunction$1(e) {
  return getConstructor$1(e) === Function;
},
    isArray$1 = function isArray$1(e) {
  return Array.isArray(e);
},
    isWeakMap = function isWeakMap(e) {
  return instanceOf$1(e, WeakMap);
},
    isNodeList$1 = function isNodeList$1(e) {
  return instanceOf$1(e, NodeList);
},
    isElement$1 = function isElement$1(e) {
  return instanceOf$1(e, Element);
},
    isTextNode = function isTextNode(e) {
  return getConstructor$1(e) === Text;
},
    isEvent$1 = function isEvent$1(e) {
  return instanceOf$1(e, Event);
},
    isKeyboardEvent = function isKeyboardEvent(e) {
  return instanceOf$1(e, KeyboardEvent);
},
    isCue = function isCue(e) {
  return instanceOf$1(e, window.TextTrackCue) || instanceOf$1(e, window.VTTCue);
},
    isTrack = function isTrack(e) {
  return instanceOf$1(e, TextTrack) || !isNullOrUndefined$1(e) && isString$1(e.kind);
},
    isPromise = function isPromise(e) {
  return instanceOf$1(e, Promise);
},
    isEmpty$1 = function isEmpty$1(e) {
  return isNullOrUndefined$1(e) || (isString$1(e) || isArray$1(e) || isNodeList$1(e)) && !e.length || isObject$1(e) && !Object.keys(e).length;
},
    isUrl = function isUrl(e) {
  if (instanceOf$1(e, window.URL)) return !0;
  if (!isString$1(e)) return !1;
  var t = e;
  e.startsWith("http://") && e.startsWith("https://") || (t = "http://".concat(e));

  try {
    return !isEmpty$1(new URL(t).hostname);
  } catch (e) {
    return !1;
  }
},
    is$1 = {
  nullOrUndefined: isNullOrUndefined$1,
  object: isObject$1,
  number: isNumber$1,
  string: isString$1,
  "boolean": isBoolean$1,
  "function": isFunction$1,
  array: isArray$1,
  weakMap: isWeakMap,
  nodeList: isNodeList$1,
  element: isElement$1,
  textNode: isTextNode,
  event: isEvent$1,
  keyboardEvent: isKeyboardEvent,
  cue: isCue,
  track: isTrack,
  promise: isPromise,
  url: isUrl,
  empty: isEmpty$1
},
    transitionEndEvent = function () {
  var e = document.createElement("span"),
      t = {
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "transitionend",
    OTransition: "oTransitionEnd otransitionend",
    transition: "transitionend"
  },
      i = Object.keys(t).find(function (t) {
    return void 0 !== e.style[t];
  });
  return !!is$1.string(i) && t[i];
}();

function repaint(e, t) {
  setTimeout(function () {
    try {
      e.hidden = !0, e.offsetHeight, e.hidden = !1;
    } catch (e) {}
  }, t);
}

var browser = {
  isIE: !!document.documentMode,
  isEdge: window.navigator.userAgent.includes("Edge"),
  isWebkit: "WebkitAppearance" in document.documentElement.style && !/Edge/.test(navigator.userAgent),
  isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),
  isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform)
},
    supportsPassiveListeners = function () {
  var e = !1;

  try {
    var t = Object.defineProperty({}, "passive", {
      get: function get() {
        return e = !0, null;
      }
    });
    window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
  } catch (e) {}

  return e;
}();

function toggleListener(e, t, i) {
  var n = this,
      s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
      a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
      r = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];

  if (e && "addEventListener" in e && !is$1.empty(t) && is$1["function"](i)) {
    var o = t.split(" "),
        l = r;
    supportsPassiveListeners && (l = {
      passive: a,
      capture: r
    }), o.forEach(function (t) {
      n && n.eventListeners && s && n.eventListeners.push({
        element: e,
        type: t,
        callback: i,
        options: l
      }), e[s ? "addEventListener" : "removeEventListener"](t, i, l);
    });
  }
}

function on(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      i = arguments.length > 2 ? arguments[2] : void 0,
      n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, t, i, !0, n, s);
}

function off(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      i = arguments.length > 2 ? arguments[2] : void 0,
      n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, t, i, !1, n, s);
}

function once(e) {
  var t = this,
      i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      n = arguments.length > 2 ? arguments[2] : void 0,
      s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
      a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
  toggleListener.call(this, e, i, function r() {
    off(e, i, r, s, a);

    for (var o = arguments.length, l = new Array(o), c = 0; c < o; c++) {
      l[c] = arguments[c];
    }

    n.apply(t, l);
  }, !0, s, a);
}

function triggerEvent(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
      n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};

  if (is$1.element(e) && !is$1.empty(t)) {
    var s = new CustomEvent(t, {
      bubbles: i,
      detail: Object.assign({}, n, {
        plyr: this
      })
    });
    e.dispatchEvent(s);
  }
}

function unbindListeners() {
  this && this.eventListeners && (this.eventListeners.forEach(function (e) {
    var t = e.element,
        i = e.type,
        n = e.callback,
        s = e.options;
    t.removeEventListener(i, n, s);
  }), this.eventListeners = []);
}

function ready() {
  var e = this;
  return new Promise(function (t) {
    return e.ready ? setTimeout(t, 0) : on.call(e, e.elements.container, "ready", t);
  }).then(function () {});
}

function cloneDeep(e) {
  return JSON.parse(JSON.stringify(e));
}

function getDeep(e, t) {
  return t.split(".").reduce(function (e, t) {
    return e && e[t];
  }, e);
}

function extend() {
  for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) {
    i[n - 1] = arguments[n];
  }

  if (!i.length) return e;
  var s = i.shift();
  return is$1.object(s) ? (Object.keys(s).forEach(function (t) {
    is$1.object(s[t]) ? (Object.keys(e).includes(t) || Object.assign(e, _defineProperty({}, t, {})), extend(e[t], s[t])) : Object.assign(e, _defineProperty({}, t, s[t]));
  }), extend.apply(void 0, [e].concat(i))) : e;
}

function wrap(e, t) {
  var i = e.length ? e : [e];
  Array.from(i).reverse().forEach(function (e, i) {
    var n = i > 0 ? t.cloneNode(!0) : t,
        s = e.parentNode,
        a = e.nextSibling;
    n.appendChild(e), a ? s.insertBefore(n, a) : s.appendChild(n);
  });
}

function setAttributes(e, t) {
  is$1.element(e) && !is$1.empty(t) && Object.entries(t).filter(function (e) {
    var t = _slicedToArray(e, 2)[1];

    return !is$1.nullOrUndefined(t);
  }).forEach(function (t) {
    var i = _slicedToArray(t, 2),
        n = i[0],
        s = i[1];

    return e.setAttribute(n, s);
  });
}

function createElement(e, t, i) {
  var n = document.createElement(e);
  return is$1.object(t) && setAttributes(n, t), is$1.string(i) && (n.innerText = i), n;
}

function insertAfter(e, t) {
  is$1.element(e) && is$1.element(t) && t.parentNode.insertBefore(e, t.nextSibling);
}

function insertElement(e, t, i, n) {
  is$1.element(t) && t.appendChild(createElement(e, i, n));
}

function removeElement(e) {
  is$1.nodeList(e) || is$1.array(e) ? Array.from(e).forEach(removeElement) : is$1.element(e) && is$1.element(e.parentNode) && e.parentNode.removeChild(e);
}

function emptyElement(e) {
  if (is$1.element(e)) for (var t = e.childNodes.length; t > 0;) {
    e.removeChild(e.lastChild), t -= 1;
  }
}

function replaceElement(e, t) {
  return is$1.element(t) && is$1.element(t.parentNode) && is$1.element(e) ? (t.parentNode.replaceChild(e, t), e) : null;
}

function getAttributesFromSelector(e, t) {
  if (!is$1.string(e) || is$1.empty(e)) return {};
  var i = {},
      n = extend({}, t);
  return e.split(",").forEach(function (e) {
    var t = e.trim(),
        s = t.replace(".", ""),
        a = t.replace(/[[\]]/g, "").split("="),
        r = _slicedToArray(a, 1)[0],
        o = a.length > 1 ? a[1].replace(/["']/g, "") : "";

    switch (t.charAt(0)) {
      case ".":
        is$1.string(n["class"]) ? i["class"] = "".concat(n["class"], " ").concat(s) : i["class"] = s;
        break;

      case "#":
        i.id = t.replace("#", "");
        break;

      case "[":
        i[r] = o;
    }
  }), extend(n, i);
}

function toggleHidden(e, t) {
  if (is$1.element(e)) {
    var i = t;
    is$1["boolean"](i) || (i = !e.hidden), e.hidden = i;
  }
}

function toggleClass(e, t, i) {
  if (is$1.nodeList(e)) return Array.from(e).map(function (e) {
    return toggleClass(e, t, i);
  });

  if (is$1.element(e)) {
    var n = "toggle";
    return void 0 !== i && (n = i ? "add" : "remove"), e.classList[n](t), e.classList.contains(t);
  }

  return !1;
}

function hasClass(e, t) {
  return is$1.element(e) && e.classList.contains(t);
}

function matches$1(e, t) {
  return function () {
    return Array.from(document.querySelectorAll(t)).includes(this);
  }.call(e, t);
}

function getElements(e) {
  return this.elements.container.querySelectorAll(e);
}

function getElement(e) {
  return this.elements.container.querySelector(e);
}

function trapFocus() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

  if (is$1.element(e)) {
    var i = getElements.call(this, "button:not(:disabled), input:not(:disabled), [tabindex]"),
        n = i[0],
        s = i[i.length - 1];
    toggleListener.call(this, this.elements.container, "keydown", function (e) {
      if ("Tab" === e.key && 9 === e.keyCode) {
        var t = document.activeElement;
        t !== s || e.shiftKey ? t === n && e.shiftKey && (s.focus(), e.preventDefault()) : (n.focus(), e.preventDefault());
      }
    }, t, !1);
  }
}

function setFocus() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
  is$1.element(e) && (e.focus({
    preventScroll: !0
  }), t && toggleClass(e, this.config.classNames.tabFocus));
}

var defaultCodecs = {
  "audio/ogg": "vorbis",
  "audio/wav": "1",
  "video/webm": "vp8, vorbis",
  "video/mp4": "avc1.42E01E, mp4a.40.2",
  "video/ogg": "theora"
},
    support = {
  audio: "canPlayType" in document.createElement("audio"),
  video: "canPlayType" in document.createElement("video"),
  check: function check(e, t, i) {
    var n = browser.isIPhone && i && support.playsinline,
        s = support[e] || "html5" !== t;
    return {
      api: s,
      ui: s && support.rangeInput && ("video" !== e || !browser.isIPhone || n)
    };
  },
  pip: !(browser.isIPhone || !is$1["function"](createElement("video").webkitSetPresentationMode) && (!document.pictureInPictureEnabled || createElement("video").disablePictureInPicture)),
  airplay: is$1["function"](window.WebKitPlaybackTargetAvailabilityEvent),
  playsinline: "playsInline" in document.createElement("video"),
  mime: function mime(e) {
    if (is$1.empty(e)) return !1;

    var t = _slicedToArray(e.split("/"), 1)[0],
        i = e;

    if (!this.isHTML5 || t !== this.type) return !1;
    Object.keys(defaultCodecs).includes(i) && (i += '; codecs="'.concat(defaultCodecs[e], '"'));

    try {
      return Boolean(i && this.media.canPlayType(i).replace(/no/, ""));
    } catch (e) {
      return !1;
    }
  },
  textTracks: "textTracks" in document.createElement("video"),
  rangeInput: function () {
    var e = document.createElement("input");
    return e.type = "range", "range" === e.type;
  }(),
  touch: "ontouchstart" in document.documentElement,
  transitions: !1 !== transitionEndEvent,
  reducedMotion: "matchMedia" in window && window.matchMedia("(prefers-reduced-motion)").matches
};

function validateRatio(e) {
  return !!(is$1.array(e) || is$1.string(e) && e.includes(":")) && (is$1.array(e) ? e : e.split(":")).map(Number).every(is$1.number);
}

function reduceAspectRatio(e) {
  if (!is$1.array(e) || !e.every(is$1.number)) return null;

  var t = _slicedToArray(e, 2),
      i = t[0],
      n = t[1],
      s = function e(t, i) {
    return 0 === i ? t : e(i, t % i);
  }(i, n);

  return [i / s, n / s];
}

function getAspectRatio(e) {
  var t = function t(e) {
    return validateRatio(e) ? e.split(":").map(Number) : null;
  },
      i = t(e);

  if (null === i && (i = t(this.config.ratio)), null === i && !is$1.empty(this.embed) && is$1.array(this.embed.ratio) && (i = this.embed.ratio), null === i && this.isHTML5) {
    var n = this.media;
    i = reduceAspectRatio([n.videoWidth, n.videoHeight]);
  }

  return i;
}

function setAspectRatio(e) {
  if (!this.isVideo) return {};

  var t = getAspectRatio.call(this, e),
      i = _slicedToArray(is$1.array(t) ? t : [0, 0], 2),
      n = 100 / i[0] * i[1];

  if (this.elements.wrapper.style.paddingBottom = "".concat(n, "%"), this.isVimeo && this.supported.ui) {
    var s = (240 - n) / 4.8;
    this.media.style.transform = "translateY(-".concat(s, "%)");
  } else this.isHTML5 && this.elements.wrapper.classList.toggle(this.config.classNames.videoFixedRatio, null !== t);

  return {
    padding: n,
    ratio: t
  };
}

var html5 = {
  getSources: function getSources() {
    var e = this;
    return this.isHTML5 ? Array.from(this.media.querySelectorAll("source")).filter(function (t) {
      var i = t.getAttribute("type");
      return !!is$1.empty(i) || support.mime.call(e, i);
    }) : [];
  },
  getQualityOptions: function getQualityOptions() {
    return html5.getSources.call(this).map(function (e) {
      return Number(e.getAttribute("size"));
    }).filter(Boolean);
  },
  extend: function extend() {
    if (this.isHTML5) {
      var e = this;
      is$1.empty(this.config.ratio) || setAspectRatio.call(e), Object.defineProperty(e.media, "quality", {
        get: function get() {
          var t = html5.getSources.call(e).find(function (t) {
            return t.getAttribute("src") === e.source;
          });
          return t && Number(t.getAttribute("size"));
        },
        set: function set(t) {
          var i = html5.getSources.call(e).find(function (e) {
            return Number(e.getAttribute("size")) === t;
          });

          if (i) {
            var n = e.media,
                s = n.currentTime,
                a = n.paused,
                r = n.preload,
                o = n.readyState;
            e.media.src = i.getAttribute("src"), ("none" !== r || o) && (e.once("loadedmetadata", function () {
              e.currentTime = s, a || e.play();
            }), e.media.load()), triggerEvent.call(e, e.media, "qualitychange", !1, {
              quality: t
            });
          }
        }
      });
    }
  },
  cancelRequests: function cancelRequests() {
    this.isHTML5 && (removeElement(html5.getSources.call(this)), this.media.setAttribute("src", this.config.blankVideo), this.media.load(), this.debug.log("Cancelled network requests"));
  }
};

function dedupe(e) {
  return is$1.array(e) ? e.filter(function (t, i) {
    return e.indexOf(t) === i;
  }) : e;
}

function closest(e, t) {
  return is$1.array(e) && e.length ? e.reduce(function (e, i) {
    return Math.abs(i - t) < Math.abs(e - t) ? i : e;
  }) : null;
}

function generateId(e) {
  return "".concat(e, "-").concat(Math.floor(1e4 * Math.random()));
}

function format(e) {
  for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) {
    i[n - 1] = arguments[n];
  }

  return is$1.empty(e) ? e : e.toString().replace(/{(\d+)}/g, function (e, t) {
    return i[t].toString();
  });
}

function getPercentage(e, t) {
  return 0 === e || 0 === t || Number.isNaN(e) || Number.isNaN(t) ? 0 : (e / t * 100).toFixed(2);
}

function replaceAll() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
      i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
  return e.replace(new RegExp(t.toString().replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1"), "g"), i.toString());
}

function toTitleCase() {
  return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString().replace(/\w\S*/g, function (e) {
    return e.charAt(0).toUpperCase() + e.substr(1).toLowerCase();
  });
}

function toPascalCase() {
  var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString();
  return e = replaceAll(e, "-", " "), e = replaceAll(e, "_", " "), replaceAll(e = toTitleCase(e), " ", "");
}

function toCamelCase() {
  var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "").toString();
  return (e = toPascalCase(e)).charAt(0).toLowerCase() + e.slice(1);
}

function stripHTML(e) {
  var t = document.createDocumentFragment(),
      i = document.createElement("div");
  return t.appendChild(i), i.innerHTML = e, t.firstChild.innerText;
}

function getHTML(e) {
  var t = document.createElement("div");
  return t.appendChild(e), t.innerHTML;
}

var resources = {
  pip: "PIP",
  airplay: "AirPlay",
  html5: "HTML5",
  vimeo: "Vimeo",
  youtube: "YouTube"
},
    i18n = {
  get: function get() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (is$1.empty(e) || is$1.empty(t)) return "";
    var i = getDeep(t.i18n, e);
    if (is$1.empty(i)) return Object.keys(resources).includes(e) ? resources[e] : "";
    var n = {
      "{seektime}": t.seekTime,
      "{title}": t.title
    };
    return Object.entries(n).forEach(function (e) {
      var t = _slicedToArray(e, 2),
          n = t[0],
          s = t[1];

      i = replaceAll(i, n, s);
    }), i;
  }
},
    Storage = function () {
  function e(t) {
    _classCallCheck(this, e), this.enabled = t.config.storage.enabled, this.key = t.config.storage.key;
  }

  return _createClass(e, [{
    key: "get",
    value: function value(t) {
      if (!e.supported || !this.enabled) return null;
      var i = window.localStorage.getItem(this.key);
      if (is$1.empty(i)) return null;
      var n = JSON.parse(i);
      return is$1.string(t) && t.length ? n[t] : n;
    }
  }, {
    key: "set",
    value: function value(t) {
      if (e.supported && this.enabled && is$1.object(t)) {
        var i = this.get();
        is$1.empty(i) && (i = {}), extend(i, t), window.localStorage.setItem(this.key, JSON.stringify(i));
      }
    }
  }], [{
    key: "supported",
    get: function get() {
      try {
        if (!("localStorage" in window)) return !1;
        return window.localStorage.setItem("___test", "___test"), window.localStorage.removeItem("___test"), !0;
      } catch (e) {
        return !1;
      }
    }
  }]), e;
}();

function fetch(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "text";
  return new Promise(function (i, n) {
    try {
      var s = new XMLHttpRequest();
      if (!("withCredentials" in s)) return;
      s.addEventListener("load", function () {
        if ("text" === t) try {
          i(JSON.parse(s.responseText));
        } catch (e) {
          i(s.responseText);
        } else i(s.response);
      }), s.addEventListener("error", function () {
        throw new Error(s.status);
      }), s.open("GET", e, !0), s.responseType = t, s.send();
    } catch (e) {
      n(e);
    }
  });
}

function loadSprite(e, t) {
  if (is$1.string(e)) {
    var i = is$1.string(t),
        n = function n() {
      return null !== document.getElementById(t);
    },
        s = function s(e, t) {
      e.innerHTML = t, i && n() || document.body.insertAdjacentElement("afterbegin", e);
    };

    if (!i || !n()) {
      var a = Storage.supported,
          r = document.createElement("div");

      if (r.setAttribute("hidden", ""), i && r.setAttribute("id", t), a) {
        var o = window.localStorage.getItem("".concat("cache", "-").concat(t));

        if (null !== o) {
          var l = JSON.parse(o);
          s(r, l.content);
        }
      }

      fetch(e).then(function (e) {
        is$1.empty(e) || (a && window.localStorage.setItem("".concat("cache", "-").concat(t), JSON.stringify({
          content: e
        })), s(r, e));
      })["catch"](function () {});
    }
  }
}

var getHours = function getHours(e) {
  return Math.trunc(e / 60 / 60 % 60, 10);
},
    getMinutes = function getMinutes(e) {
  return Math.trunc(e / 60 % 60, 10);
},
    getSeconds = function getSeconds(e) {
  return Math.trunc(e % 60, 10);
};

function _formatTime() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
      t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
      i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
  if (!is$1.number(e)) return _formatTime(null, t, i);

  var n = function n(e) {
    return "0".concat(e).slice(-2);
  },
      s = getHours(e),
      a = getMinutes(e),
      r = getSeconds(e);

  return s = t || s > 0 ? "".concat(s, ":") : "", "".concat(i && e > 0 ? "-" : "").concat(s).concat(n(a), ":").concat(n(r));
}

var controls = {
  getIconUrl: function getIconUrl() {
    var e = new URL(this.config.iconUrl, window.location).host !== window.location.host || browser.isIE && !window.svg4everybody;
    return {
      url: this.config.iconUrl,
      cors: e
    };
  },
  findElements: function findElements() {
    try {
      return this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper), this.elements.buttons = {
        play: getElements.call(this, this.config.selectors.buttons.play),
        pause: getElement.call(this, this.config.selectors.buttons.pause),
        restart: getElement.call(this, this.config.selectors.buttons.restart),
        rewind: getElement.call(this, this.config.selectors.buttons.rewind),
        fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),
        mute: getElement.call(this, this.config.selectors.buttons.mute),
        pip: getElement.call(this, this.config.selectors.buttons.pip),
        airplay: getElement.call(this, this.config.selectors.buttons.airplay),
        settings: getElement.call(this, this.config.selectors.buttons.settings),
        captions: getElement.call(this, this.config.selectors.buttons.captions),
        fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen)
      }, this.elements.progress = getElement.call(this, this.config.selectors.progress), this.elements.inputs = {
        seek: getElement.call(this, this.config.selectors.inputs.seek),
        volume: getElement.call(this, this.config.selectors.inputs.volume)
      }, this.elements.display = {
        buffer: getElement.call(this, this.config.selectors.display.buffer),
        currentTime: getElement.call(this, this.config.selectors.display.currentTime),
        duration: getElement.call(this, this.config.selectors.display.duration)
      }, is$1.element(this.elements.progress) && (this.elements.display.seekTooltip = this.elements.progress.querySelector(".".concat(this.config.classNames.tooltip))), !0;
    } catch (e) {
      return this.debug.warn("It looks like there is a problem with your custom controls HTML", e), this.toggleNativeControls(!0), !1;
    }
  },
  createIcon: function createIcon(e, t) {
    var i = controls.getIconUrl.call(this),
        n = "".concat(i.cors ? "" : i.url, "#").concat(this.config.iconPrefix),
        s = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    setAttributes(s, extend(t, {
      role: "presentation",
      focusable: "false"
    }));
    var a = document.createElementNS("http://www.w3.org/2000/svg", "use"),
        r = "".concat(n, "-").concat(e);
    return "href" in a && a.setAttributeNS("http://www.w3.org/1999/xlink", "href", r), a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", r), s.appendChild(a), s;
  },
  createLabel: function createLabel(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        i = i18n.get(e, this.config);
    return createElement("span", Object.assign({}, t, {
      "class": [t["class"], this.config.classNames.hidden].filter(Boolean).join(" ")
    }), i);
  },
  createBadge: function createBadge(e) {
    if (is$1.empty(e)) return null;
    var t = createElement("span", {
      "class": this.config.classNames.menu.value
    });
    return t.appendChild(createElement("span", {
      "class": this.config.classNames.menu.badge
    }, e)), t;
  },
  createButton: function createButton(e, t) {
    var i = this,
        n = extend({}, t),
        s = toCamelCase(e),
        a = {
      element: "button",
      toggle: !1,
      label: null,
      icon: null,
      labelPressed: null,
      iconPressed: null
    };

    switch (["element", "icon", "label"].forEach(function (e) {
      Object.keys(n).includes(e) && (a[e] = n[e], delete n[e]);
    }), "button" !== a.element || Object.keys(n).includes("type") || (n.type = "button"), Object.keys(n).includes("class") ? n["class"].split(" ").some(function (e) {
      return e === i.config.classNames.control;
    }) || extend(n, {
      "class": "".concat(n["class"], " ").concat(this.config.classNames.control)
    }) : n["class"] = this.config.classNames.control, e) {
      case "play":
        a.toggle = !0, a.label = "play", a.labelPressed = "pause", a.icon = "play", a.iconPressed = "pause";
        break;

      case "mute":
        a.toggle = !0, a.label = "mute", a.labelPressed = "unmute", a.icon = "volume", a.iconPressed = "muted";
        break;

      case "captions":
        a.toggle = !0, a.label = "enableCaptions", a.labelPressed = "disableCaptions", a.icon = "captions-off", a.iconPressed = "captions-on";
        break;

      case "fullscreen":
        a.toggle = !0, a.label = "enterFullscreen", a.labelPressed = "exitFullscreen", a.icon = "enter-fullscreen", a.iconPressed = "exit-fullscreen";
        break;

      case "play-large":
        n["class"] += " ".concat(this.config.classNames.control, "--overlaid"), s = "play", a.label = "play", a.icon = "play";
        break;

      default:
        is$1.empty(a.label) && (a.label = s), is$1.empty(a.icon) && (a.icon = e);
    }

    var r = createElement(a.element);
    return a.toggle ? (r.appendChild(controls.createIcon.call(this, a.iconPressed, {
      "class": "icon--pressed"
    })), r.appendChild(controls.createIcon.call(this, a.icon, {
      "class": "icon--not-pressed"
    })), r.appendChild(controls.createLabel.call(this, a.labelPressed, {
      "class": "label--pressed"
    })), r.appendChild(controls.createLabel.call(this, a.label, {
      "class": "label--not-pressed"
    }))) : (r.appendChild(controls.createIcon.call(this, a.icon)), r.appendChild(controls.createLabel.call(this, a.label))), extend(n, getAttributesFromSelector(this.config.selectors.buttons[s], n)), setAttributes(r, n), "play" === s ? (is$1.array(this.elements.buttons[s]) || (this.elements.buttons[s] = []), this.elements.buttons[s].push(r)) : this.elements.buttons[s] = r, r;
  },
  createRange: function createRange(e, t) {
    var i = createElement("input", extend(getAttributesFromSelector(this.config.selectors.inputs[e]), {
      type: "range",
      min: 0,
      max: 100,
      step: .01,
      value: 0,
      autocomplete: "off",
      role: "slider",
      "aria-label": i18n.get(e, this.config),
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-valuenow": 0
    }, t));
    return this.elements.inputs[e] = i, controls.updateRangeFill.call(this, i), RangeTouch.setup(i), i;
  },
  createProgress: function createProgress(e, t) {
    var i = createElement("progress", extend(getAttributesFromSelector(this.config.selectors.display[e]), {
      min: 0,
      max: 100,
      value: 0,
      role: "progressbar",
      "aria-hidden": !0
    }, t));

    if ("volume" !== e) {
      i.appendChild(createElement("span", null, "0"));
      var n = {
        played: "played",
        buffer: "buffered"
      }[e],
          s = n ? i18n.get(n, this.config) : "";
      i.innerText = "% ".concat(s.toLowerCase());
    }

    return this.elements.display[e] = i, i;
  },
  createTime: function createTime(e, t) {
    var i = getAttributesFromSelector(this.config.selectors.display[e], t),
        n = createElement("div", extend(i, {
      "class": "".concat(i["class"] ? i["class"] : "", " ").concat(this.config.classNames.display.time, " ").trim(),
      "aria-label": i18n.get(e, this.config)
    }), "00:00");
    return this.elements.display[e] = n, n;
  },
  bindMenuItemShortcuts: function bindMenuItemShortcuts(e, t) {
    var i = this;
    on(e, "keydown keyup", function (n) {
      if ([32, 38, 39, 40].includes(n.which) && (n.preventDefault(), n.stopPropagation(), "keydown" !== n.type)) {
        var s,
            a = matches$1(e, '[role="menuitemradio"]');
        if (!a && [32, 39].includes(n.which)) controls.showMenuPanel.call(i, t, !0);else 32 !== n.which && (40 === n.which || a && 39 === n.which ? (s = e.nextElementSibling, is$1.element(s) || (s = e.parentNode.firstElementChild)) : (s = e.previousElementSibling, is$1.element(s) || (s = e.parentNode.lastElementChild)), setFocus.call(i, s, !0));
      }
    }, !1), on(e, "keyup", function (e) {
      13 === e.which && controls.focusFirstMenuItem.call(i, null, !0);
    });
  },
  createMenuItem: function createMenuItem(e) {
    var t = this,
        i = e.value,
        n = e.list,
        s = e.type,
        a = e.title,
        r = e.badge,
        o = void 0 === r ? null : r,
        l = e.checked,
        c = void 0 !== l && l,
        u = getAttributesFromSelector(this.config.selectors.inputs[s]),
        d = createElement("button", extend(u, {
      type: "button",
      role: "menuitemradio",
      "class": "".concat(this.config.classNames.control, " ").concat(u["class"] ? u["class"] : "").trim(),
      "aria-checked": c,
      value: i
    })),
        h = createElement("span");
    h.innerHTML = a, is$1.element(o) && h.appendChild(o), d.appendChild(h), Object.defineProperty(d, "checked", {
      enumerable: !0,
      get: function get() {
        return "true" === d.getAttribute("aria-checked");
      },
      set: function set(e) {
        e && Array.from(d.parentNode.children).filter(function (e) {
          return matches$1(e, '[role="menuitemradio"]');
        }).forEach(function (e) {
          return e.setAttribute("aria-checked", "false");
        }), d.setAttribute("aria-checked", e ? "true" : "false");
      }
    }), this.listeners.bind(d, "click keyup", function (e) {
      if (!is$1.keyboardEvent(e) || 32 === e.which) {
        switch (e.preventDefault(), e.stopPropagation(), d.checked = !0, s) {
          case "language":
            t.currentTrack = Number(i);
            break;

          case "quality":
            t.quality = i;
            break;

          case "speed":
            t.speed = parseFloat(i);
        }

        controls.showMenuPanel.call(t, "home", is$1.keyboardEvent(e));
      }
    }, s, !1), controls.bindMenuItemShortcuts.call(this, d, s), n.appendChild(d);
  },
  formatTime: function formatTime() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
        t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    return is$1.number(e) ? _formatTime(e, getHours(this.duration) > 0, t) : e;
  },
  updateTimeDisplay: function updateTimeDisplay() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
        i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    is$1.element(e) && is$1.number(t) && (e.innerText = controls.formatTime(t, i));
  },
  updateVolume: function updateVolume() {
    this.supported.ui && (is$1.element(this.elements.inputs.volume) && controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume), is$1.element(this.elements.buttons.mute) && (this.elements.buttons.mute.pressed = this.muted || 0 === this.volume));
  },
  setRange: function setRange(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
    is$1.element(e) && (e.value = t, controls.updateRangeFill.call(this, e));
  },
  updateProgress: function updateProgress(e) {
    var t = this;

    if (this.supported.ui && is$1.event(e)) {
      var i = 0;
      if (e) switch (e.type) {
        case "timeupdate":
        case "seeking":
        case "seeked":
          i = getPercentage(this.currentTime, this.duration), "timeupdate" === e.type && controls.setRange.call(this, this.elements.inputs.seek, i);
          break;

        case "playing":
        case "progress":
          !function (e, i) {
            var n = is$1.number(i) ? i : 0,
                s = is$1.element(e) ? e : t.elements.display.buffer;

            if (is$1.element(s)) {
              s.value = n;
              var a = s.getElementsByTagName("span")[0];
              is$1.element(a) && (a.childNodes[0].nodeValue = n);
            }
          }(this.elements.display.buffer, 100 * this.buffered);
      }
    }
  },
  updateRangeFill: function updateRangeFill(e) {
    var t = is$1.event(e) ? e.target : e;

    if (is$1.element(t) && "range" === t.getAttribute("type")) {
      if (matches$1(t, this.config.selectors.inputs.seek)) {
        t.setAttribute("aria-valuenow", this.currentTime);
        var i = controls.formatTime(this.currentTime),
            n = controls.formatTime(this.duration),
            s = i18n.get("seekLabel", this.config);
        t.setAttribute("aria-valuetext", s.replace("{currentTime}", i).replace("{duration}", n));
      } else if (matches$1(t, this.config.selectors.inputs.volume)) {
        var a = 100 * t.value;
        t.setAttribute("aria-valuenow", a), t.setAttribute("aria-valuetext", "".concat(a.toFixed(1), "%"));
      } else t.setAttribute("aria-valuenow", t.value);

      browser.isWebkit && t.style.setProperty("--value", "".concat(t.value / t.max * 100, "%"));
    }
  },
  updateSeekTooltip: function updateSeekTooltip(e) {
    var t = this;

    if (this.config.tooltips.seek && is$1.element(this.elements.inputs.seek) && is$1.element(this.elements.display.seekTooltip) && 0 !== this.duration) {
      var i = "".concat(this.config.classNames.tooltip, "--visible"),
          n = function n(e) {
        return toggleClass(t.elements.display.seekTooltip, i, e);
      };

      if (this.touch) n(!1);else {
        var s = 0,
            a = this.elements.progress.getBoundingClientRect();
        if (is$1.event(e)) s = 100 / a.width * (e.pageX - a.left);else {
          if (!hasClass(this.elements.display.seekTooltip, i)) return;
          s = parseFloat(this.elements.display.seekTooltip.style.left, 10);
        }
        s < 0 ? s = 0 : s > 100 && (s = 100), controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * s), this.elements.display.seekTooltip.style.left = "".concat(s, "%"), is$1.event(e) && ["mouseenter", "mouseleave"].includes(e.type) && n("mouseenter" === e.type);
      }
    }
  },
  timeUpdate: function timeUpdate(e) {
    var t = !is$1.element(this.elements.display.duration) && this.config.invertTime;
    controls.updateTimeDisplay.call(this, this.elements.display.currentTime, t ? this.duration - this.currentTime : this.currentTime, t), e && "timeupdate" === e.type && this.media.seeking || controls.updateProgress.call(this, e);
  },
  durationUpdate: function durationUpdate() {
    if (this.supported.ui && (this.config.invertTime || !this.currentTime)) {
      if (this.duration >= Math.pow(2, 32)) return toggleHidden(this.elements.display.currentTime, !0), void toggleHidden(this.elements.progress, !0);
      is$1.element(this.elements.inputs.seek) && this.elements.inputs.seek.setAttribute("aria-valuemax", this.duration);
      var e = is$1.element(this.elements.display.duration);
      !e && this.config.displayDuration && this.paused && controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration), e && controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration), controls.updateSeekTooltip.call(this);
    }
  },
  toggleMenuButton: function toggleMenuButton(e, t) {
    toggleHidden(this.elements.settings.buttons[e], !t);
  },
  updateSetting: function updateSetting(e, t, i) {
    var n = this.elements.settings.panels[e],
        s = null,
        a = t;
    if ("captions" === e) s = this.currentTrack;else {
      if (s = is$1.empty(i) ? this[e] : i, is$1.empty(s) && (s = this.config[e]["default"]), !is$1.empty(this.options[e]) && !this.options[e].includes(s)) return void this.debug.warn("Unsupported value of '".concat(s, "' for ").concat(e));
      if (!this.config[e].options.includes(s)) return void this.debug.warn("Disabled value of '".concat(s, "' for ").concat(e));
    }

    if (is$1.element(a) || (a = n && n.querySelector('[role="menu"]')), is$1.element(a)) {
      this.elements.settings.buttons[e].querySelector(".".concat(this.config.classNames.menu.value)).innerHTML = controls.getLabel.call(this, e, s);
      var r = a && a.querySelector('[value="'.concat(s, '"]'));
      is$1.element(r) && (r.checked = !0);
    }
  },
  getLabel: function getLabel(e, t) {
    switch (e) {
      case "speed":
        return 1 === t ? i18n.get("normal", this.config) : "".concat(t, "&times;");

      case "quality":
        if (is$1.number(t)) {
          var i = i18n.get("qualityLabel.".concat(t), this.config);
          return i.length ? i : "".concat(t, "p");
        }

        return toTitleCase(t);

      case "captions":
        return captions.getLabel.call(this);

      default:
        return null;
    }
  },
  setQualityMenu: function setQualityMenu(e) {
    var t = this;

    if (is$1.element(this.elements.settings.panels.quality)) {
      var i = this.elements.settings.panels.quality.querySelector('[role="menu"]');
      is$1.array(e) && (this.options.quality = dedupe(e).filter(function (e) {
        return t.config.quality.options.includes(e);
      }));
      var n = !is$1.empty(this.options.quality) && this.options.quality.length > 1;

      if (controls.toggleMenuButton.call(this, "quality", n), emptyElement(i), controls.checkMenu.call(this), n) {
        var s = function s(e) {
          var i = i18n.get("qualityBadge.".concat(e), t.config);
          return i.length ? controls.createBadge.call(t, i) : null;
        };

        this.options.quality.sort(function (e, i) {
          var n = t.config.quality.options;
          return n.indexOf(e) > n.indexOf(i) ? 1 : -1;
        }).forEach(function (e) {
          controls.createMenuItem.call(t, {
            value: e,
            list: i,
            type: "quality",
            title: controls.getLabel.call(t, "quality", e),
            badge: s(e)
          });
        }), controls.updateSetting.call(this, "quality", i);
      }
    }
  },
  setCaptionsMenu: function setCaptionsMenu() {
    var e = this;

    if (is$1.element(this.elements.settings.panels.captions)) {
      var t = this.elements.settings.panels.captions.querySelector('[role="menu"]'),
          i = captions.getTracks.call(this),
          n = Boolean(i.length);

      if (controls.toggleMenuButton.call(this, "captions", n), emptyElement(t), controls.checkMenu.call(this), n) {
        var s = i.map(function (i, n) {
          return {
            value: n,
            checked: e.captions.toggled && e.currentTrack === n,
            title: captions.getLabel.call(e, i),
            badge: i.language && controls.createBadge.call(e, i.language.toUpperCase()),
            list: t,
            type: "language"
          };
        });
        s.unshift({
          value: -1,
          checked: !this.captions.toggled,
          title: i18n.get("disabled", this.config),
          list: t,
          type: "language"
        }), s.forEach(controls.createMenuItem.bind(this)), controls.updateSetting.call(this, "captions", t);
      }
    }
  },
  setSpeedMenu: function setSpeedMenu(e) {
    var t = this;

    if (is$1.element(this.elements.settings.panels.speed)) {
      var i = this.elements.settings.panels.speed.querySelector('[role="menu"]');
      is$1.array(e) ? this.options.speed = e : (this.isHTML5 || this.isVimeo) && (this.options.speed = [.5, .75, 1, 1.25, 1.5, 1.75, 2]), this.options.speed = this.options.speed.filter(function (e) {
        return t.config.speed.options.includes(e);
      });
      var n = !is$1.empty(this.options.speed) && this.options.speed.length > 1;
      controls.toggleMenuButton.call(this, "speed", n), emptyElement(i), controls.checkMenu.call(this), n && (this.options.speed.forEach(function (e) {
        controls.createMenuItem.call(t, {
          value: e,
          list: i,
          type: "speed",
          title: controls.getLabel.call(t, "speed", e)
        });
      }), controls.updateSetting.call(this, "speed", i));
    }
  },
  checkMenu: function checkMenu() {
    var e = this.elements.settings.buttons,
        t = !is$1.empty(e) && Object.values(e).some(function (e) {
      return !e.hidden;
    });
    toggleHidden(this.elements.settings.menu, !t);
  },
  focusFirstMenuItem: function focusFirstMenuItem(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

    if (!this.elements.settings.popup.hidden) {
      var i = e;
      is$1.element(i) || (i = Object.values(this.elements.settings.panels).find(function (e) {
        return !e.hidden;
      }));
      var n = i.querySelector('[role^="menuitem"]');
      setFocus.call(this, n, t);
    }
  },
  toggleMenu: function toggleMenu(e) {
    var t = this.elements.settings.popup,
        i = this.elements.buttons.settings;

    if (is$1.element(t) && is$1.element(i)) {
      var n = t.hidden,
          s = n;
      if (is$1["boolean"](e)) s = e;else if (is$1.keyboardEvent(e) && 27 === e.which) s = !1;else if (is$1.event(e)) {
        var a = is$1["function"](e.composedPath) ? e.composedPath()[0] : e.target,
            r = t.contains(a);
        if (r || !r && e.target !== i && s) return;
      }
      i.setAttribute("aria-expanded", s), toggleHidden(t, !s), toggleClass(this.elements.container, this.config.classNames.menu.open, s), s && is$1.keyboardEvent(e) ? controls.focusFirstMenuItem.call(this, null, !0) : s || n || setFocus.call(this, i, is$1.keyboardEvent(e));
    }
  },
  getMenuSize: function getMenuSize(e) {
    var t = e.cloneNode(!0);
    t.style.position = "absolute", t.style.opacity = 0, t.removeAttribute("hidden"), e.parentNode.appendChild(t);
    var i = t.scrollWidth,
        n = t.scrollHeight;
    return removeElement(t), {
      width: i,
      height: n
    };
  },
  showMenuPanel: function showMenuPanel() {
    var e = this,
        t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
        i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
        n = this.elements.container.querySelector("#plyr-settings-".concat(this.id, "-").concat(t));

    if (is$1.element(n)) {
      var s = n.parentNode,
          a = Array.from(s.children).find(function (e) {
        return !e.hidden;
      });

      if (support.transitions && !support.reducedMotion) {
        s.style.width = "".concat(a.scrollWidth, "px"), s.style.height = "".concat(a.scrollHeight, "px");
        var r = controls.getMenuSize.call(this, n);
        on.call(this, s, transitionEndEvent, function t(i) {
          i.target === s && ["width", "height"].includes(i.propertyName) && (s.style.width = "", s.style.height = "", off.call(e, s, transitionEndEvent, t));
        }), s.style.width = "".concat(r.width, "px"), s.style.height = "".concat(r.height, "px");
      }

      toggleHidden(a, !0), toggleHidden(n, !1), controls.focusFirstMenuItem.call(this, n, i);
    }
  },
  setDownloadUrl: function setDownloadUrl() {
    var e = this.elements.buttons.download;
    is$1.element(e) && e.setAttribute("href", this.download);
  },
  create: function create(e) {
    var t = this,
        i = controls.bindMenuItemShortcuts,
        n = controls.createButton,
        s = controls.createProgress,
        a = controls.createRange,
        r = controls.createTime,
        o = controls.setQualityMenu,
        l = controls.setSpeedMenu,
        c = controls.showMenuPanel;
    this.elements.controls = null, this.config.controls.includes("play-large") && this.elements.container.appendChild(n.call(this, "play-large"));
    var u = createElement("div", getAttributesFromSelector(this.config.selectors.controls.wrapper));
    this.elements.controls = u;
    var d = {
      "class": "plyr__controls__item"
    };
    return dedupe(this.config.controls).forEach(function (o) {
      if ("restart" === o && u.appendChild(n.call(t, "restart", d)), "rewind" === o && u.appendChild(n.call(t, "rewind", d)), "play" === o && u.appendChild(n.call(t, "play", d)), "fast-forward" === o && u.appendChild(n.call(t, "fast-forward", d)), "progress" === o) {
        var l = createElement("div", {
          "class": "".concat(d["class"], " plyr__progress__container")
        }),
            h = createElement("div", getAttributesFromSelector(t.config.selectors.progress));

        if (h.appendChild(a.call(t, "seek", {
          id: "plyr-seek-".concat(e.id)
        })), h.appendChild(s.call(t, "buffer")), t.config.tooltips.seek) {
          var m = createElement("span", {
            "class": t.config.classNames.tooltip
          }, "00:00");
          h.appendChild(m), t.elements.display.seekTooltip = m;
        }

        t.elements.progress = h, l.appendChild(t.elements.progress), u.appendChild(l);
      }

      if ("current-time" === o && u.appendChild(r.call(t, "currentTime", d)), "duration" === o && u.appendChild(r.call(t, "duration", d)), "mute" === o || "volume" === o) {
        var p = t.elements.volume;

        if (is$1.element(p) && u.contains(p) || (p = createElement("div", extend({}, d, {
          "class": "".concat(d["class"], " plyr__volume").trim()
        })), t.elements.volume = p, u.appendChild(p)), "mute" === o && p.appendChild(n.call(t, "mute")), "volume" === o) {
          var g = {
            max: 1,
            step: .05,
            value: t.config.volume
          };
          p.appendChild(a.call(t, "volume", extend(g, {
            id: "plyr-volume-".concat(e.id)
          })));
        }
      }

      if ("captions" === o && u.appendChild(n.call(t, "captions", d)), "settings" === o && !is$1.empty(t.config.settings)) {
        var f = createElement("div", extend({}, d, {
          "class": "".concat(d["class"], " plyr__menu").trim(),
          hidden: ""
        }));
        f.appendChild(n.call(t, "settings", {
          "aria-haspopup": !0,
          "aria-controls": "plyr-settings-".concat(e.id),
          "aria-expanded": !1
        }));
        var y = createElement("div", {
          "class": "plyr__menu__container",
          id: "plyr-settings-".concat(e.id),
          hidden: ""
        }),
            v = createElement("div"),
            b = createElement("div", {
          id: "plyr-settings-".concat(e.id, "-home")
        }),
            k = createElement("div", {
          role: "menu"
        });
        b.appendChild(k), v.appendChild(b), t.elements.settings.panels.home = b, t.config.settings.forEach(function (n) {
          var s = createElement("button", extend(getAttributesFromSelector(t.config.selectors.buttons.settings), {
            type: "button",
            "class": "".concat(t.config.classNames.control, " ").concat(t.config.classNames.control, "--forward"),
            role: "menuitem",
            "aria-haspopup": !0,
            hidden: ""
          }));
          i.call(t, s, n), on(s, "click", function () {
            c.call(t, n, !1);
          });
          var a = createElement("span", null, i18n.get(n, t.config)),
              r = createElement("span", {
            "class": t.config.classNames.menu.value
          });
          r.innerHTML = e[n], a.appendChild(r), s.appendChild(a), k.appendChild(s);
          var o = createElement("div", {
            id: "plyr-settings-".concat(e.id, "-").concat(n),
            hidden: ""
          }),
              l = createElement("button", {
            type: "button",
            "class": "".concat(t.config.classNames.control, " ").concat(t.config.classNames.control, "--back")
          });
          l.appendChild(createElement("span", {
            "aria-hidden": !0
          }, i18n.get(n, t.config))), l.appendChild(createElement("span", {
            "class": t.config.classNames.hidden
          }, i18n.get("menuBack", t.config))), on(o, "keydown", function (e) {
            37 === e.which && (e.preventDefault(), e.stopPropagation(), c.call(t, "home", !0));
          }, !1), on(l, "click", function () {
            c.call(t, "home", !1);
          }), o.appendChild(l), o.appendChild(createElement("div", {
            role: "menu"
          })), v.appendChild(o), t.elements.settings.buttons[n] = s, t.elements.settings.panels[n] = o;
        }), y.appendChild(v), f.appendChild(y), u.appendChild(f), t.elements.settings.popup = y, t.elements.settings.menu = f;
      }

      if ("pip" === o && support.pip && u.appendChild(n.call(t, "pip", d)), "airplay" === o && support.airplay && u.appendChild(n.call(t, "airplay", d)), "download" === o) {
        var w = extend({}, d, {
          element: "a",
          href: t.download,
          target: "_blank"
        }),
            T = t.config.urls.download;
        !is$1.url(T) && t.isEmbed && extend(w, {
          icon: "logo-".concat(t.provider),
          label: t.provider
        }), u.appendChild(n.call(t, "download", w));
      }

      "fullscreen" === o && u.appendChild(n.call(t, "fullscreen", d));
    }), this.isHTML5 && o.call(this, html5.getQualityOptions.call(this)), l.call(this), u;
  },
  inject: function inject() {
    var e = this;

    if (this.config.loadSprite) {
      var t = controls.getIconUrl.call(this);
      t.cors && loadSprite(t.url, "sprite-plyr");
    }

    this.id = Math.floor(1e4 * Math.random());
    var i = null;
    this.elements.controls = null;
    var n = {
      id: this.id,
      seektime: this.config.seekTime,
      title: this.config.title
    },
        s = !0;
    is$1["function"](this.config.controls) && (this.config.controls = this.config.controls.call(this, n)), this.config.controls || (this.config.controls = []), is$1.element(this.config.controls) || is$1.string(this.config.controls) ? i = this.config.controls : (i = controls.create.call(this, {
      id: this.id,
      seektime: this.config.seekTime,
      speed: this.speed,
      quality: this.quality,
      captions: captions.getLabel.call(this)
    }), s = !1);

    var a,
        r = function r(e) {
      var t = e;
      return Object.entries(n).forEach(function (e) {
        var i = _slicedToArray(e, 2),
            n = i[0],
            s = i[1];

        t = replaceAll(t, "{".concat(n, "}"), s);
      }), t;
    };

    if (s && (is$1.string(this.config.controls) ? i = r(i) : is$1.element(i) && (i.innerHTML = r(i.innerHTML))), is$1.string(this.config.selectors.controls.container) && (a = document.querySelector(this.config.selectors.controls.container)), is$1.element(a) || (a = this.elements.container), a[is$1.element(i) ? "insertAdjacentElement" : "insertAdjacentHTML"]("afterbegin", i), is$1.element(this.elements.controls) || controls.findElements.call(this), !is$1.empty(this.elements.buttons)) {
      var o = function o(t) {
        var i = e.config.classNames.controlPressed;
        Object.defineProperty(t, "pressed", {
          enumerable: !0,
          get: function get() {
            return hasClass(t, i);
          },
          set: function set() {
            var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            toggleClass(t, i, e);
          }
        });
      };

      Object.values(this.elements.buttons).filter(Boolean).forEach(function (e) {
        is$1.array(e) || is$1.nodeList(e) ? Array.from(e).filter(Boolean).forEach(o) : o(e);
      });
    }

    if (browser.isEdge && repaint(a), this.config.tooltips.controls) {
      var l = this.config,
          c = l.classNames,
          u = l.selectors,
          d = "".concat(u.controls.wrapper, " ").concat(u.labels, " .").concat(c.hidden),
          h = getElements.call(this, d);
      Array.from(h).forEach(function (t) {
        toggleClass(t, e.config.classNames.hidden, !1), toggleClass(t, e.config.classNames.tooltip, !0);
      });
    }
  }
};

function parseUrl(e) {
  var t = e;

  if (!(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]) {
    var i = document.createElement("a");
    i.href = t, t = i.href;
  }

  try {
    return new URL(t);
  } catch (e) {
    return null;
  }
}

function buildUrlParams(e) {
  var t = new URLSearchParams();
  return is$1.object(e) && Object.entries(e).forEach(function (e) {
    var i = _slicedToArray(e, 2),
        n = i[0],
        s = i[1];

    t.set(n, s);
  }), t;
}

var captions = {
  setup: function setup() {
    if (this.supported.ui) if (!this.isVideo || this.isYouTube || this.isHTML5 && !support.textTracks) is$1.array(this.config.controls) && this.config.controls.includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this);else {
      if (is$1.element(this.elements.captions) || (this.elements.captions = createElement("div", getAttributesFromSelector(this.config.selectors.captions)), insertAfter(this.elements.captions, this.elements.wrapper)), browser.isIE && window.URL) {
        var e = this.media.querySelectorAll("track");
        Array.from(e).forEach(function (e) {
          var t = e.getAttribute("src"),
              i = parseUrl(t);
          null !== i && i.hostname !== window.location.href.hostname && ["http:", "https:"].includes(i.protocol) && fetch(t, "blob").then(function (t) {
            e.setAttribute("src", window.URL.createObjectURL(t));
          })["catch"](function () {
            removeElement(e);
          });
        });
      }

      var t = dedupe((navigator.languages || [navigator.language || navigator.userLanguage || "en"]).map(function (e) {
        return e.split("-")[0];
      })),
          i = (this.storage.get("language") || this.config.captions.language || "auto").toLowerCase();
      if ("auto" === i) i = _slicedToArray(t, 1)[0];
      var n = this.storage.get("captions");

      if (is$1["boolean"](n) || (n = this.config.captions.active), Object.assign(this.captions, {
        toggled: !1,
        active: n,
        language: i,
        languages: t
      }), this.isHTML5) {
        var s = this.config.captions.update ? "addtrack removetrack" : "removetrack";
        on.call(this, this.media.textTracks, s, captions.update.bind(this));
      }

      setTimeout(captions.update.bind(this), 0);
    }
  },
  update: function update() {
    var e = this,
        t = captions.getTracks.call(this, !0),
        i = this.captions,
        n = i.active,
        s = i.language,
        a = i.meta,
        r = i.currentTrackNode,
        o = Boolean(t.find(function (e) {
      return e.language === s;
    }));
    this.isHTML5 && this.isVideo && t.filter(function (e) {
      return !a.get(e);
    }).forEach(function (t) {
      e.debug.log("Track added", t), a.set(t, {
        "default": "showing" === t.mode
      }), t.mode = "hidden", on.call(e, t, "cuechange", function () {
        return captions.updateCues.call(e);
      });
    }), (o && this.language !== s || !t.includes(r)) && (captions.setLanguage.call(this, s), captions.toggle.call(this, n && o)), toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is$1.empty(t)), (this.config.controls || []).includes("settings") && this.config.settings.includes("captions") && controls.setCaptionsMenu.call(this);
  },
  toggle: function toggle(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

    if (this.supported.ui) {
      var i = this.captions.toggled,
          n = this.config.classNames.captions.active,
          s = is$1.nullOrUndefined(e) ? !i : e;

      if (s !== i) {
        if (t || (this.captions.active = s, this.storage.set({
          captions: s
        })), !this.language && s && !t) {
          var a = captions.getTracks.call(this),
              r = captions.findTrack.call(this, [this.captions.language].concat(_toConsumableArray(this.captions.languages)), !0);
          return this.captions.language = r.language, void captions.set.call(this, a.indexOf(r));
        }

        this.elements.buttons.captions && (this.elements.buttons.captions.pressed = s), toggleClass(this.elements.container, n, s), this.captions.toggled = s, controls.updateSetting.call(this, "captions"), triggerEvent.call(this, this.media, s ? "captionsenabled" : "captionsdisabled");
      }
    }
  },
  set: function set(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
        i = captions.getTracks.call(this);
    if (-1 !== e) {
      if (is$1.number(e)) {
        if (e in i) {
          if (this.captions.currentTrack !== e) {
            this.captions.currentTrack = e;
            var n = i[e],
                s = (n || {}).language;
            this.captions.currentTrackNode = n, controls.updateSetting.call(this, "captions"), t || (this.captions.language = s, this.storage.set({
              language: s
            })), this.isVimeo && this.embed.enableTextTrack(s), triggerEvent.call(this, this.media, "languagechange");
          }

          captions.toggle.call(this, !0, t), this.isHTML5 && this.isVideo && captions.updateCues.call(this);
        } else this.debug.warn("Track not found", e);
      } else this.debug.warn("Invalid caption argument", e);
    } else captions.toggle.call(this, !1, t);
  },
  setLanguage: function setLanguage(e) {
    var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

    if (is$1.string(e)) {
      var i = e.toLowerCase();
      this.captions.language = i;
      var n = captions.getTracks.call(this),
          s = captions.findTrack.call(this, [i]);
      captions.set.call(this, n.indexOf(s), t);
    } else this.debug.warn("Invalid language argument", e);
  },
  getTracks: function getTracks() {
    var e = this,
        t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    return Array.from((this.media || {}).textTracks || []).filter(function (i) {
      return !e.isHTML5 || t || e.captions.meta.has(i);
    }).filter(function (e) {
      return ["captions", "subtitles"].includes(e.kind);
    });
  },
  findTrack: function findTrack(e) {
    var t,
        i = this,
        n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
        s = captions.getTracks.call(this),
        a = function a(e) {
      return Number((i.captions.meta.get(e) || {})["default"]);
    },
        r = Array.from(s).sort(function (e, t) {
      return a(t) - a(e);
    });

    return e.every(function (e) {
      return !(t = r.find(function (t) {
        return t.language === e;
      }));
    }), t || (n ? r[0] : void 0);
  },
  getCurrentTrack: function getCurrentTrack() {
    return captions.getTracks.call(this)[this.currentTrack];
  },
  getLabel: function getLabel(e) {
    var t = e;
    return !is$1.track(t) && support.textTracks && this.captions.toggled && (t = captions.getCurrentTrack.call(this)), is$1.track(t) ? is$1.empty(t.label) ? is$1.empty(t.language) ? i18n.get("enabled", this.config) : e.language.toUpperCase() : t.label : i18n.get("disabled", this.config);
  },
  updateCues: function updateCues(e) {
    if (this.supported.ui) if (is$1.element(this.elements.captions)) {
      if (is$1.nullOrUndefined(e) || Array.isArray(e)) {
        var t = e;

        if (!t) {
          var i = captions.getCurrentTrack.call(this);
          t = Array.from((i || {}).activeCues || []).map(function (e) {
            return e.getCueAsHTML();
          }).map(getHTML);
        }

        var n = t.map(function (e) {
          return e.trim();
        }).join("\n");

        if (n !== this.elements.captions.innerHTML) {
          emptyElement(this.elements.captions);
          var s = createElement("span", getAttributesFromSelector(this.config.selectors.caption));
          s.innerHTML = n, this.elements.captions.appendChild(s), triggerEvent.call(this, this.media, "cuechange");
        }
      } else this.debug.warn("updateCues: Invalid input", e);
    } else this.debug.warn("No captions element to render to");
  }
},
    defaults$1 = {
  enabled: !0,
  title: "",
  debug: !1,
  autoplay: !1,
  autopause: !0,
  playsinline: !0,
  seekTime: 10,
  volume: 1,
  muted: !1,
  duration: null,
  displayDuration: !0,
  invertTime: !0,
  toggleInvert: !0,
  ratio: null,
  clickToPlay: !0,
  hideControls: !0,
  resetOnEnd: !1,
  disableContextMenu: !0,
  loadSprite: !0,
  iconPrefix: "plyr",
  iconUrl: "https://cdn.plyr.io/3.5.6/plyr.svg",
  blankVideo: "https://cdn.plyr.io/static/blank.mp4",
  quality: {
    "default": 576,
    options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240]
  },
  loop: {
    active: !1
  },
  speed: {
    selected: 1,
    options: [.5, .75, 1, 1.25, 1.5, 1.75, 2]
  },
  keyboard: {
    focused: !0,
    global: !1
  },
  tooltips: {
    controls: !1,
    seek: !0
  },
  captions: {
    active: !1,
    language: "auto",
    update: !1
  },
  fullscreen: {
    enabled: !0,
    fallback: !0,
    iosNative: !1
  },
  storage: {
    enabled: !0,
    key: "plyr"
  },
  controls: ["play-large", "play", "progress", "current-time", "mute", "volume", "captions", "settings", "pip", "airplay", "fullscreen"],
  settings: ["captions", "quality", "speed"],
  i18n: {
    restart: "Restart",
    rewind: "Rewind {seektime}s",
    play: "Play",
    pause: "Pause",
    fastForward: "Forward {seektime}s",
    seek: "Seek",
    seekLabel: "{currentTime} of {duration}",
    played: "Played",
    buffered: "Buffered",
    currentTime: "Current time",
    duration: "Duration",
    volume: "Volume",
    mute: "Mute",
    unmute: "Unmute",
    enableCaptions: "Enable captions",
    disableCaptions: "Disable captions",
    download: "Download",
    enterFullscreen: "Enter fullscreen",
    exitFullscreen: "Exit fullscreen",
    frameTitle: "Player for {title}",
    captions: "Captions",
    settings: "Settings",
    menuBack: "Go back to previous menu",
    speed: "Speed",
    normal: "Normal",
    quality: "Quality",
    loop: "Loop",
    start: "Start",
    end: "End",
    all: "All",
    reset: "Reset",
    disabled: "Disabled",
    enabled: "Enabled",
    advertisement: "Ad",
    qualityBadge: {
      2160: "4K",
      1440: "HD",
      1080: "HD",
      720: "HD",
      576: "SD",
      480: "SD"
    }
  },
  urls: {
    download: null,
    vimeo: {
      sdk: "https://player.vimeo.com/api/player.js",
      iframe: "https://player.vimeo.com/video/{0}?{1}",
      api: "https://vimeo.com/api/v2/video/{0}.json"
    },
    youtube: {
      sdk: "https://www.youtube.com/iframe_api",
      api: "https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}"
    },
    googleIMA: {
      sdk: "https://imasdk.googleapis.com/js/sdkloader/ima3.js"
    }
  },
  listeners: {
    seek: null,
    play: null,
    pause: null,
    restart: null,
    rewind: null,
    fastForward: null,
    mute: null,
    volume: null,
    captions: null,
    download: null,
    fullscreen: null,
    pip: null,
    airplay: null,
    speed: null,
    quality: null,
    loop: null,
    language: null
  },
  events: ["ended", "progress", "stalled", "playing", "waiting", "canplay", "canplaythrough", "loadstart", "loadeddata", "loadedmetadata", "timeupdate", "volumechange", "play", "pause", "error", "seeking", "seeked", "emptied", "ratechange", "cuechange", "download", "enterfullscreen", "exitfullscreen", "captionsenabled", "captionsdisabled", "languagechange", "controlshidden", "controlsshown", "ready", "statechange", "qualitychange", "adsloaded", "adscontentpause", "adscontentresume", "adstarted", "adsmidpoint", "adscomplete", "adsallcomplete", "adsimpression", "adsclick"],
  selectors: {
    editable: "input, textarea, select, [contenteditable]",
    container: ".plyr",
    controls: {
      container: null,
      wrapper: ".plyr__controls"
    },
    labels: "[data-plyr]",
    buttons: {
      play: '[data-plyr="play"]',
      pause: '[data-plyr="pause"]',
      restart: '[data-plyr="restart"]',
      rewind: '[data-plyr="rewind"]',
      fastForward: '[data-plyr="fast-forward"]',
      mute: '[data-plyr="mute"]',
      captions: '[data-plyr="captions"]',
      download: '[data-plyr="download"]',
      fullscreen: '[data-plyr="fullscreen"]',
      pip: '[data-plyr="pip"]',
      airplay: '[data-plyr="airplay"]',
      settings: '[data-plyr="settings"]',
      loop: '[data-plyr="loop"]'
    },
    inputs: {
      seek: '[data-plyr="seek"]',
      volume: '[data-plyr="volume"]',
      speed: '[data-plyr="speed"]',
      language: '[data-plyr="language"]',
      quality: '[data-plyr="quality"]'
    },
    display: {
      currentTime: ".plyr__time--current",
      duration: ".plyr__time--duration",
      buffer: ".plyr__progress__buffer",
      loop: ".plyr__progress__loop",
      volume: ".plyr__volume--display"
    },
    progress: ".plyr__progress",
    captions: ".plyr__captions",
    caption: ".plyr__caption"
  },
  classNames: {
    type: "plyr--{0}",
    provider: "plyr--{0}",
    video: "plyr__video-wrapper",
    embed: "plyr__video-embed",
    videoFixedRatio: "plyr__video-wrapper--fixed-ratio",
    embedContainer: "plyr__video-embed__container",
    poster: "plyr__poster",
    posterEnabled: "plyr__poster-enabled",
    ads: "plyr__ads",
    control: "plyr__control",
    controlPressed: "plyr__control--pressed",
    playing: "plyr--playing",
    paused: "plyr--paused",
    stopped: "plyr--stopped",
    loading: "plyr--loading",
    hover: "plyr--hover",
    tooltip: "plyr__tooltip",
    cues: "plyr__cues",
    hidden: "plyr__sr-only",
    hideControls: "plyr--hide-controls",
    isIos: "plyr--is-ios",
    isTouch: "plyr--is-touch",
    uiSupported: "plyr--full-ui",
    noTransition: "plyr--no-transition",
    display: {
      time: "plyr__time"
    },
    menu: {
      value: "plyr__menu__value",
      badge: "plyr__badge",
      open: "plyr--menu-open"
    },
    captions: {
      enabled: "plyr--captions-enabled",
      active: "plyr--captions-active"
    },
    fullscreen: {
      enabled: "plyr--fullscreen-enabled",
      fallback: "plyr--fullscreen-fallback"
    },
    pip: {
      supported: "plyr--pip-supported",
      active: "plyr--pip-active"
    },
    airplay: {
      supported: "plyr--airplay-supported",
      active: "plyr--airplay-active"
    },
    tabFocus: "plyr__tab-focus",
    previewThumbnails: {
      thumbContainer: "plyr__preview-thumb",
      thumbContainerShown: "plyr__preview-thumb--is-shown",
      imageContainer: "plyr__preview-thumb__image-container",
      timeContainer: "plyr__preview-thumb__time-container",
      scrubbingContainer: "plyr__preview-scrubbing",
      scrubbingContainerShown: "plyr__preview-scrubbing--is-shown"
    }
  },
  attributes: {
    embed: {
      provider: "data-plyr-provider",
      id: "data-plyr-embed-id"
    }
  },
  ads: {
    enabled: !1,
    publisherId: "",
    tagUrl: ""
  },
  previewThumbnails: {
    enabled: !1,
    src: ""
  },
  vimeo: {
    byline: !1,
    portrait: !1,
    title: !1,
    speed: !0,
    transparent: !1
  },
  youtube: {
    noCookie: !1,
    rel: 0,
    showinfo: 0,
    iv_load_policy: 3,
    modestbranding: 1
  }
},
    pip = {
  active: "picture-in-picture",
  inactive: "inline"
},
    providers = {
  html5: "html5",
  youtube: "youtube",
  vimeo: "vimeo"
},
    types = {
  audio: "audio",
  video: "video"
};

function getProviderByUrl(e) {
  return /^(https?:\/\/)?(www\.)?(youtube\.com|youtube-nocookie\.com|youtu\.?be)\/.+$/.test(e) ? providers.youtube : /^https?:\/\/player.vimeo.com\/video\/\d{0,9}(?=\b|\/)/.test(e) ? providers.vimeo : null;
}

var noop = function noop() {},
    Console = function () {
  function e() {
    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    _classCallCheck(this, e), this.enabled = window.console && t, this.enabled && this.log("Debugging enabled");
  }

  return _createClass(e, [{
    key: "log",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;
    }
  }, {
    key: "warn",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;
    }
  }, {
    key: "error",
    get: function get() {
      return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;
    }
  }]), e;
}();

function onChange() {
  if (this.enabled) {
    var e = this.player.elements.buttons.fullscreen;
    is$1.element(e) && (e.pressed = this.active), triggerEvent.call(this.player, this.target, this.active ? "enterfullscreen" : "exitfullscreen", !0), browser.isIos || trapFocus.call(this.player, this.target, this.active);
  }
}

function toggleFallback() {
  var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];

  if (e ? this.scrollPosition = {
    x: window.scrollX || 0,
    y: window.scrollY || 0
  } : window.scrollTo(this.scrollPosition.x, this.scrollPosition.y), document.body.style.overflow = e ? "hidden" : "", toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, e), browser.isIos) {
    var t = document.head.querySelector('meta[name="viewport"]'),
        i = "viewport-fit=cover";
    t || (t = document.createElement("meta")).setAttribute("name", "viewport");
    var n = is$1.string(t.content) && t.content.includes(i);
    e ? (this.cleanupViewport = !n, n || (t.content += ",".concat(i))) : this.cleanupViewport && (t.content = t.content.split(",").filter(function (e) {
      return e.trim() !== i;
    }).join(","));
  }

  onChange.call(this);
}

var Fullscreen = function () {
  function e(t) {
    var i = this;
    _classCallCheck(this, e), this.player = t, this.prefix = e.prefix, this.property = e.property, this.scrollPosition = {
      x: 0,
      y: 0
    }, this.forceFallback = "force" === t.config.fullscreen.fallback, on.call(this.player, document, "ms" === this.prefix ? "MSFullscreenChange" : "".concat(this.prefix, "fullscreenchange"), function () {
      onChange.call(i);
    }), on.call(this.player, this.player.elements.container, "dblclick", function (e) {
      is$1.element(i.player.elements.controls) && i.player.elements.controls.contains(e.target) || i.toggle();
    }), this.update();
  }

  return _createClass(e, [{
    key: "update",
    value: function value() {
      var t;
      this.enabled ? (t = this.forceFallback ? "Fallback (forced)" : e["native"] ? "Native" : "Fallback", this.player.debug.log("".concat(t, " fullscreen enabled"))) : this.player.debug.log("Fullscreen not supported and fallback disabled");
      toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);
    }
  }, {
    key: "enter",
    value: function value() {
      this.enabled && (browser.isIos && this.player.config.fullscreen.iosNative ? this.target.webkitEnterFullscreen() : !e["native"] || this.forceFallback ? toggleFallback.call(this, !0) : this.prefix ? is$1.empty(this.prefix) || this.target["".concat(this.prefix, "Request").concat(this.property)]() : this.target.requestFullscreen());
    }
  }, {
    key: "exit",
    value: function value() {
      if (this.enabled) if (browser.isIos && this.player.config.fullscreen.iosNative) this.target.webkitExitFullscreen(), this.player.play();else if (!e["native"] || this.forceFallback) toggleFallback.call(this, !1);else if (this.prefix) {
        if (!is$1.empty(this.prefix)) {
          var t = "moz" === this.prefix ? "Cancel" : "Exit";
          document["".concat(this.prefix).concat(t).concat(this.property)]();
        }
      } else (document.cancelFullScreen || document.exitFullscreen).call(document);
    }
  }, {
    key: "toggle",
    value: function value() {
      this.active ? this.exit() : this.enter();
    }
  }, {
    key: "usingNative",
    get: function get() {
      return e["native"] && !this.forceFallback;
    }
  }, {
    key: "enabled",
    get: function get() {
      return (e["native"] || this.player.config.fullscreen.fallback) && this.player.config.fullscreen.enabled && this.player.supported.ui && this.player.isVideo;
    }
  }, {
    key: "active",
    get: function get() {
      return !!this.enabled && (!e["native"] || this.forceFallback ? hasClass(this.target, this.player.config.classNames.fullscreen.fallback) : (this.prefix ? document["".concat(this.prefix).concat(this.property, "Element")] : document.fullscreenElement) === this.target);
    }
  }, {
    key: "target",
    get: function get() {
      return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;
    }
  }], [{
    key: "native",
    get: function get() {
      return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);
    }
  }, {
    key: "prefix",
    get: function get() {
      if (is$1["function"](document.exitFullscreen)) return "";
      var e = "";
      return ["webkit", "moz", "ms"].some(function (t) {
        return !(!is$1["function"](document["".concat(t, "ExitFullscreen")]) && !is$1["function"](document["".concat(t, "CancelFullScreen")])) && (e = t, !0);
      }), e;
    }
  }, {
    key: "property",
    get: function get() {
      return "moz" === this.prefix ? "FullScreen" : "Fullscreen";
    }
  }]), e;
}();

function loadImage(e) {
  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
  return new Promise(function (i, n) {
    var s = new Image(),
        a = function a() {
      delete s.onload, delete s.onerror, (s.naturalWidth >= t ? i : n)(s);
    };

    Object.assign(s, {
      onload: a,
      onerror: a,
      src: e
    });
  });
}

var ui = {
  addStyleHook: function addStyleHook() {
    toggleClass(this.elements.container, this.config.selectors.container.replace(".", ""), !0), toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);
  },
  toggleNativeControls: function toggleNativeControls() {
    arguments.length > 0 && void 0 !== arguments[0] && arguments[0] && this.isHTML5 ? this.media.setAttribute("controls", "") : this.media.removeAttribute("controls");
  },
  build: function build() {
    var e = this;
    if (this.listeners.media(), !this.supported.ui) return this.debug.warn("Basic support only for ".concat(this.provider, " ").concat(this.type)), void ui.toggleNativeControls.call(this, !0);
    is$1.element(this.elements.controls) || (controls.inject.call(this), this.listeners.controls()), ui.toggleNativeControls.call(this), this.isHTML5 && captions.setup.call(this), this.volume = null, this.muted = null, this.loop = null, this.quality = null, this.speed = null, controls.updateVolume.call(this), controls.timeUpdate.call(this), ui.checkPlaying.call(this), toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo), toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5), toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos), toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch), this.ready = !0, setTimeout(function () {
      triggerEvent.call(e, e.media, "ready");
    }, 0), ui.setTitle.call(this), this.poster && ui.setPoster.call(this, this.poster, !1)["catch"](function () {}), this.config.duration && controls.durationUpdate.call(this);
  },
  setTitle: function setTitle() {
    var e = i18n.get("play", this.config);

    if (is$1.string(this.config.title) && !is$1.empty(this.config.title) && (e += ", ".concat(this.config.title)), Array.from(this.elements.buttons.play || []).forEach(function (t) {
      t.setAttribute("aria-label", e);
    }), this.isEmbed) {
      var t = getElement.call(this, "iframe");
      if (!is$1.element(t)) return;
      var i = is$1.empty(this.config.title) ? "video" : this.config.title,
          n = i18n.get("frameTitle", this.config);
      t.setAttribute("title", n.replace("{title}", i));
    }
  },
  togglePoster: function togglePoster(e) {
    toggleClass(this.elements.container, this.config.classNames.posterEnabled, e);
  },
  setPoster: function setPoster(e) {
    var t = this;
    return arguments.length > 1 && void 0 !== arguments[1] && !arguments[1] || !this.poster ? (this.media.setAttribute("poster", e), ready.call(this).then(function () {
      return loadImage(e);
    })["catch"](function (i) {
      throw e === t.poster && ui.togglePoster.call(t, !1), i;
    }).then(function () {
      if (e !== t.poster) throw new Error("setPoster cancelled by later call to setPoster");
    }).then(function () {
      return Object.assign(t.elements.poster.style, {
        backgroundImage: "url('".concat(e, "')"),
        backgroundSize: ""
      }), ui.togglePoster.call(t, !0), e;
    })) : Promise.reject(new Error("Poster already set"));
  },
  checkPlaying: function checkPlaying(e) {
    var t = this;
    toggleClass(this.elements.container, this.config.classNames.playing, this.playing), toggleClass(this.elements.container, this.config.classNames.paused, this.paused), toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped), Array.from(this.elements.buttons.play || []).forEach(function (e) {
      Object.assign(e, {
        pressed: t.playing
      });
    }), is$1.event(e) && "timeupdate" === e.type || ui.toggleControls.call(this);
  },
  checkLoading: function checkLoading(e) {
    var t = this;
    this.loading = ["stalled", "waiting"].includes(e.type), clearTimeout(this.timers.loading), this.timers.loading = setTimeout(function () {
      toggleClass(t.elements.container, t.config.classNames.loading, t.loading), ui.toggleControls.call(t);
    }, this.loading ? 250 : 0);
  },
  toggleControls: function toggleControls(e) {
    var t = this.elements.controls;

    if (t && this.config.hideControls) {
      var i = this.touch && this.lastSeekTime + 2e3 > Date.now();
      this.toggleControls(Boolean(e || this.loading || this.paused || t.pressed || t.hover || i));
    }
  }
},
    Listeners = function () {
  function e(t) {
    _classCallCheck(this, e), this.player = t, this.lastKey = null, this.focusTimer = null, this.lastKeyDown = null, this.handleKey = this.handleKey.bind(this), this.toggleMenu = this.toggleMenu.bind(this), this.setTabFocus = this.setTabFocus.bind(this), this.firstTouch = this.firstTouch.bind(this);
  }

  return _createClass(e, [{
    key: "handleKey",
    value: function value(e) {
      var t = this.player,
          i = t.elements,
          n = e.keyCode ? e.keyCode : e.which,
          s = "keydown" === e.type,
          a = s && n === this.lastKey;

      if (!(e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) && is$1.number(n)) {
        if (s) {
          var r = document.activeElement;

          if (is$1.element(r)) {
            var o = t.config.selectors.editable;
            if (r !== i.inputs.seek && matches$1(r, o)) return;
            if (32 === e.which && matches$1(r, 'button, [role^="menuitem"]')) return;
          }

          switch ([32, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 56, 57, 67, 70, 73, 75, 76, 77, 79].includes(n) && (e.preventDefault(), e.stopPropagation()), n) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              a || (t.currentTime = t.duration / 10 * (n - 48));
              break;

            case 32:
            case 75:
              a || t.togglePlay();
              break;

            case 38:
              t.increaseVolume(.1);
              break;

            case 40:
              t.decreaseVolume(.1);
              break;

            case 77:
              a || (t.muted = !t.muted);
              break;

            case 39:
              t.forward();
              break;

            case 37:
              t.rewind();
              break;

            case 70:
              t.fullscreen.toggle();
              break;

            case 67:
              a || t.toggleCaptions();
              break;

            case 76:
              t.loop = !t.loop;
          }

          27 === n && !t.fullscreen.usingNative && t.fullscreen.active && t.fullscreen.toggle(), this.lastKey = n;
        } else this.lastKey = null;
      }
    }
  }, {
    key: "toggleMenu",
    value: function value(e) {
      controls.toggleMenu.call(this.player, e);
    }
  }, {
    key: "firstTouch",
    value: function value() {
      var e = this.player,
          t = e.elements;
      e.touch = !0, toggleClass(t.container, e.config.classNames.isTouch, !0);
    }
  }, {
    key: "setTabFocus",
    value: function value(e) {
      var t = this.player,
          i = t.elements;

      if (clearTimeout(this.focusTimer), "keydown" !== e.type || 9 === e.which) {
        "keydown" === e.type && (this.lastKeyDown = e.timeStamp);
        var n,
            s = e.timeStamp - this.lastKeyDown <= 20;
        if ("focus" !== e.type || s) n = t.config.classNames.tabFocus, toggleClass(getElements.call(t, ".".concat(n)), n, !1), this.focusTimer = setTimeout(function () {
          var e = document.activeElement;
          i.container.contains(e) && toggleClass(document.activeElement, t.config.classNames.tabFocus, !0);
        }, 10);
      }
    }
  }, {
    key: "global",
    value: function value() {
      var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
          t = this.player;
      t.config.keyboard.global && toggleListener.call(t, window, "keydown keyup", this.handleKey, e, !1), toggleListener.call(t, document.body, "click", this.toggleMenu, e), once.call(t, document.body, "touchstart", this.firstTouch), toggleListener.call(t, document.body, "keydown focus blur", this.setTabFocus, e, !1, !0);
    }
  }, {
    key: "container",
    value: function value() {
      var e = this.player,
          t = e.config,
          i = e.elements,
          n = e.timers;
      !t.keyboard.global && t.keyboard.focused && on.call(e, i.container, "keydown keyup", this.handleKey, !1), on.call(e, i.container, "mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen", function (t) {
        var s = i.controls;
        s && "enterfullscreen" === t.type && (s.pressed = !1, s.hover = !1);
        var a = 0;
        ["touchstart", "touchmove", "mousemove"].includes(t.type) && (ui.toggleControls.call(e, !0), a = e.touch ? 3e3 : 2e3), clearTimeout(n.controls), n.controls = setTimeout(function () {
          return ui.toggleControls.call(e, !1);
        }, a);
      });

      var s = function s(t) {
        if (!t) return setAspectRatio.call(e);
        var n = i.container.getBoundingClientRect(),
            s = n.width,
            a = n.height;
        return setAspectRatio.call(e, "".concat(s, ":").concat(a));
      },
          a = function a() {
        clearTimeout(n.resized), n.resized = setTimeout(s, 50);
      };

      on.call(e, i.container, "enterfullscreen exitfullscreen", function (t) {
        var n = e.fullscreen,
            r = n.target,
            o = n.usingNative;

        if (r === i.container && (e.isEmbed || !is$1.empty(e.config.ratio))) {
          var l = "enterfullscreen" === t.type,
              c = s(l);
          c.padding;
          !function (t, i, n) {
            if (e.isVimeo) {
              var s = e.elements.wrapper.firstChild,
                  a = _slicedToArray(t, 2)[1],
                  r = _slicedToArray(getAspectRatio.call(e), 2),
                  o = r[0],
                  l = r[1];

              s.style.maxWidth = n ? "".concat(a / l * o, "px") : null, s.style.margin = n ? "0 auto" : null;
            }
          }(c.ratio, 0, l), o || (l ? on.call(e, window, "resize", a) : off.call(e, window, "resize", a));
        }
      });
    }
  }, {
    key: "media",
    value: function value() {
      var e = this,
          t = this.player,
          i = t.elements;

      if (on.call(t, t.media, "timeupdate seeking seeked", function (e) {
        return controls.timeUpdate.call(t, e);
      }), on.call(t, t.media, "durationchange loadeddata loadedmetadata", function (e) {
        return controls.durationUpdate.call(t, e);
      }), on.call(t, t.media, "canplay loadeddata", function () {
        toggleHidden(i.volume, !t.hasAudio), toggleHidden(i.buttons.mute, !t.hasAudio);
      }), on.call(t, t.media, "ended", function () {
        t.isHTML5 && t.isVideo && t.config.resetOnEnd && t.restart();
      }), on.call(t, t.media, "progress playing seeking seeked", function (e) {
        return controls.updateProgress.call(t, e);
      }), on.call(t, t.media, "volumechange", function (e) {
        return controls.updateVolume.call(t, e);
      }), on.call(t, t.media, "playing play pause ended emptied timeupdate", function (e) {
        return ui.checkPlaying.call(t, e);
      }), on.call(t, t.media, "waiting canplay seeked playing", function (e) {
        return ui.checkLoading.call(t, e);
      }), t.supported.ui && t.config.clickToPlay && !t.isAudio) {
        var n = getElement.call(t, ".".concat(t.config.classNames.video));
        if (!is$1.element(n)) return;
        on.call(t, i.container, "click", function (s) {
          ([i.container, n].includes(s.target) || n.contains(s.target)) && (t.touch && t.config.hideControls || (t.ended ? (e.proxy(s, t.restart, "restart"), e.proxy(s, t.play, "play")) : e.proxy(s, t.togglePlay, "play")));
        });
      }

      t.supported.ui && t.config.disableContextMenu && on.call(t, i.wrapper, "contextmenu", function (e) {
        e.preventDefault();
      }, !1), on.call(t, t.media, "volumechange", function () {
        t.storage.set({
          volume: t.volume,
          muted: t.muted
        });
      }), on.call(t, t.media, "ratechange", function () {
        controls.updateSetting.call(t, "speed"), t.storage.set({
          speed: t.speed
        });
      }), on.call(t, t.media, "qualitychange", function (e) {
        controls.updateSetting.call(t, "quality", null, e.detail.quality);
      }), on.call(t, t.media, "ready qualitychange", function () {
        controls.setDownloadUrl.call(t);
      });
      var s = t.config.events.concat(["keyup", "keydown"]).join(" ");
      on.call(t, t.media, s, function (e) {
        var n = e.detail,
            s = void 0 === n ? {} : n;
        "error" === e.type && (s = t.media.error), triggerEvent.call(t, i.container, e.type, !0, s);
      });
    }
  }, {
    key: "proxy",
    value: function value(e, t, i) {
      var n = this.player,
          s = n.config.listeners[i],
          a = !0;
      is$1["function"](s) && (a = s.call(n, e)), a && is$1["function"](t) && t.call(n, e);
    }
  }, {
    key: "bind",
    value: function value(e, t, i, n) {
      var s = this,
          a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
          r = this.player,
          o = r.config.listeners[n],
          l = is$1["function"](o);
      on.call(r, e, t, function (e) {
        return s.proxy(e, i, n);
      }, a && !l);
    }
  }, {
    key: "controls",
    value: function value() {
      var e = this,
          t = this.player,
          i = t.elements,
          n = browser.isIE ? "change" : "input";

      if (i.buttons.play && Array.from(i.buttons.play).forEach(function (i) {
        e.bind(i, "click", t.togglePlay, "play");
      }), this.bind(i.buttons.restart, "click", t.restart, "restart"), this.bind(i.buttons.rewind, "click", t.rewind, "rewind"), this.bind(i.buttons.fastForward, "click", t.forward, "fastForward"), this.bind(i.buttons.mute, "click", function () {
        t.muted = !t.muted;
      }, "mute"), this.bind(i.buttons.captions, "click", function () {
        return t.toggleCaptions();
      }), this.bind(i.buttons.download, "click", function () {
        triggerEvent.call(t, t.media, "download");
      }, "download"), this.bind(i.buttons.fullscreen, "click", function () {
        t.fullscreen.toggle();
      }, "fullscreen"), this.bind(i.buttons.pip, "click", function () {
        t.pip = "toggle";
      }, "pip"), this.bind(i.buttons.airplay, "click", t.airplay, "airplay"), this.bind(i.buttons.settings, "click", function (e) {
        e.stopPropagation(), controls.toggleMenu.call(t, e);
      }), this.bind(i.buttons.settings, "keyup", function (e) {
        var i = e.which;
        [13, 32].includes(i) && (13 !== i ? (e.preventDefault(), e.stopPropagation(), controls.toggleMenu.call(t, e)) : controls.focusFirstMenuItem.call(t, null, !0));
      }, null, !1), this.bind(i.settings.menu, "keydown", function (e) {
        27 === e.which && controls.toggleMenu.call(t, e);
      }), this.bind(i.inputs.seek, "mousedown mousemove", function (e) {
        var t = i.progress.getBoundingClientRect(),
            n = 100 / t.width * (e.pageX - t.left);
        e.currentTarget.setAttribute("seek-value", n);
      }), this.bind(i.inputs.seek, "mousedown mouseup keydown keyup touchstart touchend", function (e) {
        var i = e.currentTarget,
            n = e.keyCode ? e.keyCode : e.which;

        if (!is$1.keyboardEvent(e) || 39 === n || 37 === n) {
          t.lastSeekTime = Date.now();
          var s = i.hasAttribute("play-on-seeked"),
              a = ["mouseup", "touchend", "keyup"].includes(e.type);
          s && a ? (i.removeAttribute("play-on-seeked"), t.play()) : !a && t.playing && (i.setAttribute("play-on-seeked", ""), t.pause());
        }
      }), browser.isIos) {
        var s = getElements.call(t, 'input[type="range"]');
        Array.from(s).forEach(function (t) {
          return e.bind(t, n, function (e) {
            return repaint(e.target);
          });
        });
      }

      this.bind(i.inputs.seek, n, function (e) {
        var i = e.currentTarget,
            n = i.getAttribute("seek-value");
        is$1.empty(n) && (n = i.value), i.removeAttribute("seek-value"), t.currentTime = n / i.max * t.duration;
      }, "seek"), this.bind(i.progress, "mouseenter mouseleave mousemove", function (e) {
        return controls.updateSeekTooltip.call(t, e);
      }), this.bind(i.progress, "mousemove touchmove", function (e) {
        var i = t.previewThumbnails;
        i && i.loaded && i.startMove(e);
      }), this.bind(i.progress, "mouseleave click", function () {
        var e = t.previewThumbnails;
        e && e.loaded && e.endMove(!1, !0);
      }), this.bind(i.progress, "mousedown touchstart", function (e) {
        var i = t.previewThumbnails;
        i && i.loaded && i.startScrubbing(e);
      }), this.bind(i.progress, "mouseup touchend", function (e) {
        var i = t.previewThumbnails;
        i && i.loaded && i.endScrubbing(e);
      }), browser.isWebkit && Array.from(getElements.call(t, 'input[type="range"]')).forEach(function (i) {
        e.bind(i, "input", function (e) {
          return controls.updateRangeFill.call(t, e.target);
        });
      }), t.config.toggleInvert && !is$1.element(i.display.duration) && this.bind(i.display.currentTime, "click", function () {
        0 !== t.currentTime && (t.config.invertTime = !t.config.invertTime, controls.timeUpdate.call(t));
      }), this.bind(i.inputs.volume, n, function (e) {
        t.volume = e.target.value;
      }, "volume"), this.bind(i.controls, "mouseenter mouseleave", function (e) {
        i.controls.hover = !t.touch && "mouseenter" === e.type;
      }), this.bind(i.controls, "mousedown mouseup touchstart touchend touchcancel", function (e) {
        i.controls.pressed = ["mousedown", "touchstart"].includes(e.type);
      }), this.bind(i.controls, "focusin", function () {
        var n = t.config,
            s = t.timers;
        toggleClass(i.controls, n.classNames.noTransition, !0), ui.toggleControls.call(t, !0), setTimeout(function () {
          toggleClass(i.controls, n.classNames.noTransition, !1);
        }, 0);
        var a = e.touch ? 3e3 : 4e3;
        clearTimeout(s.controls), s.controls = setTimeout(function () {
          return ui.toggleControls.call(t, !1);
        }, a);
      }), this.bind(i.inputs.volume, "wheel", function (e) {
        var i = e.webkitDirectionInvertedFromDevice,
            n = _slicedToArray([e.deltaX, -e.deltaY].map(function (e) {
          return i ? -e : e;
        }), 2),
            s = n[0],
            a = n[1],
            r = Math.sign(Math.abs(s) > Math.abs(a) ? s : a);

        t.increaseVolume(r / 50);
        var o = t.media.volume;
        (1 === r && o < 1 || -1 === r && o > 0) && e.preventDefault();
      }, "volume", !1);
    }
  }]), e;
}(),
    commonjsGlobal = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

function createCommonjsModule(e, t) {
  return e(t = {
    exports: {}
  }, t.exports), t.exports;
}

var loadjs_umd = createCommonjsModule(function (e, t) {
  e.exports = function () {
    var e = function e() {},
        t = {},
        i = {},
        n = {};

    function s(e, t) {
      if (e) {
        var s = n[e];
        if (i[e] = t, s) for (; s.length;) {
          s[0](e, t), s.splice(0, 1);
        }
      }
    }

    function a(t, i) {
      t.call && (t = {
        success: t
      }), i.length ? (t.error || e)(i) : (t.success || e)(t);
    }

    function r(t, i, n, s) {
      var a,
          o,
          l = document,
          c = n.async,
          u = (n.numRetries || 0) + 1,
          d = n.before || e,
          h = t.replace(/^(css|img)!/, "");
      s = s || 0, /(^css!|\.css$)/.test(t) ? ((o = l.createElement("link")).rel = "stylesheet", o.href = h, (a = "hideFocus" in o) && o.relList && (a = 0, o.rel = "preload", o.as = "style")) : /(^img!|\.(png|gif|jpg|svg)$)/.test(t) ? (o = l.createElement("img")).src = h : ((o = l.createElement("script")).src = t, o.async = void 0 === c || c), o.onload = o.onerror = o.onbeforeload = function (e) {
        var l = e.type[0];
        if (a) try {
          o.sheet.cssText.length || (l = "e");
        } catch (e) {
          18 != e.code && (l = "e");
        }

        if ("e" == l) {
          if ((s += 1) < u) return r(t, i, n, s);
        } else if ("preload" == o.rel && "style" == o.as) return o.rel = "stylesheet";

        i(t, l, e.defaultPrevented);
      }, !1 !== d(t, o) && l.head.appendChild(o);
    }

    function o(e, i, n) {
      var o, l;

      if (i && i.trim && (o = i), l = (o ? n : i) || {}, o) {
        if (o in t) throw "LoadJS";
        t[o] = !0;
      }

      function c(t, i) {
        !function (e, t, i) {
          var n,
              s,
              a = (e = e.push ? e : [e]).length,
              o = a,
              l = [];

          for (n = function n(e, i, _n) {
            if ("e" == i && l.push(e), "b" == i) {
              if (!_n) return;
              l.push(e);
            }

            --a || t(l);
          }, s = 0; s < o; s++) {
            r(e[s], n, i);
          }
        }(e, function (e) {
          a(l, e), t && a({
            success: t,
            error: i
          }, e), s(o, e);
        }, l);
      }

      if (l.returnPromise) return new Promise(c);
      c();
    }

    return o.ready = function (e, t) {
      return function (e, t) {
        e = e.push ? e : [e];
        var s,
            a,
            r,
            o = [],
            l = e.length,
            c = l;

        for (s = function s(e, i) {
          i.length && o.push(e), --c || t(o);
        }; l--;) {
          a = e[l], (r = i[a]) ? s(a, r) : (n[a] = n[a] || []).push(s);
        }
      }(e, function (e) {
        a(t, e);
      }), o;
    }, o.done = function (e) {
      s(e, []);
    }, o.reset = function () {
      t = {}, i = {}, n = {};
    }, o.isDefined = function (e) {
      return e in t;
    }, o;
  }();
});

function loadScript(e) {
  return new Promise(function (t, i) {
    loadjs_umd(e, {
      success: t,
      error: i
    });
  });
}

function parseId(e) {
  if (is$1.empty(e)) return null;
  if (is$1.number(Number(e))) return e;
  return e.match(/^.*(vimeo.com\/|video\/)(\d+).*/) ? RegExp.$2 : e;
}

function assurePlaybackState(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}

var vimeo = {
  setup: function setup() {
    var e = this;
    toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), setAspectRatio.call(this), is$1.object(window.Vimeo) ? vimeo.ready.call(this) : loadScript(this.config.urls.vimeo.sdk).then(function () {
      vimeo.ready.call(e);
    })["catch"](function (t) {
      e.debug.warn("Vimeo SDK (player.js) failed to load", t);
    });
  },
  ready: function ready() {
    var e = this,
        t = this,
        i = t.config.vimeo,
        n = buildUrlParams(extend({}, {
      loop: t.config.loop.active,
      autoplay: t.autoplay,
      muted: t.muted,
      gesture: "media",
      playsinline: !this.config.fullscreen.iosNative
    }, i)),
        s = t.media.getAttribute("src");
    is$1.empty(s) && (s = t.media.getAttribute(t.config.attributes.embed.id));
    var a = parseId(s),
        r = createElement("iframe"),
        o = format(t.config.urls.vimeo.iframe, a, n);
    r.setAttribute("src", o), r.setAttribute("allowfullscreen", ""), r.setAttribute("allowtransparency", ""), r.setAttribute("allow", "autoplay");
    var l = createElement("div", {
      poster: t.poster,
      "class": t.config.classNames.embedContainer
    });
    l.appendChild(r), t.media = replaceElement(l, t.media), fetch(format(t.config.urls.vimeo.api, a), "json").then(function (e) {
      if (!is$1.empty(e)) {
        var i = new URL(e[0].thumbnail_large);
        i.pathname = "".concat(i.pathname.split("_")[0], ".jpg"), ui.setPoster.call(t, i.href)["catch"](function () {});
      }
    }), t.embed = new window.Vimeo.Player(r, {
      autopause: t.config.autopause,
      muted: t.muted
    }), t.media.paused = !0, t.media.currentTime = 0, t.supported.ui && t.embed.disableTextTrack(), t.media.play = function () {
      return assurePlaybackState.call(t, !0), t.embed.play();
    }, t.media.pause = function () {
      return assurePlaybackState.call(t, !1), t.embed.pause();
    }, t.media.stop = function () {
      t.pause(), t.currentTime = 0;
    };
    var c = t.media.currentTime;
    Object.defineProperty(t.media, "currentTime", {
      get: function get() {
        return c;
      },
      set: function set(e) {
        var i = t.embed,
            n = t.media,
            s = t.paused,
            a = t.volume,
            r = s && !i.hasPlayed;
        n.seeking = !0, triggerEvent.call(t, n, "seeking"), Promise.resolve(r && i.setVolume(0)).then(function () {
          return i.setCurrentTime(e);
        }).then(function () {
          return r && i.pause();
        }).then(function () {
          return r && i.setVolume(a);
        })["catch"](function () {});
      }
    });
    var u = t.config.speed.selected;
    Object.defineProperty(t.media, "playbackRate", {
      get: function get() {
        return u;
      },
      set: function set(e) {
        t.embed.setPlaybackRate(e).then(function () {
          u = e, triggerEvent.call(t, t.media, "ratechange");
        })["catch"](function (e) {
          "Error" === e.name && controls.setSpeedMenu.call(t, []);
        });
      }
    });
    var d = t.config.volume;
    Object.defineProperty(t.media, "volume", {
      get: function get() {
        return d;
      },
      set: function set(e) {
        t.embed.setVolume(e).then(function () {
          d = e, triggerEvent.call(t, t.media, "volumechange");
        });
      }
    });
    var h = t.config.muted;
    Object.defineProperty(t.media, "muted", {
      get: function get() {
        return h;
      },
      set: function set(e) {
        var i = !!is$1["boolean"](e) && e;
        t.embed.setVolume(i ? 0 : t.config.volume).then(function () {
          h = i, triggerEvent.call(t, t.media, "volumechange");
        });
      }
    });
    var m,
        p = t.config.loop;
    Object.defineProperty(t.media, "loop", {
      get: function get() {
        return p;
      },
      set: function set(e) {
        var i = is$1["boolean"](e) ? e : t.config.loop.active;
        t.embed.setLoop(i).then(function () {
          p = i;
        });
      }
    }), t.embed.getVideoUrl().then(function (e) {
      m = e, controls.setDownloadUrl.call(t);
    })["catch"](function (t) {
      e.debug.warn(t);
    }), Object.defineProperty(t.media, "currentSrc", {
      get: function get() {
        return m;
      }
    }), Object.defineProperty(t.media, "ended", {
      get: function get() {
        return t.currentTime === t.duration;
      }
    }), Promise.all([t.embed.getVideoWidth(), t.embed.getVideoHeight()]).then(function (i) {
      var n = _slicedToArray(i, 2),
          s = n[0],
          a = n[1];

      t.embed.ratio = [s, a], setAspectRatio.call(e);
    }), t.embed.setAutopause(t.config.autopause).then(function (e) {
      t.config.autopause = e;
    }), t.embed.getVideoTitle().then(function (i) {
      t.config.title = i, ui.setTitle.call(e);
    }), t.embed.getCurrentTime().then(function (e) {
      c = e, triggerEvent.call(t, t.media, "timeupdate");
    }), t.embed.getDuration().then(function (e) {
      t.media.duration = e, triggerEvent.call(t, t.media, "durationchange");
    }), t.embed.getTextTracks().then(function (e) {
      t.media.textTracks = e, captions.setup.call(t);
    }), t.embed.on("cuechange", function (e) {
      var i = e.cues,
          n = (void 0 === i ? [] : i).map(function (e) {
        return stripHTML(e.text);
      });
      captions.updateCues.call(t, n);
    }), t.embed.on("loaded", function () {
      (t.embed.getPaused().then(function (e) {
        assurePlaybackState.call(t, !e), e || triggerEvent.call(t, t.media, "playing");
      }), is$1.element(t.embed.element) && t.supported.ui) && t.embed.element.setAttribute("tabindex", -1);
    }), t.embed.on("play", function () {
      assurePlaybackState.call(t, !0), triggerEvent.call(t, t.media, "playing");
    }), t.embed.on("pause", function () {
      assurePlaybackState.call(t, !1);
    }), t.embed.on("timeupdate", function (e) {
      t.media.seeking = !1, c = e.seconds, triggerEvent.call(t, t.media, "timeupdate");
    }), t.embed.on("progress", function (e) {
      t.media.buffered = e.percent, triggerEvent.call(t, t.media, "progress"), 1 === parseInt(e.percent, 10) && triggerEvent.call(t, t.media, "canplaythrough"), t.embed.getDuration().then(function (e) {
        e !== t.media.duration && (t.media.duration = e, triggerEvent.call(t, t.media, "durationchange"));
      });
    }), t.embed.on("seeked", function () {
      t.media.seeking = !1, triggerEvent.call(t, t.media, "seeked");
    }), t.embed.on("ended", function () {
      t.media.paused = !0, triggerEvent.call(t, t.media, "ended");
    }), t.embed.on("error", function (e) {
      t.media.error = e, triggerEvent.call(t, t.media, "error");
    }), setTimeout(function () {
      return ui.build.call(t);
    }, 0);
  }
};

function parseId$1(e) {
  if (is$1.empty(e)) return null;
  return e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/) ? RegExp.$2 : e;
}

function assurePlaybackState$1(e) {
  e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0), this.media.paused === e && (this.media.paused = !e, triggerEvent.call(this, this.media, e ? "play" : "pause"));
}

function getHost(e) {
  return e.noCookie ? "https://www.youtube-nocookie.com" : "http:" === window.location.protocol ? "http://www.youtube.com" : void 0;
}

var youtube = {
  setup: function setup() {
    var e = this;
    if (toggleClass(this.elements.wrapper, this.config.classNames.embed, !0), is$1.object(window.YT) && is$1["function"](window.YT.Player)) youtube.ready.call(this);else {
      var t = window.onYouTubeIframeAPIReady;
      window.onYouTubeIframeAPIReady = function () {
        is$1["function"](t) && t(), youtube.ready.call(e);
      }, loadScript(this.config.urls.youtube.sdk)["catch"](function (t) {
        e.debug.warn("YouTube API failed to load", t);
      });
    }
  },
  getTitle: function getTitle(e) {
    var t = this;
    fetch(format(this.config.urls.youtube.api, e)).then(function (e) {
      if (is$1.object(e)) {
        var i = e.title,
            n = e.height,
            s = e.width;
        t.config.title = i, ui.setTitle.call(t), t.embed.ratio = [s, n];
      }

      setAspectRatio.call(t);
    })["catch"](function () {
      setAspectRatio.call(t);
    });
  },
  ready: function ready() {
    var e = this,
        t = e.media && e.media.getAttribute("id");

    if (is$1.empty(t) || !t.startsWith("youtube-")) {
      var i = e.media.getAttribute("src");
      is$1.empty(i) && (i = e.media.getAttribute(this.config.attributes.embed.id));
      var n = parseId$1(i),
          s = generateId(e.provider),
          a = createElement("div", {
        id: s,
        poster: e.poster
      });
      e.media = replaceElement(a, e.media);

      var r = function r(e) {
        return "https://i.ytimg.com/vi/".concat(n, "/").concat(e, "default.jpg");
      };

      loadImage(r("maxres"), 121)["catch"](function () {
        return loadImage(r("sd"), 121);
      })["catch"](function () {
        return loadImage(r("hq"));
      }).then(function (t) {
        return ui.setPoster.call(e, t.src);
      }).then(function (t) {
        t.includes("maxres") || (e.elements.poster.style.backgroundSize = "cover");
      })["catch"](function () {});
      var o = e.config.youtube;
      e.embed = new window.YT.Player(s, {
        videoId: n,
        host: getHost(o),
        playerVars: extend({}, {
          autoplay: e.config.autoplay ? 1 : 0,
          hl: e.config.hl,
          controls: e.supported.ui ? 0 : 1,
          disablekb: 1,
          playsinline: e.config.fullscreen.iosNative ? 0 : 1,
          cc_load_policy: e.captions.active ? 1 : 0,
          cc_lang_pref: e.config.captions.language,
          widget_referrer: window ? window.location.href : null
        }, o),
        events: {
          onError: function onError(t) {
            if (!e.media.error) {
              var i = t.data,
                  n = {
                2: "The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.",
                5: "The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.",
                100: "The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.",
                101: "The owner of the requested video does not allow it to be played in embedded players.",
                150: "The owner of the requested video does not allow it to be played in embedded players."
              }[i] || "An unknown error occured";
              e.media.error = {
                code: i,
                message: n
              }, triggerEvent.call(e, e.media, "error");
            }
          },
          onPlaybackRateChange: function onPlaybackRateChange(t) {
            var i = t.target;
            e.media.playbackRate = i.getPlaybackRate(), triggerEvent.call(e, e.media, "ratechange");
          },
          onReady: function onReady(t) {
            if (!is$1["function"](e.media.play)) {
              var i = t.target;
              youtube.getTitle.call(e, n), e.media.play = function () {
                assurePlaybackState$1.call(e, !0), i.playVideo();
              }, e.media.pause = function () {
                assurePlaybackState$1.call(e, !1), i.pauseVideo();
              }, e.media.stop = function () {
                i.stopVideo();
              }, e.media.duration = i.getDuration(), e.media.paused = !0, e.media.currentTime = 0, Object.defineProperty(e.media, "currentTime", {
                get: function get() {
                  return Number(i.getCurrentTime());
                },
                set: function set(t) {
                  e.paused && !e.embed.hasPlayed && e.embed.mute(), e.media.seeking = !0, triggerEvent.call(e, e.media, "seeking"), i.seekTo(t);
                }
              }), Object.defineProperty(e.media, "playbackRate", {
                get: function get() {
                  return i.getPlaybackRate();
                },
                set: function set(e) {
                  i.setPlaybackRate(e);
                }
              });
              var s = e.config.volume;
              Object.defineProperty(e.media, "volume", {
                get: function get() {
                  return s;
                },
                set: function set(t) {
                  s = t, i.setVolume(100 * s), triggerEvent.call(e, e.media, "volumechange");
                }
              });
              var a = e.config.muted;
              Object.defineProperty(e.media, "muted", {
                get: function get() {
                  return a;
                },
                set: function set(t) {
                  var n = is$1["boolean"](t) ? t : a;
                  a = n, i[n ? "mute" : "unMute"](), triggerEvent.call(e, e.media, "volumechange");
                }
              }), Object.defineProperty(e.media, "currentSrc", {
                get: function get() {
                  return i.getVideoUrl();
                }
              }), Object.defineProperty(e.media, "ended", {
                get: function get() {
                  return e.currentTime === e.duration;
                }
              }), e.options.speed = i.getAvailablePlaybackRates(), e.supported.ui && e.media.setAttribute("tabindex", -1), triggerEvent.call(e, e.media, "timeupdate"), triggerEvent.call(e, e.media, "durationchange"), clearInterval(e.timers.buffering), e.timers.buffering = setInterval(function () {
                e.media.buffered = i.getVideoLoadedFraction(), (null === e.media.lastBuffered || e.media.lastBuffered < e.media.buffered) && triggerEvent.call(e, e.media, "progress"), e.media.lastBuffered = e.media.buffered, 1 === e.media.buffered && (clearInterval(e.timers.buffering), triggerEvent.call(e, e.media, "canplaythrough"));
              }, 200), setTimeout(function () {
                return ui.build.call(e);
              }, 50);
            }
          },
          onStateChange: function onStateChange(t) {
            var i = t.target;

            switch (clearInterval(e.timers.playing), e.media.seeking && [1, 2].includes(t.data) && (e.media.seeking = !1, triggerEvent.call(e, e.media, "seeked")), t.data) {
              case -1:
                triggerEvent.call(e, e.media, "timeupdate"), e.media.buffered = i.getVideoLoadedFraction(), triggerEvent.call(e, e.media, "progress");
                break;

              case 0:
                assurePlaybackState$1.call(e, !1), e.media.loop ? (i.stopVideo(), i.playVideo()) : triggerEvent.call(e, e.media, "ended");
                break;

              case 1:
                e.config.autoplay || !e.media.paused || e.embed.hasPlayed ? (assurePlaybackState$1.call(e, !0), triggerEvent.call(e, e.media, "playing"), e.timers.playing = setInterval(function () {
                  triggerEvent.call(e, e.media, "timeupdate");
                }, 50), e.media.duration !== i.getDuration() && (e.media.duration = i.getDuration(), triggerEvent.call(e, e.media, "durationchange"))) : e.media.pause();
                break;

              case 2:
                e.muted || e.embed.unMute(), assurePlaybackState$1.call(e, !1);
            }

            triggerEvent.call(e, e.elements.container, "statechange", !1, {
              code: t.data
            });
          }
        }
      });
    }
  }
},
    media = {
  setup: function setup() {
    this.media ? (toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", this.type), !0), toggleClass(this.elements.container, this.config.classNames.provider.replace("{0}", this.provider), !0), this.isEmbed && toggleClass(this.elements.container, this.config.classNames.type.replace("{0}", "video"), !0), this.isVideo && (this.elements.wrapper = createElement("div", {
      "class": this.config.classNames.video
    }), wrap(this.media, this.elements.wrapper), this.elements.poster = createElement("div", {
      "class": this.config.classNames.poster
    }), this.elements.wrapper.appendChild(this.elements.poster)), this.isHTML5 ? html5.extend.call(this) : this.isYouTube ? youtube.setup.call(this) : this.isVimeo && vimeo.setup.call(this)) : this.debug.warn("No media element found!");
  }
},
    destroy = function destroy(e) {
  e.manager && e.manager.destroy(), e.elements.displayContainer && e.elements.displayContainer.destroy(), e.elements.container.remove();
},
    Ads = function () {
  function e(t) {
    var i = this;
    _classCallCheck(this, e), this.player = t, this.config = t.config.ads, this.playing = !1, this.initialized = !1, this.elements = {
      container: null,
      displayContainer: null
    }, this.manager = null, this.loader = null, this.cuePoints = null, this.events = {}, this.safetyTimer = null, this.countdownTimer = null, this.managerPromise = new Promise(function (e, t) {
      i.on("loaded", e), i.on("error", t);
    }), this.load();
  }

  return _createClass(e, [{
    key: "load",
    value: function value() {
      var e = this;
      this.enabled && (is$1.object(window.google) && is$1.object(window.google.ima) ? this.ready() : loadScript(this.player.config.urls.googleIMA.sdk).then(function () {
        e.ready();
      })["catch"](function () {
        e.trigger("error", new Error("Google IMA SDK failed to load"));
      }));
    }
  }, {
    key: "ready",
    value: function value() {
      var e = this;
      this.enabled || destroy(this), this.startSafetyTimer(12e3, "ready()"), this.managerPromise.then(function () {
        e.clearSafetyTimer("onAdsManagerLoaded()");
      }), this.listeners(), this.setupIMA();
    }
  }, {
    key: "setupIMA",
    value: function value() {
      this.elements.container = createElement("div", {
        "class": this.player.config.classNames.ads
      }), this.player.elements.container.appendChild(this.elements.container), google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED), google.ima.settings.setLocale(this.player.config.ads.language), google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline), this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container, this.player.media), this.requestAds();
    }
  }, {
    key: "requestAds",
    value: function value() {
      var e = this,
          t = this.player.elements.container;

      try {
        this.loader = new google.ima.AdsLoader(this.elements.displayContainer), this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, function (t) {
          return e.onAdsManagerLoaded(t);
        }, !1), this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (t) {
          return e.onAdError(t);
        }, !1);
        var i = new google.ima.AdsRequest();
        i.adTagUrl = this.tagUrl, i.linearAdSlotWidth = t.offsetWidth, i.linearAdSlotHeight = t.offsetHeight, i.nonLinearAdSlotWidth = t.offsetWidth, i.nonLinearAdSlotHeight = t.offsetHeight, i.forceNonLinearFullSlot = !1, i.setAdWillPlayMuted(!this.player.muted), this.loader.requestAds(i);
      } catch (e) {
        this.onAdError(e);
      }
    }
  }, {
    key: "pollCountdown",
    value: function value() {
      var e = this;
      if (!(arguments.length > 0 && void 0 !== arguments[0] && arguments[0])) return clearInterval(this.countdownTimer), void this.elements.container.removeAttribute("data-badge-text");
      this.countdownTimer = setInterval(function () {
        var t = _formatTime(Math.max(e.manager.getRemainingTime(), 0)),
            i = "".concat(i18n.get("advertisement", e.player.config), " - ").concat(t);

        e.elements.container.setAttribute("data-badge-text", i);
      }, 100);
    }
  }, {
    key: "onAdsManagerLoaded",
    value: function value(e) {
      var t = this;

      if (this.enabled) {
        var i = new google.ima.AdsRenderingSettings();
        i.restoreCustomPlaybackStateOnAdBreakComplete = !0, i.enablePreloading = !0, this.manager = e.getAdsManager(this.player, i), this.cuePoints = this.manager.getCuePoints(), this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (e) {
          return t.onAdError(e);
        }), Object.keys(google.ima.AdEvent.Type).forEach(function (e) {
          t.manager.addEventListener(google.ima.AdEvent.Type[e], function (e) {
            return t.onAdEvent(e);
          });
        }), this.trigger("loaded");
      }
    }
  }, {
    key: "addCuePoints",
    value: function value() {
      var e = this;
      is$1.empty(this.cuePoints) || this.cuePoints.forEach(function (t) {
        if (0 !== t && -1 !== t && t < e.player.duration) {
          var i = e.player.elements.progress;

          if (is$1.element(i)) {
            var n = 100 / e.player.duration * t,
                s = createElement("span", {
              "class": e.player.config.classNames.cues
            });
            s.style.left = "".concat(n.toString(), "%"), i.appendChild(s);
          }
        }
      });
    }
  }, {
    key: "onAdEvent",
    value: function value(e) {
      var t,
          i = this,
          n = this.player.elements.container,
          s = e.getAd(),
          a = e.getAdData();

      switch (t = e.type, triggerEvent.call(i.player, i.player.media, "ads".concat(t.replace(/_/g, "").toLowerCase())), e.type) {
        case google.ima.AdEvent.Type.LOADED:
          this.trigger("loaded"), this.pollCountdown(!0), s.isLinear() || (s.width = n.offsetWidth, s.height = n.offsetHeight);
          break;

        case google.ima.AdEvent.Type.STARTED:
          this.manager.setVolume(this.player.volume);
          break;

        case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
          this.loadAds();
          break;

        case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:
          this.pauseContent();
          break;

        case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:
          this.pollCountdown(), this.resumeContent();
          break;

        case google.ima.AdEvent.Type.LOG:
          a.adError && this.player.debug.warn("Non-fatal ad error: ".concat(a.adError.getMessage()));
      }
    }
  }, {
    key: "onAdError",
    value: function value(e) {
      this.cancel(), this.player.debug.warn("Ads error", e);
    }
  }, {
    key: "listeners",
    value: function value() {
      var e,
          t = this,
          i = this.player.elements.container;
      this.player.on("canplay", function () {
        t.addCuePoints();
      }), this.player.on("ended", function () {
        t.loader.contentComplete();
      }), this.player.on("timeupdate", function () {
        e = t.player.currentTime;
      }), this.player.on("seeked", function () {
        var i = t.player.currentTime;
        is$1.empty(t.cuePoints) || t.cuePoints.forEach(function (n, s) {
          e < n && n < i && (t.manager.discardAdBreak(), t.cuePoints.splice(s, 1));
        });
      }), window.addEventListener("resize", function () {
        t.manager && t.manager.resize(i.offsetWidth, i.offsetHeight, google.ima.ViewMode.NORMAL);
      });
    }
  }, {
    key: "play",
    value: function value() {
      var e = this,
          t = this.player.elements.container;
      this.managerPromise || this.resumeContent(), this.managerPromise.then(function () {
        e.manager.setVolume(e.player.volume), e.elements.displayContainer.initialize();

        try {
          e.initialized || (e.manager.init(t.offsetWidth, t.offsetHeight, google.ima.ViewMode.NORMAL), e.manager.start()), e.initialized = !0;
        } catch (t) {
          e.onAdError(t);
        }
      })["catch"](function () {});
    }
  }, {
    key: "resumeContent",
    value: function value() {
      this.elements.container.style.zIndex = "", this.playing = !1, this.player.media.play();
    }
  }, {
    key: "pauseContent",
    value: function value() {
      this.elements.container.style.zIndex = 3, this.playing = !0, this.player.media.pause();
    }
  }, {
    key: "cancel",
    value: function value() {
      this.initialized && this.resumeContent(), this.trigger("error"), this.loadAds();
    }
  }, {
    key: "loadAds",
    value: function value() {
      var e = this;
      this.managerPromise.then(function () {
        e.manager && e.manager.destroy(), e.managerPromise = new Promise(function (t) {
          e.on("loaded", t), e.player.debug.log(e.manager);
        }), e.requestAds();
      })["catch"](function () {});
    }
  }, {
    key: "trigger",
    value: function value(e) {
      for (var t = this, i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), s = 1; s < i; s++) {
        n[s - 1] = arguments[s];
      }

      var a = this.events[e];
      is$1.array(a) && a.forEach(function (e) {
        is$1["function"](e) && e.apply(t, n);
      });
    }
  }, {
    key: "on",
    value: function value(e, t) {
      return is$1.array(this.events[e]) || (this.events[e] = []), this.events[e].push(t), this;
    }
  }, {
    key: "startSafetyTimer",
    value: function value(e, t) {
      var i = this;
      this.player.debug.log("Safety timer invoked from: ".concat(t)), this.safetyTimer = setTimeout(function () {
        i.cancel(), i.clearSafetyTimer("startSafetyTimer()");
      }, e);
    }
  }, {
    key: "clearSafetyTimer",
    value: function value(e) {
      is$1.nullOrUndefined(this.safetyTimer) || (this.player.debug.log("Safety timer cleared from: ".concat(e)), clearTimeout(this.safetyTimer), this.safetyTimer = null);
    }
  }, {
    key: "enabled",
    get: function get() {
      var e = this.config;
      return this.player.isHTML5 && this.player.isVideo && e.enabled && (!is$1.empty(e.publisherId) || is$1.url(e.tagUrl));
    }
  }, {
    key: "tagUrl",
    get: function get() {
      var e = this.config;
      if (is$1.url(e.tagUrl)) return e.tagUrl;
      var t = {
        AV_PUBLISHERID: "58c25bb0073ef448b1087ad6",
        AV_CHANNELID: "5a0458dc28a06145e4519d21",
        AV_URL: window.location.hostname,
        cb: Date.now(),
        AV_WIDTH: 640,
        AV_HEIGHT: 480,
        AV_CDIM2: this.publisherId
      };
      return "".concat("https://go.aniview.com/api/adserver6/vast/", "?").concat(buildUrlParams(t));
    }
  }]), e;
}(),
    parseVtt = function parseVtt(e) {
  var t = [];
  return e.split(/\r\n\r\n|\n\n|\r\r/).forEach(function (e) {
    var i = {};
    e.split(/\r\n|\n|\r/).forEach(function (e) {
      if (is$1.number(i.startTime)) {
        if (!is$1.empty(e.trim()) && is$1.empty(i.text)) {
          var t = e.trim().split("#xywh="),
              n = _slicedToArray(t, 1);

          if (i.text = n[0], t[1]) {
            var s = _slicedToArray(t[1].split(","), 4);

            i.x = s[0], i.y = s[1], i.w = s[2], i.h = s[3];
          }
        }
      } else {
        var a = e.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/);
        a && (i.startTime = 60 * Number(a[1] || 0) * 60 + 60 * Number(a[2]) + Number(a[3]) + Number("0.".concat(a[4])), i.endTime = 60 * Number(a[6] || 0) * 60 + 60 * Number(a[7]) + Number(a[8]) + Number("0.".concat(a[9])));
      }
    }), i.text && t.push(i);
  }), t;
},
    PreviewThumbnails = function () {
  function e(t) {
    _classCallCheck(this, e), this.player = t, this.thumbnails = [], this.loaded = !1, this.lastMouseMoveTime = Date.now(), this.mouseDown = !1, this.loadedImages = [], this.elements = {
      thumb: {},
      scrubbing: {}
    }, this.load();
  }

  return _createClass(e, [{
    key: "load",
    value: function value() {
      var e = this;
      this.player.elements.display.seekTooltip && (this.player.elements.display.seekTooltip.hidden = this.enabled), this.enabled && this.getThumbnails().then(function () {
        e.enabled && (e.render(), e.determineContainerAutoSizing(), e.loaded = !0);
      });
    }
  }, {
    key: "getThumbnails",
    value: function value() {
      var e = this;
      return new Promise(function (t) {
        var i = e.player.config.previewThumbnails.src;
        if (is$1.empty(i)) throw new Error("Missing previewThumbnails.src config attribute");
        var n = (is$1.string(i) ? [i] : i).map(function (t) {
          return e.getThumbnail(t);
        });
        Promise.all(n).then(function () {
          e.thumbnails.sort(function (e, t) {
            return e.height - t.height;
          }), e.player.debug.log("Preview thumbnails", e.thumbnails), t();
        });
      });
    }
  }, {
    key: "getThumbnail",
    value: function value(e) {
      var t = this;
      return new Promise(function (i) {
        fetch(e).then(function (n) {
          var s = {
            frames: parseVtt(n),
            height: null,
            urlPrefix: ""
          };
          s.frames[0].text.startsWith("/") || s.frames[0].text.startsWith("http://") || s.frames[0].text.startsWith("https://") || (s.urlPrefix = e.substring(0, e.lastIndexOf("/") + 1));
          var a = new Image();
          a.onload = function () {
            s.height = a.naturalHeight, s.width = a.naturalWidth, t.thumbnails.push(s), i();
          }, a.src = s.urlPrefix + s.frames[0].text;
        });
      });
    }
  }, {
    key: "startMove",
    value: function value(e) {
      if (this.loaded && is$1.event(e) && ["touchmove", "mousemove"].includes(e.type) && this.player.media.duration) {
        if ("touchmove" === e.type) this.seekTime = this.player.media.duration * (this.player.elements.inputs.seek.value / 100);else {
          var t = this.player.elements.progress.getBoundingClientRect(),
              i = 100 / t.width * (e.pageX - t.left);
          this.seekTime = this.player.media.duration * (i / 100), this.seekTime < 0 && (this.seekTime = 0), this.seekTime > this.player.media.duration - 1 && (this.seekTime = this.player.media.duration - 1), this.mousePosX = e.pageX, this.elements.thumb.time.innerText = _formatTime(this.seekTime);
        }
        this.showImageAtCurrentTime();
      }
    }
  }, {
    key: "endMove",
    value: function value() {
      this.toggleThumbContainer(!1, !0);
    }
  }, {
    key: "startScrubbing",
    value: function value(e) {
      !1 !== e.button && 0 !== e.button || (this.mouseDown = !0, this.player.media.duration && (this.toggleScrubbingContainer(!0), this.toggleThumbContainer(!1, !0), this.showImageAtCurrentTime()));
    }
  }, {
    key: "endScrubbing",
    value: function value() {
      var e = this;
      this.mouseDown = !1, Math.ceil(this.lastTime) === Math.ceil(this.player.media.currentTime) ? this.toggleScrubbingContainer(!1) : once.call(this.player, this.player.media, "timeupdate", function () {
        e.mouseDown || e.toggleScrubbingContainer(!1);
      });
    }
  }, {
    key: "listeners",
    value: function value() {
      var e = this;
      this.player.on("play", function () {
        e.toggleThumbContainer(!1, !0);
      }), this.player.on("seeked", function () {
        e.toggleThumbContainer(!1);
      }), this.player.on("timeupdate", function () {
        e.lastTime = e.player.media.currentTime;
      });
    }
  }, {
    key: "render",
    value: function value() {
      this.elements.thumb.container = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.thumbContainer
      }), this.elements.thumb.imageContainer = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.imageContainer
      }), this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer);
      var e = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.timeContainer
      });
      this.elements.thumb.time = createElement("span", {}, "00:00"), e.appendChild(this.elements.thumb.time), this.elements.thumb.container.appendChild(e), is$1.element(this.player.elements.progress) && this.player.elements.progress.appendChild(this.elements.thumb.container), this.elements.scrubbing.container = createElement("div", {
        "class": this.player.config.classNames.previewThumbnails.scrubbingContainer
      }), this.player.elements.wrapper.appendChild(this.elements.scrubbing.container);
    }
  }, {
    key: "showImageAtCurrentTime",
    value: function value() {
      var e = this;
      this.mouseDown ? this.setScrubbingContainerSize() : this.setThumbContainerSizeAndPos();
      var t = this.thumbnails[0].frames.findIndex(function (t) {
        return e.seekTime >= t.startTime && e.seekTime <= t.endTime;
      }),
          i = t >= 0,
          n = 0;
      this.mouseDown || this.toggleThumbContainer(i), i && (this.thumbnails.forEach(function (i, s) {
        e.loadedImages.includes(i.frames[t].text) && (n = s);
      }), t !== this.showingThumb && (this.showingThumb = t, this.loadImage(n)));
    }
  }, {
    key: "loadImage",
    value: function value() {
      var e = this,
          t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
          i = this.showingThumb,
          n = this.thumbnails[t],
          s = n.urlPrefix,
          a = n.frames[i],
          r = n.frames[i].text,
          o = s + r;
      if (this.currentImageElement && this.currentImageElement.dataset.filename === r) this.showImage(this.currentImageElement, a, t, i, r, !1), this.currentImageElement.dataset.index = i, this.removeOldImages(this.currentImageElement);else {
        this.loadingImage && this.usingSprites && (this.loadingImage.onload = null);
        var l = new Image();
        l.src = o, l.dataset.index = i, l.dataset.filename = r, this.showingThumbFilename = r, this.player.debug.log("Loading image: ".concat(o)), l.onload = function () {
          return e.showImage(l, a, t, i, r, !0);
        }, this.loadingImage = l, this.removeOldImages(l);
      }
    }
  }, {
    key: "showImage",
    value: function value(e, t, i, n, s) {
      var a = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5];
      this.player.debug.log("Showing thumb: ".concat(s, ". num: ").concat(n, ". qual: ").concat(i, ". newimg: ").concat(a)), this.setImageSizeAndOffset(e, t), a && (this.currentImageContainer.appendChild(e), this.currentImageElement = e, this.loadedImages.includes(s) || this.loadedImages.push(s)), this.preloadNearby(n, !0).then(this.preloadNearby(n, !1)).then(this.getHigherQuality(i, e, t, s));
    }
  }, {
    key: "removeOldImages",
    value: function value(e) {
      var t = this;
      Array.from(this.currentImageContainer.children).forEach(function (i) {
        if ("img" === i.tagName.toLowerCase()) {
          var n = t.usingSprites ? 500 : 1e3;

          if (i.dataset.index !== e.dataset.index && !i.dataset.deleting) {
            i.dataset.deleting = !0;
            var s = t.currentImageContainer;
            setTimeout(function () {
              s.removeChild(i), t.player.debug.log("Removing thumb: ".concat(i.dataset.filename));
            }, n);
          }
        }
      });
    }
  }, {
    key: "preloadNearby",
    value: function value(e) {
      var t = this,
          i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      return new Promise(function (n) {
        setTimeout(function () {
          var s = t.thumbnails[0].frames[e].text;

          if (t.showingThumbFilename === s) {
            var a;
            a = i ? t.thumbnails[0].frames.slice(e) : t.thumbnails[0].frames.slice(0, e).reverse();
            var r = !1;
            a.forEach(function (e) {
              var i = e.text;

              if (i !== s && !t.loadedImages.includes(i)) {
                r = !0, t.player.debug.log("Preloading thumb filename: ".concat(i));
                var a = t.thumbnails[0].urlPrefix + i,
                    o = new Image();
                o.src = a, o.onload = function () {
                  t.player.debug.log("Preloaded thumb filename: ".concat(i)), t.loadedImages.includes(i) || t.loadedImages.push(i), n();
                };
              }
            }), r || n();
          }
        }, 300);
      });
    }
  }, {
    key: "getHigherQuality",
    value: function value(e, t, i, n) {
      var s = this;

      if (e < this.thumbnails.length - 1) {
        var a = t.naturalHeight;
        this.usingSprites && (a = i.h), a < this.thumbContainerHeight && setTimeout(function () {
          s.showingThumbFilename === n && (s.player.debug.log("Showing higher quality thumb for: ".concat(n)), s.loadImage(e + 1));
        }, 300);
      }
    }
  }, {
    key: "toggleThumbContainer",
    value: function value() {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          i = this.player.config.classNames.previewThumbnails.thumbContainerShown;
      this.elements.thumb.container.classList.toggle(i, e), !e && t && (this.showingThumb = null, this.showingThumbFilename = null);
    }
  }, {
    key: "toggleScrubbingContainer",
    value: function value() {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          t = this.player.config.classNames.previewThumbnails.scrubbingContainerShown;
      this.elements.scrubbing.container.classList.toggle(t, e), e || (this.showingThumb = null, this.showingThumbFilename = null);
    }
  }, {
    key: "determineContainerAutoSizing",
    value: function value() {
      this.elements.thumb.imageContainer.clientHeight > 20 && (this.sizeSpecifiedInCSS = !0);
    }
  }, {
    key: "setThumbContainerSizeAndPos",
    value: function value() {
      if (!this.sizeSpecifiedInCSS) {
        var e = Math.floor(this.thumbContainerHeight * this.thumbAspectRatio);
        this.elements.thumb.imageContainer.style.height = "".concat(this.thumbContainerHeight, "px"), this.elements.thumb.imageContainer.style.width = "".concat(e, "px");
      }

      this.setThumbContainerPos();
    }
  }, {
    key: "setThumbContainerPos",
    value: function value() {
      var e = this.player.elements.progress.getBoundingClientRect(),
          t = this.player.elements.container.getBoundingClientRect(),
          i = this.elements.thumb.container,
          n = t.left - e.left + 10,
          s = t.right - e.left - i.clientWidth - 10,
          a = this.mousePosX - e.left - i.clientWidth / 2;
      a < n && (a = n), a > s && (a = s), i.style.left = "".concat(a, "px");
    }
  }, {
    key: "setScrubbingContainerSize",
    value: function value() {
      this.elements.scrubbing.container.style.width = "".concat(this.player.media.clientWidth, "px"), this.elements.scrubbing.container.style.height = "".concat(this.player.media.clientWidth / this.thumbAspectRatio, "px");
    }
  }, {
    key: "setImageSizeAndOffset",
    value: function value(e, t) {
      if (this.usingSprites) {
        var i = this.thumbContainerHeight / t.h;
        e.style.height = "".concat(Math.floor(e.naturalHeight * i), "px"), e.style.width = "".concat(Math.floor(e.naturalWidth * i), "px"), e.style.left = "-".concat(t.x * i, "px"), e.style.top = "-".concat(t.y * i, "px");
      }
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.player.isHTML5 && this.player.isVideo && this.player.config.previewThumbnails.enabled;
    }
  }, {
    key: "currentImageContainer",
    get: function get() {
      return this.mouseDown ? this.elements.scrubbing.container : this.elements.thumb.imageContainer;
    }
  }, {
    key: "usingSprites",
    get: function get() {
      return Object.keys(this.thumbnails[0].frames[0]).includes("w");
    }
  }, {
    key: "thumbAspectRatio",
    get: function get() {
      return this.usingSprites ? this.thumbnails[0].frames[0].w / this.thumbnails[0].frames[0].h : this.thumbnails[0].width / this.thumbnails[0].height;
    }
  }, {
    key: "thumbContainerHeight",
    get: function get() {
      return this.mouseDown ? Math.floor(this.player.media.clientWidth / this.thumbAspectRatio) : Math.floor(this.player.media.clientWidth / this.thumbAspectRatio / 4);
    }
  }, {
    key: "currentImageElement",
    get: function get() {
      return this.mouseDown ? this.currentScrubbingImageElement : this.currentThumbnailImageElement;
    },
    set: function set(e) {
      this.mouseDown ? this.currentScrubbingImageElement = e : this.currentThumbnailImageElement = e;
    }
  }]), e;
}(),
    source = {
  insertElements: function insertElements(e, t) {
    var i = this;
    is$1.string(t) ? insertElement(e, this.media, {
      src: t
    }) : is$1.array(t) && t.forEach(function (t) {
      insertElement(e, i.media, t);
    });
  },
  change: function change(e) {
    var t = this;
    getDeep(e, "sources.length") ? (html5.cancelRequests.call(this), this.destroy.call(this, function () {
      t.options.quality = [], removeElement(t.media), t.media = null, is$1.element(t.elements.container) && t.elements.container.removeAttribute("class");

      var i = e.sources,
          n = e.type,
          s = _slicedToArray(i, 1)[0],
          a = s.provider,
          r = void 0 === a ? providers.html5 : a,
          o = s.src,
          l = "html5" === r ? n : "div",
          c = "html5" === r ? {} : {
        src: o
      };

      Object.assign(t, {
        provider: r,
        type: n,
        supported: support.check(n, r, t.config.playsinline),
        media: createElement(l, c)
      }), t.elements.container.appendChild(t.media), is$1["boolean"](e.autoplay) && (t.config.autoplay = e.autoplay), t.isHTML5 && (t.config.crossorigin && t.media.setAttribute("crossorigin", ""), t.config.autoplay && t.media.setAttribute("autoplay", ""), is$1.empty(e.poster) || (t.poster = e.poster), t.config.loop.active && t.media.setAttribute("loop", ""), t.config.muted && t.media.setAttribute("muted", ""), t.config.playsinline && t.media.setAttribute("playsinline", "")), ui.addStyleHook.call(t), t.isHTML5 && source.insertElements.call(t, "source", i), t.config.title = e.title, media.setup.call(t), t.isHTML5 && Object.keys(e).includes("tracks") && source.insertElements.call(t, "track", e.tracks), (t.isHTML5 || t.isEmbed && !t.supported.ui) && ui.build.call(t), t.isHTML5 && t.media.load(), t.previewThumbnails && t.previewThumbnails.load(), t.fullscreen.update();
    }, !0)) : this.debug.warn("Invalid source format");
  }
};

function clamp() {
  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
      i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 255;
  return Math.min(Math.max(e, t), i);
}

var Plyr = function () {
  function e(t, i) {
    var n = this;
    if (_classCallCheck(this, e), this.timers = {}, this.ready = !1, this.loading = !1, this.failed = !1, this.touch = support.touch, this.media = t, is$1.string(this.media) && (this.media = document.querySelectorAll(this.media)), (window.jQuery && this.media instanceof jQuery || is$1.nodeList(this.media) || is$1.array(this.media)) && (this.media = this.media[0]), this.config = extend({}, defaults$1, e.defaults, i || {}, function () {
      try {
        return JSON.parse(n.media.getAttribute("data-plyr-config"));
      } catch (e) {
        return {};
      }
    }()), this.elements = {
      container: null,
      captions: null,
      buttons: {},
      display: {},
      progress: {},
      inputs: {},
      settings: {
        popup: null,
        menu: null,
        panels: {},
        buttons: {}
      }
    }, this.captions = {
      active: null,
      currentTrack: -1,
      meta: new WeakMap()
    }, this.fullscreen = {
      active: !1
    }, this.options = {
      speed: [],
      quality: []
    }, this.debug = new Console(this.config.debug), this.debug.log("Config", this.config), this.debug.log("Support", support), !is$1.nullOrUndefined(this.media) && is$1.element(this.media)) {
      if (this.media.plyr) this.debug.warn("Target already setup");else if (this.config.enabled) {
        if (support.check().api) {
          var s = this.media.cloneNode(!0);
          s.autoplay = !1, this.elements.original = s;
          var a = this.media.tagName.toLowerCase(),
              r = null,
              o = null;

          switch (a) {
            case "div":
              if (r = this.media.querySelector("iframe"), is$1.element(r)) {
                if (o = parseUrl(r.getAttribute("src")), this.provider = getProviderByUrl(o.toString()), this.elements.container = this.media, this.media = r, this.elements.container.className = "", o.search.length) {
                  var l = ["1", "true"];
                  l.includes(o.searchParams.get("autoplay")) && (this.config.autoplay = !0), l.includes(o.searchParams.get("loop")) && (this.config.loop.active = !0), this.isYouTube ? (this.config.playsinline = l.includes(o.searchParams.get("playsinline")), this.config.youtube.hl = o.searchParams.get("hl")) : this.config.playsinline = !0;
                }
              } else this.provider = this.media.getAttribute(this.config.attributes.embed.provider), this.media.removeAttribute(this.config.attributes.embed.provider);

              if (is$1.empty(this.provider) || !Object.keys(providers).includes(this.provider)) return void this.debug.error("Setup failed: Invalid provider");
              this.type = types.video;
              break;

            case "video":
            case "audio":
              this.type = a, this.provider = providers.html5, this.media.hasAttribute("crossorigin") && (this.config.crossorigin = !0), this.media.hasAttribute("autoplay") && (this.config.autoplay = !0), (this.media.hasAttribute("playsinline") || this.media.hasAttribute("webkit-playsinline")) && (this.config.playsinline = !0), this.media.hasAttribute("muted") && (this.config.muted = !0), this.media.hasAttribute("loop") && (this.config.loop.active = !0);
              break;

            default:
              return void this.debug.error("Setup failed: unsupported type");
          }

          this.supported = support.check(this.type, this.provider, this.config.playsinline), this.supported.api ? (this.eventListeners = [], this.listeners = new Listeners(this), this.storage = new Storage(this), this.media.plyr = this, is$1.element(this.elements.container) || (this.elements.container = createElement("div", {
            tabindex: 0
          }), wrap(this.media, this.elements.container)), ui.addStyleHook.call(this), media.setup.call(this), this.config.debug && on.call(this, this.elements.container, this.config.events.join(" "), function (e) {
            n.debug.log("event: ".concat(e.type));
          }), (this.isHTML5 || this.isEmbed && !this.supported.ui) && ui.build.call(this), this.listeners.container(), this.listeners.global(), this.fullscreen = new Fullscreen(this), this.config.ads.enabled && (this.ads = new Ads(this)), this.isHTML5 && this.config.autoplay && setTimeout(function () {
            return n.play();
          }, 10), this.lastSeekTime = 0, this.config.previewThumbnails.enabled && (this.previewThumbnails = new PreviewThumbnails(this))) : this.debug.error("Setup failed: no support");
        } else this.debug.error("Setup failed: no support");
      } else this.debug.error("Setup failed: disabled by config");
    } else this.debug.error("Setup failed: no suitable element passed");
  }

  return _createClass(e, [{
    key: "play",
    value: function value() {
      var e = this;
      return is$1["function"](this.media.play) ? (this.ads && this.ads.enabled && this.ads.managerPromise.then(function () {
        return e.ads.play();
      })["catch"](function () {
        return e.media.play();
      }), this.media.play()) : null;
    }
  }, {
    key: "pause",
    value: function value() {
      this.playing && is$1["function"](this.media.pause) && this.media.pause();
    }
  }, {
    key: "togglePlay",
    value: function value(e) {
      (is$1["boolean"](e) ? e : !this.playing) ? this.play() : this.pause();
    }
  }, {
    key: "stop",
    value: function value() {
      this.isHTML5 ? (this.pause(), this.restart()) : is$1["function"](this.media.stop) && this.media.stop();
    }
  }, {
    key: "restart",
    value: function value() {
      this.currentTime = 0;
    }
  }, {
    key: "rewind",
    value: function value(e) {
      this.currentTime = this.currentTime - (is$1.number(e) ? e : this.config.seekTime);
    }
  }, {
    key: "forward",
    value: function value(e) {
      this.currentTime = this.currentTime + (is$1.number(e) ? e : this.config.seekTime);
    }
  }, {
    key: "increaseVolume",
    value: function value(e) {
      var t = this.media.muted ? 0 : this.volume;
      this.volume = t + (is$1.number(e) ? e : 0);
    }
  }, {
    key: "decreaseVolume",
    value: function value(e) {
      this.increaseVolume(-e);
    }
  }, {
    key: "toggleCaptions",
    value: function value(e) {
      captions.toggle.call(this, e, !1);
    }
  }, {
    key: "airplay",
    value: function value() {
      support.airplay && this.media.webkitShowPlaybackTargetPicker();
    }
  }, {
    key: "toggleControls",
    value: function value(e) {
      if (this.supported.ui && !this.isAudio) {
        var t = hasClass(this.elements.container, this.config.classNames.hideControls),
            i = void 0 === e ? void 0 : !e,
            n = toggleClass(this.elements.container, this.config.classNames.hideControls, i);

        if (n && this.config.controls.includes("settings") && !is$1.empty(this.config.settings) && controls.toggleMenu.call(this, !1), n !== t) {
          var s = n ? "controlshidden" : "controlsshown";
          triggerEvent.call(this, this.media, s);
        }

        return !n;
      }

      return !1;
    }
  }, {
    key: "on",
    value: function value(e, t) {
      on.call(this, this.elements.container, e, t);
    }
  }, {
    key: "once",
    value: function value(e, t) {
      once.call(this, this.elements.container, e, t);
    }
  }, {
    key: "off",
    value: function value(e, t) {
      off(this.elements.container, e, t);
    }
  }, {
    key: "destroy",
    value: function value(e) {
      var t = this,
          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

      if (this.ready) {
        var n = function n() {
          document.body.style.overflow = "", t.embed = null, i ? (Object.keys(t.elements).length && (removeElement(t.elements.buttons.play), removeElement(t.elements.captions), removeElement(t.elements.controls), removeElement(t.elements.wrapper), t.elements.buttons.play = null, t.elements.captions = null, t.elements.controls = null, t.elements.wrapper = null), is$1["function"](e) && e()) : (unbindListeners.call(t), replaceElement(t.elements.original, t.elements.container), triggerEvent.call(t, t.elements.original, "destroyed", !0), is$1["function"](e) && e.call(t.elements.original), t.ready = !1, setTimeout(function () {
            t.elements = null, t.media = null;
          }, 200));
        };

        this.stop(), clearTimeout(this.timers.loading), clearTimeout(this.timers.controls), clearTimeout(this.timers.resized), this.isHTML5 ? (ui.toggleNativeControls.call(this, !0), n()) : this.isYouTube ? (clearInterval(this.timers.buffering), clearInterval(this.timers.playing), null !== this.embed && is$1["function"](this.embed.destroy) && this.embed.destroy(), n()) : this.isVimeo && (null !== this.embed && this.embed.unload().then(n), setTimeout(n, 200));
      }
    }
  }, {
    key: "supports",
    value: function value(e) {
      return support.mime.call(this, e);
    }
  }, {
    key: "isHTML5",
    get: function get() {
      return this.provider === providers.html5;
    }
  }, {
    key: "isEmbed",
    get: function get() {
      return this.isYouTube || this.isVimeo;
    }
  }, {
    key: "isYouTube",
    get: function get() {
      return this.provider === providers.youtube;
    }
  }, {
    key: "isVimeo",
    get: function get() {
      return this.provider === providers.vimeo;
    }
  }, {
    key: "isVideo",
    get: function get() {
      return this.type === types.video;
    }
  }, {
    key: "isAudio",
    get: function get() {
      return this.type === types.audio;
    }
  }, {
    key: "playing",
    get: function get() {
      return Boolean(this.ready && !this.paused && !this.ended);
    }
  }, {
    key: "paused",
    get: function get() {
      return Boolean(this.media.paused);
    }
  }, {
    key: "stopped",
    get: function get() {
      return Boolean(this.paused && 0 === this.currentTime);
    }
  }, {
    key: "ended",
    get: function get() {
      return Boolean(this.media.ended);
    }
  }, {
    key: "currentTime",
    set: function set(e) {
      if (this.duration) {
        var t = is$1.number(e) && e > 0;
        this.media.currentTime = t ? Math.min(e, this.duration) : 0, this.debug.log("Seeking to ".concat(this.currentTime, " seconds"));
      }
    },
    get: function get() {
      return Number(this.media.currentTime);
    }
  }, {
    key: "buffered",
    get: function get() {
      var e = this.media.buffered;
      return is$1.number(e) ? e : e && e.length && this.duration > 0 ? e.end(0) / this.duration : 0;
    }
  }, {
    key: "seeking",
    get: function get() {
      return Boolean(this.media.seeking);
    }
  }, {
    key: "duration",
    get: function get() {
      var e = parseFloat(this.config.duration),
          t = (this.media || {}).duration,
          i = is$1.number(t) && t !== 1 / 0 ? t : 0;
      return e || i;
    }
  }, {
    key: "volume",
    set: function set(e) {
      var t = e;
      is$1.string(t) && (t = Number(t)), is$1.number(t) || (t = this.storage.get("volume")), is$1.number(t) || (t = this.config.volume), t > 1 && (t = 1), t < 0 && (t = 0), this.config.volume = t, this.media.volume = t, !is$1.empty(e) && this.muted && t > 0 && (this.muted = !1);
    },
    get: function get() {
      return Number(this.media.volume);
    }
  }, {
    key: "muted",
    set: function set(e) {
      var t = e;
      is$1["boolean"](t) || (t = this.storage.get("muted")), is$1["boolean"](t) || (t = this.config.muted), this.config.muted = t, this.media.muted = t;
    },
    get: function get() {
      return Boolean(this.media.muted);
    }
  }, {
    key: "hasAudio",
    get: function get() {
      return !this.isHTML5 || !!this.isAudio || Boolean(this.media.mozHasAudio) || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);
    }
  }, {
    key: "speed",
    set: function set(e) {
      var t = this,
          i = null;
      is$1.number(e) && (i = e), is$1.number(i) || (i = this.storage.get("speed")), is$1.number(i) || (i = this.config.speed.selected);
      var n = this.minimumSpeed,
          s = this.maximumSpeed;
      i = clamp(i, n, s), this.config.speed.selected = i, setTimeout(function () {
        t.media.playbackRate = i;
      }, 0);
    },
    get: function get() {
      return Number(this.media.playbackRate);
    }
  }, {
    key: "minimumSpeed",
    get: function get() {
      return this.isYouTube ? Math.min.apply(Math, _toConsumableArray(this.options.speed)) : this.isVimeo ? .5 : .0625;
    }
  }, {
    key: "maximumSpeed",
    get: function get() {
      return this.isYouTube ? Math.max.apply(Math, _toConsumableArray(this.options.speed)) : this.isVimeo ? 2 : 16;
    }
  }, {
    key: "quality",
    set: function set(e) {
      var t = this.config.quality,
          i = this.options.quality;

      if (i.length) {
        var n = [!is$1.empty(e) && Number(e), this.storage.get("quality"), t.selected, t["default"]].find(is$1.number),
            s = !0;

        if (!i.includes(n)) {
          var a = closest(i, n);
          this.debug.warn("Unsupported quality option: ".concat(n, ", using ").concat(a, " instead")), n = a, s = !1;
        }

        t.selected = n, this.media.quality = n, s && this.storage.set({
          quality: n
        });
      }
    },
    get: function get() {
      return this.media.quality;
    }
  }, {
    key: "loop",
    set: function set(e) {
      var t = is$1["boolean"](e) ? e : this.config.loop.active;
      this.config.loop.active = t, this.media.loop = t;
    },
    get: function get() {
      return Boolean(this.media.loop);
    }
  }, {
    key: "source",
    set: function set(e) {
      source.change.call(this, e);
    },
    get: function get() {
      return this.media.currentSrc;
    }
  }, {
    key: "download",
    get: function get() {
      var e = this.config.urls.download;
      return is$1.url(e) ? e : this.source;
    },
    set: function set(e) {
      is$1.url(e) && (this.config.urls.download = e, controls.setDownloadUrl.call(this));
    }
  }, {
    key: "poster",
    set: function set(e) {
      this.isVideo ? ui.setPoster.call(this, e, !1)["catch"](function () {}) : this.debug.warn("Poster can only be set for video");
    },
    get: function get() {
      return this.isVideo ? this.media.getAttribute("poster") : null;
    }
  }, {
    key: "ratio",
    get: function get() {
      if (!this.isVideo) return null;
      var e = reduceAspectRatio(getAspectRatio.call(this));
      return is$1.array(e) ? e.join(":") : e;
    },
    set: function set(e) {
      this.isVideo ? is$1.string(e) && validateRatio(e) ? (this.config.ratio = e, setAspectRatio.call(this)) : this.debug.error("Invalid aspect ratio specified (".concat(e, ")")) : this.debug.warn("Aspect ratio can only be set for video");
    }
  }, {
    key: "autoplay",
    set: function set(e) {
      var t = is$1["boolean"](e) ? e : this.config.autoplay;
      this.config.autoplay = t;
    },
    get: function get() {
      return Boolean(this.config.autoplay);
    }
  }, {
    key: "currentTrack",
    set: function set(e) {
      captions.set.call(this, e, !1);
    },
    get: function get() {
      var e = this.captions,
          t = e.toggled,
          i = e.currentTrack;
      return t ? i : -1;
    }
  }, {
    key: "language",
    set: function set(e) {
      captions.setLanguage.call(this, e, !1);
    },
    get: function get() {
      return (captions.getCurrentTrack.call(this) || {}).language;
    }
  }, {
    key: "pip",
    set: function set(e) {
      if (support.pip) {
        var t = is$1["boolean"](e) ? e : !this.pip;
        is$1["function"](this.media.webkitSetPresentationMode) && this.media.webkitSetPresentationMode(t ? pip.active : pip.inactive), is$1["function"](this.media.requestPictureInPicture) && (!this.pip && t ? this.media.requestPictureInPicture() : this.pip && !t && document.exitPictureInPicture());
      }
    },
    get: function get() {
      return support.pip ? is$1.empty(this.media.webkitPresentationMode) ? this.media === document.pictureInPictureElement : this.media.webkitPresentationMode === pip.active : null;
    }
  }], [{
    key: "supported",
    value: function value(e, t, i) {
      return support.check(e, t, i);
    }
  }, {
    key: "loadSprite",
    value: function value(e, t) {
      return loadSprite(e, t);
    }
  }, {
    key: "setup",
    value: function value(t) {
      var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          n = null;
      return is$1.string(t) ? n = Array.from(document.querySelectorAll(t)) : is$1.nodeList(t) ? n = Array.from(t) : is$1.array(t) && (n = t.filter(is$1.element)), is$1.empty(n) ? null : n.map(function (t) {
        return new e(t, i);
      });
    }
  }]), e;
}();

Plyr.defaults = cloneDeep(defaults$1);
var _default = Plyr;
exports["default"] = _default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
