(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

NKC.modules.SelectSticker = function () {
  var self = this;
  self.dom = $("#moduleSelectSticker");
  self.app = new Vue({
    el: "#moduleSelectStickerApp",
    data: {
      type: "own",
      pageNumber: "",
      perpage: 20,
      sharePerpage: 24,
      emoji: [],
      share: false,
      localStickers: [],
      stickers: [],
      paging: {}
    },
    mounted: function mounted() {},
    methods: {
      getUrl: NKC.methods.tools.getUrl,
      initModule: function initModule() {
        var height = "43.5rem";
        self.dom.css({
          height: height
        });
        self.dom.draggable({
          scroll: false,
          handle: ".module-ss-title",
          drag: function drag(event, ui) {
            if (ui.position.top < 0) ui.position.top = 0;
            var height = $(window).height();
            if (ui.position.top > height - 30) ui.position.top = height - 30;
            var width = self.dom.width();
            if (ui.position.left < 100 - width) ui.position.left = 100 - width;
            var winWidth = $(window).width();
            if (ui.position.left > winWidth - 100) ui.position.left = winWidth - 100;
          }
        });
      },
      resetDomPosition: function resetDomPosition() {
        var dom = self.dom;
        var width = $(window).width();
        var height = $(window).height();

        if (width < 700) {
          // 小屏幕
          dom.css({
            "width": width * 0.8,
            "top": 0,
            "right": 0
          });
        } else {
          // 宽屏
          dom.css("left", (width - dom.width()) * 0.5 - 40);
        }
      },
      selectType: function selectType(type) {
        this.type = type;

        if (["own", "share"].includes(type)) {
          this.getStickers();
        }
      },
      changePage: function changePage(type) {
        var paging = this.paging;
        if (paging.buttonValue.length <= 1) return;
        if (type === "last" && paging.page === 0) return;
        if (type === "next" && paging.page + 1 === paging.pageCount) return;
        var count = type === "last" ? -1 : 1;
        this.getStickers(paging.page + count);
      },
      getStickers: function getStickers() {
        var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var type = this.type;
        if (!["own", "share"].includes(type)) return;
        var url = "/sticker?page=".concat(page, "&c=own&reviewed=true&perpage=").concat(this.perpage);

        if (type === "share") {
          url = "/stickers?page=".concat(page, "&perpage=").concat(this.sharePerpage);
        }

        console.log(url);
        nkcAPI(url, "GET").then(function (data) {
          self.app.stickers = data.stickers;
          self.app.paging = data.paging;

          if (data.emoji) {
            self.app.emoji = data.emoji;
          }
        })["catch"](sweetError);
      },
      fastSelectPage: function fastSelectPage() {
        var pageNumber = this.pageNumber - 1;
        var paging = this.paging;
        if (!paging || !paging.buttonValue.length) return;
        var lastNumber = paging.buttonValue[paging.buttonValue.length - 1].num;
        if (pageNumber < 0 || lastNumber < pageNumber) return sweetInfo("输入的页数超出范围");
        this.getStickers(pageNumber);
      },
      selectSticker: function selectSticker(sticker) {
        self.callback({
          type: "sticker",
          data: sticker
        });
      },
      selectEmoji: function selectEmoji(emojiCode, index) {
        self.callback({
          type: "emoji",
          data: emojiCode
        });
      },
      addLocalFile: function addLocalFile(file) {
        this.fileToSticker(file).then(function (sticker) {
          self.app.localStickers.push(sticker);
          self.app.uploadLocalSticker(sticker);
        });
      },
      fileToSticker: function fileToSticker(file) {
        return new Promise(function (resolve, reject) {
          var sticker = {
            file: file
          };
          sticker.status = "unUploaded";
          sticker.progress = 0;
          NKC.methods.fileToUrl(file).then(function (base64) {
            sticker.url = base64;
            resolve(sticker);
          })["catch"](reject);
        });
      },
      selectedLocalFile: function selectedLocalFile() {
        var input = $("#moduleSelectStickerInput");
        var files = input[0].files;

        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          self.app.addLocalFile(file);
        }
      },
      selectLocalFile: function selectLocalFile() {
        $("#moduleSelectStickerInput").click();
      },
      uploadLocalSticker: function uploadLocalSticker(sticker) {
        Promise.resolve().then(function () {
          sticker.status = "uploading";
          var formData = new FormData();
          formData.append("file", sticker.file);
          formData.append("type", "sticker");
          formData.append("fileName", sticker.file.name);

          if (self.app.share) {
            formData.append("share", "true");
          }

          return nkcUploadFile("/r", "POST", formData, function (e, progress) {
            sticker.progress = progress;
          });
        }).then(function () {
          sticker.status = "uploaded";
          self.app.localStickers.splice(self.app.localStickers.indexOf(sticker), 1);
          if (!self.app.localStickers.length) self.app.selectType("own");
        })["catch"](function (data) {
          screenTopWarning(data.error || data);
          sticker.error = data.error || data;
          sticker.status = "unUploaded";
        });
      },
      restartUpload: function restartUpload(s) {
        this.uploadLocalSticker(s);
      },
      open: function open(callback, options) {
        self.callback = callback;
        this.resetDomPosition();
        this.initModule();
        self.dom.show();
        this.getStickers();
      },
      close: function close() {
        self.dom.hide();
      }
    }
  });
  self.open = self.app.open;
  self.close = self.app.close;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
