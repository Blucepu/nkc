(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

NKC.modules.SelectSticker = function () {
  var self = this;
  self.dom = $("#moduleSelectSticker");
  self.app = new Vue({
    el: "#moduleSelectStickerApp",
    data: {
      type: "own",
      pageNumber: "",
      perpage: 20,
      emoji: [],
      share: true,
      localStickers: [],
      stickers: [],
      paging: {}
    },
    mounted: function mounted() {},
    methods: {
      getUrl: NKC.methods.tools.getUrl,
      initModule: function initModule() {
        var height = "43.5rem";
        self.dom.css({
          height: height
        });
        self.dom.draggable({
          scroll: false,
          handle: ".module-ss-title",
          drag: function drag(event, ui) {
            if (ui.position.top < 0) ui.position.top = 0;
            var height = $(window).height();
            if (ui.position.top > height - 30) ui.position.top = height - 30;
            var width = self.dom.width();
            if (ui.position.left < 100 - width) ui.position.left = 100 - width;
            var winWidth = $(window).width();
            if (ui.position.left > winWidth - 100) ui.position.left = winWidth - 100;
          }
        });
      },
      resetDomPosition: function resetDomPosition() {
        var dom = self.dom;
        var width = $(window).width();
        var height = $(window).height();

        if (width < 700) {
          // 小屏幕
          dom.css({
            "width": width * 0.8,
            "top": 0,
            "right": 0
          });
        } else {
          // 宽屏
          dom.css("left", (width - dom.width()) * 0.5);
        }
      },
      selectType: function selectType(type) {
        this.type = type;

        if (type === "upload") {// if(!this.localStickers.length) this.selectLocalFile();
        } else {
          this.getStickers();
        }
      },
      changePage: function changePage(type) {
        var paging = this.paging;
        if (paging.buttonValue.length <= 1) return;
        if (type === "last" && paging.page === 0) return;
        if (type === "next" && paging.page + 1 === paging.pageCount) return;
        var count = type === "last" ? -1 : 1;
        this.getStickers(paging.page + count);
      },
      getStickers: function getStickers() {
        var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var type = this.type;
        if (type !== "own") return;
        var url = "/sticker?page=".concat(page, "&c=own&reviewed=true&perpage=").concat(this.perpage);
        nkcAPI(url, "GET").then(function (data) {
          self.app.stickers = data.ownStickers;
          self.app.paging = data.paging;
          self.app.emoji = data.emoji;
        })["catch"](sweetError);
      },
      fastSelectPage: function fastSelectPage() {
        var pageNumber = this.pageNumber - 1;
        var paging = this.paging;
        if (!paging || !paging.buttonValue.length) return;
        var lastNumber = paging.buttonValue[paging.buttonValue.length - 1].num;
        if (pageNumber < 0 || lastNumber < pageNumber) return sweetInfo("输入的页数超出范围");
        this.getStickers(pageNumber);
      },
      selectSticker: function selectSticker(sticker) {
        self.callback({
          type: "sticker",
          data: sticker
        });
      },
      selectEmoji: function selectEmoji(emoji) {
        self.callback({
          type: "emoji",
          data: emoji
        });
      },
      addLocalFile: function addLocalFile(file) {
        this.fileToSticker(file).then(function (sticker) {
          self.app.localStickers.push(sticker);
          self.app.uploadLocalSticker(sticker);
        });
      },
      fileToSticker: function fileToSticker(file) {
        return new Promise(function (resolve, reject) {
          var sticker = {
            file: file
          };
          sticker.status = "unUploaded";
          sticker.progress = 0;
          NKC.methods.fileToUrl(file).then(function (base64) {
            sticker.url = base64;
            resolve(sticker);
          })["catch"](reject);
        });
      },
      selectedLocalFile: function selectedLocalFile() {
        var input = $("#moduleSelectStickerInput");
        var files = input[0].files;

        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          self.app.addLocalFile(file);
        }
      },
      selectLocalFile: function selectLocalFile() {
        $("#moduleSelectStickerInput").click();
      },
      uploadLocalSticker: function uploadLocalSticker(sticker) {
        Promise.resolve().then(function () {
          sticker.status = "uploading";
          var formData = new FormData();
          formData.append("file", sticker.file);
          formData.append("type", "sticker");
          formData.append("fileName", sticker.file.name);

          if (self.app.share) {
            formData.append("share", "true");
          }

          return nkcUploadFile("/r", "POST", formData, function (e, progress) {
            sticker.progress = progress;
          });
        }).then(function () {
          sticker.status = "uploaded";
          self.app.localStickers.splice(self.app.localStickers.indexOf(sticker), 1);
          if (!self.app.localStickers.length) self.app.selectType("own");
        })["catch"](function (data) {
          screenTopWarning(data.error || data);
          sticker.error = data.error || data;
          sticker.status = "unUploaded";
        });
      },
      restartUpload: function restartUpload(s) {
        this.uploadLocalSticker(s);
      },
      open: function open(callback, options) {
        self.callback = callback;
        this.resetDomPosition();
        this.initModule();
        self.dom.show();
        this.getStickers();
      },
      close: function close() {
        self.dom.hide();
      }
    }
  });
  self.open = self.app.open;
  self.close = self.app.close;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9fYnJvd3Nlci1wYWNrQDYuMS4wQGJyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInBhZ2VzL3B1YmxpY01vZHVsZXMvc3RpY2tlci9zZWxlY3RTdGlja2VyLm1qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsR0FBRyxDQUFDLE9BQUosQ0FBWSxhQUFaLEdBQTRCLFlBQVc7QUFDckMsTUFBSSxJQUFJLEdBQUcsSUFBWDtBQUNBLEVBQUEsSUFBSSxDQUFDLEdBQUwsR0FBVyxDQUFDLENBQUMsc0JBQUQsQ0FBWjtBQUNBLEVBQUEsSUFBSSxDQUFDLEdBQUwsR0FBVyxJQUFJLEdBQUosQ0FBUTtBQUNqQixJQUFBLEVBQUUsRUFBRSx5QkFEYTtBQUVqQixJQUFBLElBQUksRUFBRTtBQUNKLE1BQUEsSUFBSSxFQUFFLEtBREY7QUFFSixNQUFBLFVBQVUsRUFBRSxFQUZSO0FBR0osTUFBQSxPQUFPLEVBQUUsRUFITDtBQUlKLE1BQUEsS0FBSyxFQUFFLEVBSkg7QUFLSixNQUFBLEtBQUssRUFBRSxJQUxIO0FBTUosTUFBQSxhQUFhLEVBQUUsRUFOWDtBQU9KLE1BQUEsUUFBUSxFQUFFLEVBUE47QUFRSixNQUFBLE1BQU0sRUFBRTtBQVJKLEtBRlc7QUFZakIsSUFBQSxPQUFPLEVBQUUsbUJBQVksQ0FFcEIsQ0FkZ0I7QUFlakIsSUFBQSxPQUFPLEVBQUU7QUFDUCxNQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBSixDQUFZLEtBQVosQ0FBa0IsTUFEbkI7QUFFUCxNQUFBLFVBRk8sd0JBRU07QUFDWCxZQUFJLE1BQU0sR0FBRyxTQUFiO0FBQ0EsUUFBQSxJQUFJLENBQUMsR0FBTCxDQUFTLEdBQVQsQ0FBYTtBQUNYLFVBQUEsTUFBTSxFQUFFO0FBREcsU0FBYjtBQUdBLFFBQUEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxTQUFULENBQW1CO0FBQ2pCLFVBQUEsTUFBTSxFQUFFLEtBRFM7QUFFakIsVUFBQSxNQUFNLEVBQUUsa0JBRlM7QUFHakIsVUFBQSxJQUFJLEVBQUUsY0FBUyxLQUFULEVBQWdCLEVBQWhCLEVBQW9CO0FBQ3hCLGdCQUFHLEVBQUUsQ0FBQyxRQUFILENBQVksR0FBWixHQUFrQixDQUFyQixFQUF3QixFQUFFLENBQUMsUUFBSCxDQUFZLEdBQVosR0FBa0IsQ0FBbEI7QUFDeEIsZ0JBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxNQUFWLEVBQWI7QUFDQSxnQkFBRyxFQUFFLENBQUMsUUFBSCxDQUFZLEdBQVosR0FBa0IsTUFBTSxHQUFHLEVBQTlCLEVBQWtDLEVBQUUsQ0FBQyxRQUFILENBQVksR0FBWixHQUFrQixNQUFNLEdBQUcsRUFBM0I7QUFDbEMsZ0JBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBVCxFQUFaO0FBQ0EsZ0JBQUcsRUFBRSxDQUFDLFFBQUgsQ0FBWSxJQUFaLEdBQW1CLE1BQU0sS0FBNUIsRUFBbUMsRUFBRSxDQUFDLFFBQUgsQ0FBWSxJQUFaLEdBQW1CLE1BQU0sS0FBekI7QUFDbkMsZ0JBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxLQUFWLEVBQWY7QUFDQSxnQkFBRyxFQUFFLENBQUMsUUFBSCxDQUFZLElBQVosR0FBbUIsUUFBUSxHQUFHLEdBQWpDLEVBQXNDLEVBQUUsQ0FBQyxRQUFILENBQVksSUFBWixHQUFtQixRQUFRLEdBQUcsR0FBOUI7QUFDdkM7QUFYZ0IsU0FBbkI7QUFhRCxPQXBCTTtBQXFCUCxNQUFBLGdCQUFnQixFQUFFLDRCQUFXO0FBQzNCLFlBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFmO0FBQ0EsWUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVLEtBQVYsRUFBWjtBQUNBLFlBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxNQUFWLEVBQWI7O0FBQ0EsWUFBRyxLQUFLLEdBQUcsR0FBWCxFQUFnQjtBQUNkO0FBQ0EsVUFBQSxHQUFHLENBQUMsR0FBSixDQUFRO0FBQ04scUJBQVMsS0FBSyxHQUFHLEdBRFg7QUFFTixtQkFBTyxDQUZEO0FBR04scUJBQVM7QUFISCxXQUFSO0FBS0QsU0FQRCxNQU9PO0FBQ0w7QUFDQSxVQUFBLEdBQUcsQ0FBQyxHQUFKLENBQVEsTUFBUixFQUFnQixDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSixFQUFULElBQXNCLEdBQXRDO0FBQ0Q7QUFDRixPQXBDTTtBQXFDUCxNQUFBLFVBckNPLHNCQXFDSSxJQXJDSixFQXFDVTtBQUNmLGFBQUssSUFBTCxHQUFZLElBQVo7O0FBQ0EsWUFBRyxJQUFJLEtBQUssUUFBWixFQUFzQixDQUNwQjtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUssV0FBTDtBQUNEO0FBQ0YsT0E1Q007QUE2Q1AsTUFBQSxVQTdDTyxzQkE2Q0ksSUE3Q0osRUE2Q1U7QUFDZixZQUFNLE1BQU0sR0FBRyxLQUFLLE1BQXBCO0FBQ0EsWUFBRyxNQUFNLENBQUMsV0FBUCxDQUFtQixNQUFuQixJQUE2QixDQUFoQyxFQUFtQztBQUNuQyxZQUFHLElBQUksS0FBSyxNQUFULElBQW1CLE1BQU0sQ0FBQyxJQUFQLEtBQWdCLENBQXRDLEVBQXlDO0FBQ3pDLFlBQUcsSUFBSSxLQUFLLE1BQVQsSUFBbUIsTUFBTSxDQUFDLElBQVAsR0FBYyxDQUFkLEtBQW9CLE1BQU0sQ0FBQyxTQUFqRCxFQUE0RDtBQUM1RCxZQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssTUFBVCxHQUFpQixDQUFDLENBQWxCLEdBQXFCLENBQW5DO0FBQ0EsYUFBSyxXQUFMLENBQWlCLE1BQU0sQ0FBQyxJQUFQLEdBQWMsS0FBL0I7QUFDRCxPQXBETTtBQXFEUCxNQUFBLFdBckRPLHlCQXFEZTtBQUFBLFlBQVYsSUFBVSx1RUFBSCxDQUFHO0FBQUEsWUFDYixJQURhLEdBQ0wsSUFESyxDQUNiLElBRGE7QUFFcEIsWUFBRyxJQUFJLEtBQUssS0FBWixFQUFtQjtBQUNuQixZQUFJLEdBQUcsMkJBQW9CLElBQXBCLDBDQUF3RCxLQUFLLE9BQTdELENBQVA7QUFDQSxRQUFBLE1BQU0sQ0FBQyxHQUFELEVBQU0sS0FBTixDQUFOLENBQ0csSUFESCxDQUNRLFVBQUEsSUFBSSxFQUFJO0FBQ1osVUFBQSxJQUFJLENBQUMsR0FBTCxDQUFTLFFBQVQsR0FBb0IsSUFBSSxDQUFDLFdBQXpCO0FBQ0EsVUFBQSxJQUFJLENBQUMsR0FBTCxDQUFTLE1BQVQsR0FBa0IsSUFBSSxDQUFDLE1BQXZCO0FBQ0EsVUFBQSxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsR0FBaUIsSUFBSSxDQUFDLEtBQXRCO0FBQ0QsU0FMSCxXQU1TLFVBTlQ7QUFPRCxPQWhFTTtBQWlFUCxNQUFBLGNBakVPLDRCQWlFVTtBQUNmLFlBQU0sVUFBVSxHQUFHLEtBQUssVUFBTCxHQUFrQixDQUFyQztBQUNBLFlBQU0sTUFBTSxHQUFHLEtBQUssTUFBcEI7QUFDQSxZQUFHLENBQUMsTUFBRCxJQUFXLENBQUMsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsTUFBbEMsRUFBMEM7QUFDMUMsWUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsTUFBbkIsR0FBNEIsQ0FBL0MsRUFBa0QsR0FBckU7QUFDQSxZQUFHLFVBQVUsR0FBRyxDQUFiLElBQWtCLFVBQVUsR0FBRyxVQUFsQyxFQUE4QyxPQUFPLFNBQVMsQ0FBQyxXQUFELENBQWhCO0FBQzlDLGFBQUssV0FBTCxDQUFpQixVQUFqQjtBQUNELE9BeEVNO0FBeUVQLE1BQUEsYUF6RU8seUJBeUVPLE9BekVQLEVBeUVnQjtBQUNyQixRQUFBLElBQUksQ0FBQyxRQUFMLENBQWM7QUFDWixVQUFBLElBQUksRUFBRSxTQURNO0FBRVosVUFBQSxJQUFJLEVBQUU7QUFGTSxTQUFkO0FBSUQsT0E5RU07QUErRVAsTUFBQSxXQS9FTyx1QkErRUssS0EvRUwsRUErRVk7QUFDakIsUUFBQSxJQUFJLENBQUMsUUFBTCxDQUFjO0FBQ1osVUFBQSxJQUFJLEVBQUUsT0FETTtBQUVaLFVBQUEsSUFBSSxFQUFFO0FBRk0sU0FBZDtBQUlELE9BcEZNO0FBcUZQLE1BQUEsWUFyRk8sd0JBcUZNLElBckZOLEVBcUZZO0FBQ2pCLGFBQUssYUFBTCxDQUFtQixJQUFuQixFQUNHLElBREgsQ0FDUSxVQUFBLE9BQU8sRUFBSTtBQUNmLFVBQUEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxhQUFULENBQXVCLElBQXZCLENBQTRCLE9BQTVCO0FBQ0EsVUFBQSxJQUFJLENBQUMsR0FBTCxDQUFTLGtCQUFULENBQTRCLE9BQTVCO0FBQ0QsU0FKSDtBQUtELE9BM0ZNO0FBNEZQLE1BQUEsYUE1Rk8seUJBNEZPLElBNUZQLEVBNEZhO0FBQ2xCLGVBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxjQUFNLE9BQU8sR0FBRztBQUFDLFlBQUEsSUFBSSxFQUFKO0FBQUQsV0FBaEI7QUFDQSxVQUFBLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLFlBQWpCO0FBQ0EsVUFBQSxPQUFPLENBQUMsUUFBUixHQUFtQixDQUFuQjtBQUNBLFVBQUEsR0FBRyxDQUFDLE9BQUosQ0FBWSxTQUFaLENBQXNCLElBQXRCLEVBQ0csSUFESCxDQUNRLFVBQUEsTUFBTSxFQUFJO0FBQ2QsWUFBQSxPQUFPLENBQUMsR0FBUixHQUFjLE1BQWQ7QUFDQSxZQUFBLE9BQU8sQ0FBQyxPQUFELENBQVA7QUFDRCxXQUpILFdBS1MsTUFMVDtBQU1ELFNBVk0sQ0FBUDtBQVlELE9BekdNO0FBMEdQLE1BQUEsaUJBMUdPLCtCQTBHYTtBQUNsQixZQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsMkJBQUQsQ0FBZjtBQUNBLFlBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBUyxLQUF2Qjs7QUFDQSxhQUFJLElBQUksQ0FBQyxHQUFHLENBQVosRUFBZSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQXpCLEVBQWlDLENBQUMsRUFBbEMsRUFBdUM7QUFDckMsY0FBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUQsQ0FBbEI7QUFDQSxVQUFBLElBQUksQ0FBQyxHQUFMLENBQVMsWUFBVCxDQUFzQixJQUF0QjtBQUNEO0FBQ0YsT0FqSE07QUFrSFAsTUFBQSxlQWxITyw2QkFrSFc7QUFDaEIsUUFBQSxDQUFDLENBQUMsMkJBQUQsQ0FBRCxDQUErQixLQUEvQjtBQUNELE9BcEhNO0FBcUhQLE1BQUEsa0JBckhPLDhCQXFIWSxPQXJIWixFQXFIcUI7QUFDMUIsUUFBQSxPQUFPLENBQUMsT0FBUixHQUNHLElBREgsQ0FDUSxZQUFNO0FBQ1YsVUFBQSxPQUFPLENBQUMsTUFBUixHQUFpQixXQUFqQjtBQUNBLGNBQU0sUUFBUSxHQUFHLElBQUksUUFBSixFQUFqQjtBQUNBLFVBQUEsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsTUFBaEIsRUFBd0IsT0FBTyxDQUFDLElBQWhDO0FBQ0EsVUFBQSxRQUFRLENBQUMsTUFBVCxDQUFnQixNQUFoQixFQUF3QixTQUF4QjtBQUNBLFVBQUEsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsVUFBaEIsRUFBNEIsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUF6Qzs7QUFDQSxjQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBWixFQUFtQjtBQUNqQixZQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLE9BQWhCLEVBQXlCLE1BQXpCO0FBQ0Q7O0FBQ0QsaUJBQU8sYUFBYSxDQUFDLElBQUQsRUFBTyxNQUFQLEVBQWUsUUFBZixFQUF5QixVQUFTLENBQVQsRUFBWSxRQUFaLEVBQXNCO0FBQ2pFLFlBQUEsT0FBTyxDQUFDLFFBQVIsR0FBbUIsUUFBbkI7QUFDRCxXQUZtQixDQUFwQjtBQUdELFNBYkgsRUFjRyxJQWRILENBY1EsWUFBTTtBQUNWLFVBQUEsT0FBTyxDQUFDLE1BQVIsR0FBaUIsVUFBakI7QUFDQSxVQUFBLElBQUksQ0FBQyxHQUFMLENBQVMsYUFBVCxDQUF1QixNQUF2QixDQUE4QixJQUFJLENBQUMsR0FBTCxDQUFTLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBK0IsT0FBL0IsQ0FBOUIsRUFBdUUsQ0FBdkU7QUFDQSxjQUFHLENBQUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxhQUFULENBQXVCLE1BQTNCLEVBQW1DLElBQUksQ0FBQyxHQUFMLENBQVMsVUFBVCxDQUFvQixLQUFwQjtBQUNwQyxTQWxCSCxXQW1CUyxVQUFDLElBQUQsRUFBVTtBQUNmLFVBQUEsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUwsSUFBYyxJQUFmLENBQWhCO0FBQ0EsVUFBQSxPQUFPLENBQUMsS0FBUixHQUFnQixJQUFJLENBQUMsS0FBTCxJQUFjLElBQTlCO0FBQ0EsVUFBQSxPQUFPLENBQUMsTUFBUixHQUFpQixZQUFqQjtBQUNELFNBdkJIO0FBd0JELE9BOUlNO0FBK0lQLE1BQUEsYUEvSU8seUJBK0lPLENBL0lQLEVBK0lVO0FBQ2YsYUFBSyxrQkFBTCxDQUF3QixDQUF4QjtBQUNELE9BakpNO0FBa0pQLE1BQUEsSUFsSk8sZ0JBa0pGLFFBbEpFLEVBa0pRLE9BbEpSLEVBa0ppQjtBQUN0QixRQUFBLElBQUksQ0FBQyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsYUFBSyxnQkFBTDtBQUNBLGFBQUssVUFBTDtBQUNBLFFBQUEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFUO0FBQ0EsYUFBSyxXQUFMO0FBQ0QsT0F4Sk07QUF5SlAsTUFBQSxLQXpKTyxtQkF5SkM7QUFDTixRQUFBLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBVDtBQUNEO0FBM0pNO0FBZlEsR0FBUixDQUFYO0FBNktBLEVBQUEsSUFBSSxDQUFDLElBQUwsR0FBWSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQXJCO0FBQ0EsRUFBQSxJQUFJLENBQUMsS0FBTCxHQUFhLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBdEI7QUFDRCxDQWxMRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIk5LQy5tb2R1bGVzLlNlbGVjdFN0aWNrZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgc2VsZi5kb20gPSAkKFwiI21vZHVsZVNlbGVjdFN0aWNrZXJcIik7XHJcbiAgc2VsZi5hcHAgPSBuZXcgVnVlKHtcclxuICAgIGVsOiBcIiNtb2R1bGVTZWxlY3RTdGlja2VyQXBwXCIsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIHR5cGU6IFwib3duXCIsXHJcbiAgICAgIHBhZ2VOdW1iZXI6IFwiXCIsXHJcbiAgICAgIHBlcnBhZ2U6IDIwLFxyXG4gICAgICBlbW9qaTogW10sXHJcbiAgICAgIHNoYXJlOiB0cnVlLFxyXG4gICAgICBsb2NhbFN0aWNrZXJzOiBbXSxcclxuICAgICAgc3RpY2tlcnM6IFtdLFxyXG4gICAgICBwYWdpbmc6IHt9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICBnZXRVcmw6IE5LQy5tZXRob2RzLnRvb2xzLmdldFVybCxcclxuICAgICAgaW5pdE1vZHVsZSgpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gXCI0My41cmVtXCI7XHJcbiAgICAgICAgc2VsZi5kb20uY3NzKHtcclxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5kb20uZHJhZ2dhYmxlKHtcclxuICAgICAgICAgIHNjcm9sbDogZmFsc2UsXHJcbiAgICAgICAgICBoYW5kbGU6IFwiLm1vZHVsZS1zcy10aXRsZVwiLFxyXG4gICAgICAgICAgZHJhZzogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XHJcbiAgICAgICAgICAgIGlmKHVpLnBvc2l0aW9uLnRvcCA8IDApIHVpLnBvc2l0aW9uLnRvcCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIGlmKHVpLnBvc2l0aW9uLnRvcCA+IGhlaWdodCAtIDMwKSB1aS5wb3NpdGlvbi50b3AgPSBoZWlnaHQgLSAzMDtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gc2VsZi5kb20ud2lkdGgoKTtcclxuICAgICAgICAgICAgaWYodWkucG9zaXRpb24ubGVmdCA8IDEwMCAtIHdpZHRoKSB1aS5wb3NpdGlvbi5sZWZ0ID0gMTAwIC0gd2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB3aW5XaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xyXG4gICAgICAgICAgICBpZih1aS5wb3NpdGlvbi5sZWZ0ID4gd2luV2lkdGggLSAxMDApIHVpLnBvc2l0aW9uLmxlZnQgPSB3aW5XaWR0aCAtIDEwMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgcmVzZXREb21Qb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGRvbSA9IHNlbGYuZG9tO1xyXG4gICAgICAgIHZhciB3aWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XHJcbiAgICAgICAgaWYod2lkdGggPCA3MDApIHtcclxuICAgICAgICAgIC8vIOWwj+Wxj+W5lVxyXG4gICAgICAgICAgZG9tLmNzcyh7XHJcbiAgICAgICAgICAgIFwid2lkdGhcIjogd2lkdGggKiAwLjgsXHJcbiAgICAgICAgICAgIFwidG9wXCI6IDAsXHJcbiAgICAgICAgICAgIFwicmlnaHRcIjogMFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOWuveWxj1xyXG4gICAgICAgICAgZG9tLmNzcyhcImxlZnRcIiwgKHdpZHRoIC0gZG9tLndpZHRoKCkpKjAuNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBzZWxlY3RUeXBlKHR5cGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIGlmKHR5cGUgPT09IFwidXBsb2FkXCIpIHtcclxuICAgICAgICAgIC8vIGlmKCF0aGlzLmxvY2FsU3RpY2tlcnMubGVuZ3RoKSB0aGlzLnNlbGVjdExvY2FsRmlsZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmdldFN0aWNrZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBjaGFuZ2VQYWdlKHR5cGUpIHtcclxuICAgICAgICBjb25zdCBwYWdpbmcgPSB0aGlzLnBhZ2luZztcclxuICAgICAgICBpZihwYWdpbmcuYnV0dG9uVmFsdWUubGVuZ3RoIDw9IDEpIHJldHVybjtcclxuICAgICAgICBpZih0eXBlID09PSBcImxhc3RcIiAmJiBwYWdpbmcucGFnZSA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIGlmKHR5cGUgPT09IFwibmV4dFwiICYmIHBhZ2luZy5wYWdlICsgMSA9PT0gcGFnaW5nLnBhZ2VDb3VudCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gdHlwZSA9PT0gXCJsYXN0XCI/IC0xOiAxO1xyXG4gICAgICAgIHRoaXMuZ2V0U3RpY2tlcnMocGFnaW5nLnBhZ2UgKyBjb3VudCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldFN0aWNrZXJzKHBhZ2UgPSAwKSB7XHJcbiAgICAgICAgY29uc3Qge3R5cGV9ID0gdGhpcztcclxuICAgICAgICBpZih0eXBlICE9PSBcIm93blwiKSByZXR1cm47XHJcbiAgICAgICAgbGV0IHVybCA9IGAvc3RpY2tlcj9wYWdlPSR7cGFnZX0mYz1vd24mcmV2aWV3ZWQ9dHJ1ZSZwZXJwYWdlPSR7dGhpcy5wZXJwYWdlfWA7XHJcbiAgICAgICAgbmtjQVBJKHVybCwgXCJHRVRcIilcclxuICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBzZWxmLmFwcC5zdGlja2VycyA9IGRhdGEub3duU3RpY2tlcnM7XHJcbiAgICAgICAgICAgIHNlbGYuYXBwLnBhZ2luZyA9IGRhdGEucGFnaW5nO1xyXG4gICAgICAgICAgICBzZWxmLmFwcC5lbW9qaSA9IGRhdGEuZW1vamk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKHN3ZWV0RXJyb3IpO1xyXG4gICAgICB9LFxyXG4gICAgICBmYXN0U2VsZWN0UGFnZSgpIHtcclxuICAgICAgICBjb25zdCBwYWdlTnVtYmVyID0gdGhpcy5wYWdlTnVtYmVyIC0gMTtcclxuICAgICAgICBjb25zdCBwYWdpbmcgPSB0aGlzLnBhZ2luZztcclxuICAgICAgICBpZighcGFnaW5nIHx8ICFwYWdpbmcuYnV0dG9uVmFsdWUubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgbGFzdE51bWJlciA9IHBhZ2luZy5idXR0b25WYWx1ZVtwYWdpbmcuYnV0dG9uVmFsdWUubGVuZ3RoIC0gMV0ubnVtO1xyXG4gICAgICAgIGlmKHBhZ2VOdW1iZXIgPCAwIHx8IGxhc3ROdW1iZXIgPCBwYWdlTnVtYmVyKSByZXR1cm4gc3dlZXRJbmZvKFwi6L6T5YWl55qE6aG15pWw6LaF5Ye66IyD5Zu0XCIpO1xyXG4gICAgICAgIHRoaXMuZ2V0U3RpY2tlcnMocGFnZU51bWJlcik7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNlbGVjdFN0aWNrZXIoc3RpY2tlcikge1xyXG4gICAgICAgIHNlbGYuY2FsbGJhY2soe1xyXG4gICAgICAgICAgdHlwZTogXCJzdGlja2VyXCIsXHJcbiAgICAgICAgICBkYXRhOiBzdGlja2VyXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNlbGVjdEVtb2ppKGVtb2ppKSB7XHJcbiAgICAgICAgc2VsZi5jYWxsYmFjayh7XHJcbiAgICAgICAgICB0eXBlOiBcImVtb2ppXCIsXHJcbiAgICAgICAgICBkYXRhOiBlbW9qaVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBhZGRMb2NhbEZpbGUoZmlsZSkge1xyXG4gICAgICAgIHRoaXMuZmlsZVRvU3RpY2tlcihmaWxlKVxyXG4gICAgICAgICAgLnRoZW4oc3RpY2tlciA9PiB7XHJcbiAgICAgICAgICAgIHNlbGYuYXBwLmxvY2FsU3RpY2tlcnMucHVzaChzdGlja2VyKTtcclxuICAgICAgICAgICAgc2VsZi5hcHAudXBsb2FkTG9jYWxTdGlja2VyKHN0aWNrZXIpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgZmlsZVRvU3RpY2tlcihmaWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHN0aWNrZXIgPSB7ZmlsZX07XHJcbiAgICAgICAgICBzdGlja2VyLnN0YXR1cyA9IFwidW5VcGxvYWRlZFwiO1xyXG4gICAgICAgICAgc3RpY2tlci5wcm9ncmVzcyA9IDA7XHJcbiAgICAgICAgICBOS0MubWV0aG9kcy5maWxlVG9VcmwoZmlsZSlcclxuICAgICAgICAgICAgLnRoZW4oYmFzZTY0ID0+IHtcclxuICAgICAgICAgICAgICBzdGlja2VyLnVybCA9IGJhc2U2NDtcclxuICAgICAgICAgICAgICByZXNvbHZlKHN0aWNrZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgc2VsZWN0ZWRMb2NhbEZpbGUoKSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSAkKFwiI21vZHVsZVNlbGVjdFN0aWNrZXJJbnB1dFwiKTtcclxuICAgICAgICBjb25zdCBmaWxlcyA9IGlucHV0WzBdLmZpbGVzO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlc1tpXTtcclxuICAgICAgICAgIHNlbGYuYXBwLmFkZExvY2FsRmlsZShmaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHNlbGVjdExvY2FsRmlsZSgpIHtcclxuICAgICAgICAkKFwiI21vZHVsZVNlbGVjdFN0aWNrZXJJbnB1dFwiKS5jbGljaygpO1xyXG4gICAgICB9LFxyXG4gICAgICB1cGxvYWRMb2NhbFN0aWNrZXIoc3RpY2tlcikge1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHN0aWNrZXIuc3RhdHVzID0gXCJ1cGxvYWRpbmdcIjtcclxuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBzdGlja2VyLmZpbGUpO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJ0eXBlXCIsIFwic3RpY2tlclwiKTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZU5hbWVcIiwgc3RpY2tlci5maWxlLm5hbWUpO1xyXG4gICAgICAgICAgICBpZihzZWxmLmFwcC5zaGFyZSkge1xyXG4gICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInNoYXJlXCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmtjVXBsb2FkRmlsZShcIi9yXCIsIFwiUE9TVFwiLCBmb3JtRGF0YSwgZnVuY3Rpb24oZSwgcHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICBzdGlja2VyLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgc3RpY2tlci5zdGF0dXMgPSBcInVwbG9hZGVkXCI7XHJcbiAgICAgICAgICAgIHNlbGYuYXBwLmxvY2FsU3RpY2tlcnMuc3BsaWNlKHNlbGYuYXBwLmxvY2FsU3RpY2tlcnMuaW5kZXhPZihzdGlja2VyKSwgMSk7XHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmFwcC5sb2NhbFN0aWNrZXJzLmxlbmd0aCkgc2VsZi5hcHAuc2VsZWN0VHlwZShcIm93blwiKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgc2NyZWVuVG9wV2FybmluZyhkYXRhLmVycm9yIHx8IGRhdGEpO1xyXG4gICAgICAgICAgICBzdGlja2VyLmVycm9yID0gZGF0YS5lcnJvciB8fCBkYXRhO1xyXG4gICAgICAgICAgICBzdGlja2VyLnN0YXR1cyA9IFwidW5VcGxvYWRlZFwiO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3RhcnRVcGxvYWQocykge1xyXG4gICAgICAgIHRoaXMudXBsb2FkTG9jYWxTdGlja2VyKHMpO1xyXG4gICAgICB9LFxyXG4gICAgICBvcGVuKGNhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgc2VsZi5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMucmVzZXREb21Qb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMuaW5pdE1vZHVsZSgpO1xyXG4gICAgICAgIHNlbGYuZG9tLnNob3coKTtcclxuICAgICAgICB0aGlzLmdldFN0aWNrZXJzKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHNlbGYuZG9tLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHNlbGYub3BlbiA9IHNlbGYuYXBwLm9wZW47XHJcbiAgc2VsZi5jbG9zZSA9IHNlbGYuYXBwLmNsb3NlO1xyXG59OyJdfQ==
