(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StickerViewer = function StickerViewer() {
  _classCallCheck(this, StickerViewer);

  var self = this;
  self.dom = $("#moduleStickerViewer");
  self.dom.modal({
    show: false
  });
  self.app = new Vue({
    el: "#moduleStickerViewerApp",
    data: {
      sticker: "",
      uid: NKC.configs.uid,
      management: false,
      loading: false
    },
    mounted: function mounted() {
      this.init();
    },
    methods: {
      getUrl: NKC.methods.tools.getUrl,
      fromNow: NKC.methods.fromNow,
      collection: function collection() {
        nkcAPI("/sticker", "POST", {
          type: "collection",
          stickersId: [this.sticker._id]
        }).then(function () {
          self.app.close();
          sweetSuccess("表情已添加");
        })["catch"](sweetError);
      },
      moveSticker: function moveSticker() {
        var sticker = this.sticker;
        var body = {
          type: "move",
          stickersId: [sticker.collected._id]
        };
        nkcAPI("/sticker", "POST", body).then(function () {
          self.app.close();
          window.location.reload();
        })["catch"](sweetError);
      },
      shareSticker: function shareSticker() {
        var sticker = this.sticker;
        var body = {
          type: "share",
          stickersId: [sticker._id]
        };
        nkcAPI("/sticker", "POST", body).then(function () {
          sweetSuccess("操作成功");
        })["catch"](sweetError);
      },
      removeSticker: function removeSticker() {
        var sticker = this.sticker;
        sweetQuestion("\u786E\u5B9A\u8981\u5220\u9664\u8868\u60C5\uFF1F").then(function () {
          var body = {
            type: "delete",
            stickersId: [sticker.collected._id]
          };
          return nkcAPI("/sticker", "POST", body);
        }).then(function () {
          self.app.close();
          window.location.reload();
        })["catch"](sweetError);
      },
      init: function init() {
        var dom = $("[data-sticker-rid]");

        for (var i = 0; i < dom.length; i++) {
          var d = dom.eq(i);
          if (d.attr("data-sticker-init") === "true") continue;
          d.on("click", function () {
            self.app.open($(this).attr("data-sticker-rid"), !!$(this).attr("data-sticker-management"));
          });
        }
      },
      open: function open(rid, management) {
        self.app.management = !!management;
        self.dom.modal("show");
        this.loading = true;
        nkcAPI("/sticker/".concat(rid, "?t=json"), "GET").then(function (data) {
          self.app.sticker = data.sticker;
          self.app.loading = false;
        })["catch"](sweetError);
      },
      close: function close() {
        self.dom.modal("hide");
      }
    }
  });
};

var stickerViewer = new StickerViewer();
NKC.methods.initStickerViewer = stickerViewer.app.init;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
