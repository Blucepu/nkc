+includeJS("/external_pkgs/plyr/plyr.polyfilled.min.js")
+includeJS("/external_pkgs/plyr/plyr.min.js")
include ./mask.pug

+includeJS('/publicModules/plyr/controls.js')
//-script
  include ./controls.js
script.
  ;(function(){
    var players = [];
    var videoControls = ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'download', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'];
    var audioControls = ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'download', 'captions', 'pip', 'airplay', 'fullscreen'];
    // 切换视频分辨率之后重新设置视频的下载链接
    var setPlayerDownloadUrl = function(player, dom) {
      player.download = dom.attr('src') + '&d=attachment';
    };
    var addEvents = function(player, dom) {
      player.on('qualitychange', function () {
        setPlayerDownloadUrl(player, dom);
      });
      player.on('ready', function(d) {
        setPlayerDownloadUrl(player, dom);
      });
    }
    NKC.methods.initVideo = function() {
      var videoDom = $(".plyr-dom");
      for (var i = 0; i < videoDom.length; i++) {
        var dom = videoDom.eq(i);
        var isVideo = dom[0].tagName.toLowerCase() === 'video';
        if(!isVideo && NKC.configs.platform === 'reactNative') continue;
        // if(!isVideo) continue;
        var title = dom.attr("data-plyr-title");
        var rid = dom.attr("data-rid");
        var player = new Plyr(videoDom.eq(i), {
          ratio: '4:3',
          title: title,
          controls: isVideo? videoControls: audioControls,
          settings: ['quality'],
          quality: { default: 480, options: [1080, 720, 480] },
          blankVideo: "/external_pkgs/plyr/blank.mp4",
          autopause: true,
        });
        if(!isVideo) {
          player.download = "/r/" + rid + "?d=attachment";
        } else {
          addEvents(player, dom);
        }
        player.speed = 1;
        NKC.methods.initPlyrMask(player);
        players.push(player);
      }

      // 整页播放器集中控制
      NKC.methods.initPlayerControls(players);
    };
    NKC.methods.initVideo();

    if(NKC.configs.platform === 'reactNative') {
      var elements = $('[data-tag="nkcsource"][data-type="audio"]');

      for(var i = 0; i < elements.length; i++) {
        var element = elements.eq(i);
        var title = element.find('span.nkcsource-audio-title');
        if(title) title = title.text();
        var rid = element.attr('data-id');
        var size = element.find('audio[data-size]');
        if(size.length) {
          size = Number(size.attr('data-size'));
        } else {
          size = 0;
        }
        size = NKC.methods.tools.getSize(size);
        var url = "/r/" + rid + "?d=attachment";
        var appAudio = $('<div class="app-audio"><div class="fa fa-play app-audio-icon" onclick="NKC.methods.rn.updateMusicListAndPlay(\''+rid
          +'\')"></div><div class="app-audio-container"><a class="app-audio-title" href="'+url
          +'" target="_blank" data-type="download" data-title="'+title
          +'">'+title
          +'</a><div class="app-audio-info">'+size
          +'</div></div></div>')
        element.html(appAudio);
      }

      // var initEvent = function (element, rid) {
      //   element.onclick = function () {
      //     NKC.methods.rn.updateMusicListAndPlay(rid);
      //   };
      // }
      //
      // for (var i = 0; i < elements.length; i++) {
      //   var e = elements.eq(i);
      //   var rid = e.attr('data-id');
      //   if (rid === '') continue;
      //   var audioTitle = e.find('span.nkcsource-audio-title');
      //   var element = audioTitle[0];
      //   if(element) initEvent(element, rid);
      // }
    }
  }());

