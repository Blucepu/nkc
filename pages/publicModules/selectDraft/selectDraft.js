(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

NKC.modules.SelectDraft =
/*#__PURE__*/
function () {
  function _class() {
    _classCallCheck(this, _class);

    var self = this;
    self.dom = $("#moduleSelectDraft");
    self.app = new Vue({
      el: "#moduleSelectDraftApp",
      data: {
        uid: NKC.configs.uid,
        paging: {},
        perpage: 7,
        loading: true,
        drafts: []
      },
      methods: {
        fromNow: NKC.methods.fromNow,
        initDom: function initDom() {
          var height = "43.5rem";
          self.dom.css({
            height: height
          });
          self.dom.draggable({
            scroll: false,
            handle: ".module-sd-title",
            drag: function drag(event, ui) {
              if (ui.position.top < 0) ui.position.top = 0;
              var height = $(window).height();
              if (ui.position.top > height - 30) ui.position.top = height - 30;
              var width = self.dom.width();
              if (ui.position.left < 100 - width) ui.position.left = 100 - width;
              var winWidth = $(window).width();
              if (ui.position.left > winWidth - 100) ui.position.left = winWidth - 100;
            }
          });
          var width = $(window).width();

          if (width < 700) {
            // 小屏幕
            self.dom.css({
              "width": width * 0.8,
              "top": 0,
              "right": 0
            });
          } else {
            // 宽屏
            self.dom.css("left", (width - self.dom.width()) * 0.5 - 20);
          }

          self.dom.show();
        },
        getDraftInfo: function getDraftInfo(draft) {
          var type = draft.type,
              thread = draft.thread,
              forum = draft.forum;
          var info = "";

          if (type === "newThread") {
            info = "\u53D1\u8868\u6587\u7AE0";
          } else if (type === "newPost") {
            info = "\u5728\u6587\u7AE0\u300A".concat(thread.title, "\u300B\u4E0B\u53D1\u8868\u56DE\u590D");
          } else if (type === "modifyPost") {
            info = "\u4FEE\u6539\u6587\u7AE0\u300A".concat(thread.title, "\u300B\u4E0B\u7684\u56DE\u590D");
          } else if (type === "modifyThread") {
            info = "\u4FEE\u6539\u6587\u7AE0\u300A".concat(thread.title, "\u300B");
          } else {
            info = "\u4FEE\u6539\u4E13\u4E1A\u300A".concat(forum.title, "\u300B\u7684\u4E13\u4E1A\u8BF4\u660E");
          }

          return info;
        },
        insert: function insert(data) {
          self.callback(data);
          data.delay = 3;

          var func = function func() {
            setTimeout(function () {
              data.delay--;

              if (data.delay > 0) {
                func();
              }
            }, 1000);
          };

          func();
        },
        removeDraft: function removeDraft(draft) {
          var _this = this;

          sweetQuestion("确定要删除草稿吗？").then(function () {
            nkcAPI('/u/' + _this.uid + "/drafts/" + draft.did, "DELETE").then(function () {
              self.app.getDrafts(self.app.paging.page);
            })["catch"](function (data) {
              sweetError(data);
            });
          });
        },
        getDrafts: function getDrafts() {
          var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          nkcAPI("/u/".concat(this.uid, "/profile/draft?page=").concat(page, "&perpage=").concat(this.perpage), "GET").then(function (data) {
            data.drafts.map(function (d) {
              d.delay = 0;
            });
            self.app.drafts = data.drafts;
            self.app.paging = data.paging;
            self.app.loading = false;
          })["catch"](sweetError);
        },
        loadDraft: function loadDraft(d) {
          sweetQuestion("\u7EE7\u7EED\u521B\u4F5C\u5C06\u4F1A\u8986\u76D6\u7F16\u8F91\u5668\u4E2D\u5168\u90E8\u5185\u5BB9\uFF0C\u786E\u5B9A\u7EE7\u7EED\uFF1F").then(function () {
            if (window.PostInfo && window.PostInfo.showCloseInfo) {
              window.PostInfo.showCloseInfo = false;
            }

            window.location.href = "/editor?type=redit&id=".concat(d.did);
          })["catch"](sweetError);
        },
        refresh: function refresh() {
          this.getDrafts(self.app.paging.page);
        },
        open: function open(callback) {
          self.callback = callback;
          this.initDom();
          this.getDrafts();
        },
        close: function close() {
          self.dom.hide();
        }
      }
    });
    self.open = self.app.open;
    self.close = self.app.close;
  }

  return _class;
}();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
