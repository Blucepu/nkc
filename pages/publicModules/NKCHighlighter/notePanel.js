(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

NKC.modules.NotePanel =
/*#__PURE__*/
function () {
  function _class() {
    _classCallCheck(this, _class);

    var self = this;
    self.app = new Vue({
      el: "#moduleNotePanel",
      data: {
        uid: NKC.configs.uid,
        disableNoteContent: false,
        show: false,
        edit: false,
        // 新添加的笔记内容
        content: "",
        // 显示笔记
        note: ""
        /* note的数据结构
        {
          _id: Number,
          type,
          targetId,
          notes: [
            {
              toc: Date,
              uid: String,
              user: {
                username: String,
                avatar: String,
                uid: String
              },
              content: String
            }
          ],
        }
        */

      },
      updated: function updated() {
        this.resetDom();
      },
      methods: {
        fromNow: NKC.methods.fromNow,
        getUrl: NKC.methods.tools.getUrl,
        visitUrl: NKC.methods.visitUrl,
        setTextareaSize: function setTextareaSize(size) {
          var textarea = this.$el.getElementsByClassName("create-textarea")[0];
          textarea.style.height = size;
        },
        resetTextarea: function resetTextarea() {
          this.content = "";
          this.setTextareaSize("2.5rem");
        },
        autoResize: function autoResize(e) {
          var textArea = e.target;
          var num = 2.5 * 12;
          textArea.style.height = '2.5rem';

          if (num < textArea.scrollHeight) {
            textArea.style.height = textArea.scrollHeight + 'px';
          }
        },
        saveNewNote: function saveNewNote() {
          // 创建新的
          var content = this.content,
              note = this.note;
          Promise.resolve().then(function () {
            if (!content) throw "请输入笔记内容";
            var type = note.type,
                targetId = note.targetId,
                nodes = note.nodes,
                _id = note._id;
            return nkcAPI("/note", "POST", {
              _id: _id,
              type: type,
              targetId: targetId,
              content: content,
              nodes: nodes
            });
          }).then(function (data) {
            self.app.content = "";
            self.app.resetTextarea();
            self.app.resetDom();
            self.callback(data.note);
            self.app.extendNoteContent(data.note);
            self.app.note = data.note;
            setTimeout(function () {
              self.app.scrollToBottom();
            }, 200);
          })["catch"](sweetError);
        },
        modifyNoteContent: function modifyNoteContent(n) {
          if (n.edit) {
            n.edit = false;
          } else {
            n.edit = true;
            if (!n._content) n._content = n.content;
          }
        },
        extendNoteContent: function extendNoteContent(note) {
          note.notes.map(function (n) {
            n.edit = false;
            n._content = "";
          });
        },
        saveNote: function saveNote(n) {
          // 保存编辑
          var note = this.note,
              uid = this.uid;
          var url,
              method,
              data = {};

          if (n.uid === uid) {
            url = "/note/".concat(note._id, "/c/").concat(n._id);
            method = "PATCH";
            data.content = n._content;
          } else {
            url = "/nkc/note";
            method = "POST";
            data.type = "modify";
            data.noteId = note._id;
            data.noteContentId = n._id;
            data.content = n._content;
          }

          nkcAPI(url, method, data).then(function (data) {
            n.content = n._content;
            n.html = data.noteContentHTML;
            self.app.modifyNoteContent(n);
            Vue.set(note.notes, note.notes.indexOf(n), n);
          })["catch"](sweetError);
        },
        open: function open(callback, options) {
          var _this = this;

          new Promise(function (resolve, reject) {
            self.app.resetDom();
            self.callback = callback;
            var id = options.id,
                note = options.note;

            if (note) {
              self.app.note = note;
              resolve();
            } else {
              nkcAPI("/note/".concat(id), "GET").then(function (data) {
                self.app.extendNoteContent(data.note);
                self.app.note = data.note;
                resolve();
              })["catch"](reject);
            }
          }).then(function () {
            _this.show = true;
            NKC.methods.initUnfixedPanel();
          })["catch"](sweetError);
        },
        close: function close() {
          this.show = false;
        },
        resetDom: function resetDom() {
          var dom = this.$el;
          dom.style.height = "auto";
        },
        scrollToBottom: function scrollToBottom() {
          var dom = this.$el.getElementsByClassName("note-panel-notes")[0];
          dom.scrollTop = dom.scrollHeight + 10000;
        },
        deleteNoteContent: function deleteNoteContent(n, type) {
          var note = this.note;
          var url,
              method,
              data = {};

          if (type === "delete") {
            url = "/note/".concat(note._id, "/c/").concat(n._id);
            method = "DELETE";
          } else {
            method = "POST";
            url = "/nkc/note";
            data.type = "disable";
            data.noteId = note._id;
            data.noteContentId = n._id;
          }

          sweetQuestion("确定要执行此操作？").then(function () {
            return nkcAPI(url, method, data);
          }).then(function () {
            sweetSuccess("操作成功");
          })["catch"](sweetError);
        }
      }
    });
    self.open = self.app.open;
    self.close = self.app.close;
  }

  return _class;
}();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
