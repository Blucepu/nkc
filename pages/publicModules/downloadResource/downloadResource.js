(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

NKC.modules.downloadResource = /*#__PURE__*/function () {
  function _class() {
    _classCallCheck(this, _class);

    var self = this;
    self.dom = $("#moduleDownloadResource");
    self.app = new Vue({
      el: "#moduleDownloadResourceApp",
      data: {
        rid: "",
        fileName: "未知",
        type: "",
        size: 0,
        costs: [],
        hold: [],
        status: "loadding"
      },
      computed: {
        costMessage: function costMessage() {
          return this.costs.map(function (c) {
            return c.name + c.number;
          }).join("、");
        },
        holdMessage: function holdMessage() {
          return this.hold.map(function (c) {
            return c.name + c.number;
          }).join("、");
        }
      },
      methods: {
        fromNow: NKC.methods.fromNow,
        initDom: function initDom() {
          var height = "20rem";
          self.dom.css({
            height: height
          });
          self.dom.draggable({
            scroll: false,
            handle: ".module-sd-title",
            drag: function drag(event, ui) {
              if (ui.position.top < 0) ui.position.top = 0;
              var height = $(window).height();
              if (ui.position.top > height - 30) ui.position.top = height - 30;
              var width = self.dom.width();
              if (ui.position.left < 100 - width) ui.position.left = 100 - width;
              var winWidth = $(window).width();
              if (ui.position.left > winWidth - 100) ui.position.left = winWidth - 100;
            }
          });
          var width = $(window).width();

          if (width < 700) {
            // 小屏幕
            self.dom.css({
              "width": width * 0.8,
              "top": 0,
              "right": 0
            });
          } else {
            // 宽屏
            self.dom.css("left", (width - self.dom.width()) * 0.5 - 20);
          }

          self.dom.show();
        },
        getResourceInfo: function getResourceInfo(rid) {
          var self = this; // 下载此附件是否需要积分

          nkcAPI("/r/".concat(rid, "?c=query&random=").concat(Math.random()), "GET", {}).then(function (data) {
            console.log(data);
            var dataUrl = "/r/".concat(rid, "?t=attachment&c=download&random=").concat(Math.random());

            if (data.settingNoNeed) {
              var downloadLink = $("<a></a>");
              downloadLink.attr("href", dataUrl);
              downloadLink[0].click();
              self.close();
              return;
            }

            self.status = data.need ? "needScore" : "noNeedScore";
            self.rid = data.rid;
            self.fileName = data.resource.oname;
            self.type = data.resource.ext;
            self.size = NKC.methods.getSize(data.resource.size);
            var myAllScore = data.myAllScore;
            if (!myAllScore) return;
            self.costs = myAllScore.map(function (score) {
              return {
                name: score.name,
                number: score.addNumber / 100 * -1
              };
            });
            self.hold = myAllScore.map(function (score) {
              return {
                name: score.name,
                number: score.number / 100
              };
            });
          })["catch"](function (data) {
            self.close();
            sweetError(data);
          });
        },
        open: function open(rid) {
          this.status = "loadding";
          this.initDom();
          this.getResourceInfo(rid);
        },
        close: function close() {
          self.dom.hide();
        }
      }
    });
    self.open = self.app.open;
    self.close = self.app.close;
  }

  return _class;
}();

(function () {
  var dr = new NKC.modules.downloadResource();
  var attachments = [].slice.call($("[data-tag='nkcsource'][data-type='attachment']"));
  attachments.forEach(function (attachment) {
    $(attachment).find(".article-attachment-name").on("click", function (e) {
      e.preventDefault();
      e.stopPropagation();
      var rid = $(attachment).attr("data-id");
      dr.open(rid);
      return false;
    });
  });
})();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
