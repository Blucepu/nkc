include ./paragraph.pug
include ./text.pug
include ./heading.pug
include ./orderedList.pug
include ./bulletList.pug
include ./blockquote.pug
include ./horizontalRule.pug
include ./codeBlock.pug
include ./listItem.pug
include ./table.pug
include ./tableHeader.pug
include ./tableRow.pug
include ./tableCell.pug
include ./pictureBlock.pug
include ./pictureInline.pug
include ./audioBlock.pug
include ./videoBlock.pug
include ./attachmentBlock.pug
include ./taskList.pug
include ./taskItem.pug
include ./emoji.pug
include ./sticker.pug
include ./xsfLimit.pug
include ./math.pug
include ./image.pug

mixin loopRender(nodes)
  if nodes
    for node in nodes
      case node.type
        when 'paragraph'
          +renderParagraph(node)
        when 'text'
          +renderText(node)
        when 'heading'
          +renderHeading(node)  
        when 'orderedList'
          +renderOrderedList(node)
        when 'bulletList'
          +renderBulletList(node)
        when 'listItem'  
          +renderListItem(node)
        when 'blockquote'
          +renderBlockquote(node)  
        when 'horizontalRule'
          +renderHorizontalRule(node)
        when 'codeBlock'
          +renderCodeBlock(node)  
        when 'nkc-table'
          +renderTable(node)
        when 'tableRow'
          +renderTableRow(node)
        when 'tableCell'
          +renderTableCell(node)
        when 'tableHeader'  
          +renderTableHeader(node)
        when 'nkc-picture-block'
          +renderPictureBlock(node)
        when 'nkc-picture-inline'
          +renderPictureInline(node)
        when 'nkc-audio-block'
          +renderAudioBlock(node)
        when 'nkc-video-block'
          +renderVideoBlock(node)
        when 'nkc-attachment-block'
          +renderAttachmentBlock(node)
        when 'taskList'
          +renderTaskList(node)
        when 'taskItem'
          +renderTaskItem(node)
        when 'nkc-emoji'
          +renderEmoji(node)
        when 'nkc-sticker'
          +renderSticker(node)
        //- 学术分隐藏非叶子节点
        when 'nkc-xsf-limit'
          +renderXsfLimit(node)
        when 'nkc-math'
          +renderMath(node)
          +renderTaskItem(node)
        when 'image'
          +renderImage(node)
        default
          p= `Unknown node type: ${node.type}`
div.render-content.math-jax(data-type="nkc-render-content" data-id=`${pid}` data-source=`${source}` data-sid=`${sid}`)
  +loopRender(data.content)
